%!
%%Title: java.nutsandbolts.html
%%DocumentFonts: NewCenturySchlbk-Roman NewCenturySchlbk-Bold NewCenturySchlbk-Italic NewCenturySchlbk-BoldItalic Courier Courier-Bold Courier-Oblique Courier-BoldOblique
%%Creator: html2ps 0.2 alpha, written by Jan Karrman, jan@tdb.uu.se
%%EndComments
save
1000 dict begin
/colorimage where {pop} {
 /colorimage {
  pop pop /Bp exch def /Gp exch def /Rp exch def
  {/Re Rp def /Gr Gp def /Bl Bp def
  0 1 Re length 1 sub {
   /i exch def Gr i Re i get 0.299 mul Gr i get 0.587 mul add
   Bl i get 0.114 mul add cvi put
  } for Gr} image
 } def
} ifelse
/D {def} def
/t {true} D
/f {false} D
/RF {/NewCenturySchlbk-Roman} D
/BF {/NewCenturySchlbk-Bold} D
/IF {/NewCenturySchlbk-Italic} D
/IB {/NewCenturySchlbk-BoldItalic} D
/FF {/Courier} D
/FB {/Courier-Bold} D
/FI {/Courier-Oblique} D
/FT {/Courier-BoldOblique} D
/F 1 D
/W {453 F div} D
/LE {651 F div} D
/PS 1 D
/HS [19 17 15 13 12 11] D
/HT [2 2 2 2 2 2] D
/MK 7 D
/NO t D
/ZL f D
/ZR f D
/Zl () D
/Zr () D
/TU f D
/AU t D
/SN 0 D
/LA {TU PM 1 eq and {W 56 F div add 0 translate}
 {70 705 translate F dup scale} ie} D
/FP 0 D
/SG [0.80000000000000004441 1 1] D
statusdict /setduplexmode known
 {statusdict begin false setduplexmode end} if
%-- End of variable part --
/ie {ifelse} D
/E {exch} D
/M {moveto} D
/S {show} D
/R {rmoveto} D
/L {lineto} D
/RL {rlineto} D
/CP {currentpoint} D
/SW {stringwidth} D
/GI {getinterval} D
/PI {putinterval} D
/U {gsave CP currentfont /FontInfo get /UnderlinePosition get
 0 E currentfont /FontMatrix get dtransform E pop add newpath M
 dup SW RL stroke grestore} D
/B {-10 3 R gsave CP newpath 2.5 0 360 arc closepath
 UI 2 mod 0 eq {stroke} {fill} ie grestore 10 -3 R} D
/NP {/PM PN SN sub 2 mod D PN SN gt TU not PM 0 eq or and {showpage} if
 0.6 setlinewidth LA /BP t D /PN PN 1 add D
 /OF currentfont D RF findfont 10 scalefont setfont
 /YO {LE neg 60 F div dup 40 gt {pop 40} if sub} D
 NO {W 2 div YO M PN ST cvs S} if
 ZL {0 YO M Zl S} if
 ZR {W YO M Zr dup stringwidth pop neg 0 R S} if
 OF setfont
 XO SZ SL get neg M /CI 0 D} D
/SF {/CS E D CS SZ SL 3 2 roll put /YI CS -1.2 mul D dup ST cvs C1 E join
 ( NF ) join /C1 E D NF /BW ( ) SW pop D} D
/NF {FL E get findfont CS scalefont setfont} D
/FS {CF MK PF {1 or} if and or /CF E D FR SL CF put CF E SF} D
/FL [RF FF BF FB IF FI IB FT] D
/reencodeISO {
dup dup findfont dup length dict begin
{ 1 index /FID ne { def }{ pop pop } ie } forall
/Encoding ISOLatin1Encoding D
currentdict end definefont
} D
/ISOLatin1Encoding [
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
/parenleft/parenright/asterisk/plus/comma/minus/period/slash
/zero/one/two/three/four/five/six/seven/eight/nine/colon/semicolon
/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N
/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright
/asciicircum/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m
/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/asciitilde
/.notdef/backslash/parenleft/parenright/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/dotlessi/grave/acute/circumflex/tilde/macron/breve
/dotaccent/dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut
/ogonek/caron/space/exclamdown/cent/sterling/currency/yen/brokenbar
/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot
/hyphen/registered/macron/degree/plusminus/twosuperior/threesuperior
/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine
/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute
/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis
/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave
/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex
/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis
/yacute/thorn/ydieresis
] D
FL {reencodeISO D} forall

/BS {/PC E D /TX E D /fin f D /CW 0 D /LK 0 D /SC 0 D
 /RT TX D {RT ( ) search {/NW E D pop /RT E D /WH NW SW pop D CW WH add LL gt
 {TX SC LK SC sub GI PC /SC LK D /CW WH BW add D}
 {/CW CW WH add BW add D} ie
 /LK LK NW length add 1 add D} {pop exit} ie} loop
 /fin t D /LC TX length D /WH RT SW pop D CW WH add LL gt
 {TX SC LK SC sub GI PC NL RT dup () ne {PC} {pop} ie}
 {TX SC LC SC sub GI PC} ie} D

/BT {RS dup dup () ne E ( ) ne and
 {/LS LL D /LL W L1 sub XO sub D {/CI 0 D SH /BP f D fin not {NL} if
  /HM t D /LL LS D} BS} {BG {pop} {SH /BP f D} ie} ie} D
/BL {HM not {CP E pop XO E M} if} D
/NL {BL W XO sub L1 sub TB {BW add} if AT mul 2 div YA neg dup 0 lt {3 sub} if
 R F0 CF ne {F0 NF} if C1 cvx exec /C1 () D /L1 0 D /F0 CF D
 BP not {0 YB NN neg R} if /YA 0 D /YB 0 D CP /YC E D pop XO YC M YC LE neg gt
 {YI CI sub dup 0 lt BP not and {dup 0 E R CI add /CI E D} {pop} ie}
 {NP} ie /T t D} D
/RS {/TM E D /CN 0 D TM
 {dup 9 eq E 10 eq or {TM CN ( ) PI} if
  /CN CN 1 add D} forall /CN 0 D /BK HM EN and {0} {1} ie D TM
 {dup 32 ne {TM CN 3 2 roll put /CN CN 1 add D /BK 0 D}
 {pop BK 0 eq {TM CN 32 put /CN CN 1 add D} if /BK 1 D} ie}
  forall TM 0 CN GI dup dup () ne E ( ) ne and
  {dup CN 1 sub get 32 eq {/EN f D} {/EN t D} ie} if} D
/join {2 copy length E length add string dup 4 2 roll 2 index 0 3 index
 PI E length E PI} bind D
/EG {dup 0 E dup () eq {E pop} {E get} ifelse 10 ne {(\n) E join} if} D
/WR {PB {EG /PB f D} if PP {EG /PP f D} if (\n) search
 {dup () ne BP not or {TR /CI 0 D /NC 0 D NL pop WR}{pop pop WR} ie} {TR} ie} D
/TR {(\t) search {dup length /NC E NC add D SH MS 0 8 NC 8 mod sub dup
 /NC E NC add D GI SH pop TR} {dup length /NC E NC add D SH} ie
 /BP f D} D
/SH {CP E pop LE neg lt {NP} if dup SW pop L1 add /L1 E D
 C1 (\() join T not {( ) join} if E join (\)) join
 AU AF and UF or {( U ) join} if ( S ) join /C1 E D /T t D /TB EN not D} D
/BG {CP pop XO sub abs 0.01 lt} D
/ON {AR AI NN get 1 add dup AR AI 3 -1 roll put ST cvs length dup ST E (. ) PI
 ST 0 3 -1 roll 2 add GI dup SW pop neg 0 R S} D
/SP {YI E /YI E D NL /YI E D} D
/BR {BN} D
/BN {PF {WR} {BT NL} ie /HM f D} D
/AB {CH E 0 E put CH join WB} D
/NN {dup 0 lt {pop 0} if} D
/H  {1 sub /HL E D E BN /AT E D CP E pop LE neg WW add lt {NP} if
 BH SP /SL SL 1 add D HS HL get HT HL get FS} D
/EH {BN /AT 0 D AH SP /SL SL 1 sub NN D /CF 0 D SZ SL get FR SL get FS} D
/P  {E PF {WR /PP t D} {BN AE not {AH SP} if} ie /AT E D} D
/HR {BN 0 CP E pop M gsave PF {0 YI R} if W 0 RL stroke grestore /CI 0 D
 /BP f D NL} D
/AD {BN /AE t D AH SP 4 11 SF} D
/DA {BN /AE f D AH SP 0 11 SF} D
/PR {BN /AT 0 D /CF 0 D 9 PS mul 1 FS /PF t D /PB t D /NC 0 D} D
/PW {pop PR} D
/RP {PF {dup () ne {dup dup length 1 sub get 10 ne {(\n) join} if} if
 WR AH SP /CF 0 D 11 0 FS /PF f D} {BT} ie} D
/SI {/XO AI LG add NN IN mul BC NN BI mul add D /LL W XO sub D} D
/DT {BN /LG LG 1 sub D SI /LG LG 1 add D BL} D
/DD {BN SI BL} D
/DL {BN XO 0 eq {AH SP} if /LG LG 1 add D BL} D
/LD {BN LG 0 gt {/LG LG 1 sub D} if SI XO 0 eq {AH SP} if BL} D
/UL {BN XO 0 eq {AH SP} {NL} ie NR AI NN 0 put /UI UI 1 add D
 /AI AI 1 add D SI BL} D
/LU {BN /UI UI 1 sub D /AI AI 1 sub D SI XO 0 eq {AH SP} {NL} ie BL} D
/OL {BN XO 0 eq {AH SP} {NL} ie NR AI NN 1 put /AI AI 1 add D SI BL} D
/LO {BN AR AI NN 0 put /AI AI 1 sub D SI XO 0 eq {AH SP} {NL} ie BL} D
/LI {BN /BP f D /CI 0 D CP E pop LE neg lt {NP} if
 /C1 C1 NR AI 1 sub NN get 1 eq {( ON )} {( B )} ie join D BL} D
/BQ {BN AH SP /BC BC 1 add D SI BL} D
/QB {BN AH SP /BC BC 1 sub D SI BL} D
/WB {PF {WR} {BT} ie} D
/A  {WB /AF t D} D
/EA {WB /AF f D} D
/SS {SZ SL get /SL SL 1 add D} D
/I  {WB SS 4 FS} D
/BD {WB SS 2 FS} D
/TT {WB SS 1 FS} D
/KB {WB SS /CF 0 D 3 FS} D
/CT {WB SS /CF 0 D 4 FS} D
/SM {WB SS /CF 0 D 1 FS} D
/ES {WB /SL SL 1 sub NN D /CF 0 D SZ SL get FR SL get FS} D
/UN {WB /UF t D} D
/NU {WB /UF f D} D
/SB {0 1 NI {/N E D /K WS N get D /NY AY N get FC N get mul D /BV NY array D
 0 1 NY 1 sub {/TM K string D currentfile TM readhexstring pop pop BV E TM put}
 for BM N BV put} for} D
/colorimage where {pop} {
 /colorimage {
  pop pop /Bp E D /Gp E D /Rp E D
  {/Re Rp D /Gr Gp D /Bl Bp D
  0 1 Re length 1 sub {
   /i E D Gr i Re i get 0.299 mul Gr i get 0.587 mul add Bl i get 0.114 mul add
   cvi put
  } for Gr} image
 } D
} ie
/IP {BV N get /N N 1 add D} D
/II {/K E D /TY E D /XW AX K get D /YW AY K get D /IS SG IT K get get D
 /XS XW IS mul D /YS YW IS mul D YS CS sub TY 2 eq {/MB E D /MA 0 D}
 {TY 2 mod 1 eq {2 div /MA E 2 sub D /MB MA 4 add D}{/MA E D /MB 0 D} ie} ie} D
/IM {II /ty TY D /xs XS D /ys YS D /ya YA D /yb YB D /ma MA D /mb MB D /k K D
 /CI 0 D WB L1 xs add dup /L1 E D XO add W gt
 {NL /YA ma D /YB mb D /YS ys D /L1 xs D}
 {ma YA gt {/YA ma D} if mb YB gt {/YB mb D} if} ie CP E pop YS sub LE neg lt
 {NP /YA ma D /YB mb D /L1 xs D} if /BP f D ty ST cvs ( ) join k ST cvs join
 C1 E join ( DI ) join FP 2 eq FP 1 eq AF and or {( FM ) join} if /C1 E D
 /HM t D /EN f D /T TY 3 eq D} D
/DI {II /YN YW neg D /HM t D /CI 0 D /K2 IX K get D gsave CP MB sub translate
 K2 0 ge {/DP AZ K2 get D /BV BM K2 get D XS YS scale /N 0 D XW YW DP
 [XW 0 0 YN 0 YW] {IP} FC K2 get 1 eq {image} {{IP} {IP} t 3 colorimage} ie}
 {PV K2 neg 1 sub get exec} ie grestore XS 0 R} D
/FM {gsave CP MB sub translate XS neg 0 M 0 YS RL XS 0 RL 0 YS neg RL XS neg
 0 RL stroke grestore} D
/BH -35 D
/AH -28 D
/LL W D
/XO 0 D
/YI 0 D
/CI 0 D
/LG 0 D
/AI 0 D
/UI 0 D
/IN 30 D
/BI 12 D
/WW 50 D
/AR [0 0 0 0 0 0 0 0 0 0] D
/NR [0 0 0 0 0 0 0 0 0 0] D
/FR [0 0 0 0 0 0 0 0 0 0] D
/SZ [0 0 0 0 0 0 0 0 0 0] D
/SL 0 D
/CF 0 D
/BC 0 D
/YA 0 D
/YB 0 D
/F0 0 D
/N 0 D
/AT 0 D
/C1 () D
/C2 () D
/L1 0 D
/L2 0 D
/PN SN D
/MS (        ) D
/CH 1 string D
/ST 6 string D
/HM f D
/PF f D
/EN f D
/TB f D
/UF f D
/PP f D
/AE f D
/AF f D
/BP t D
/T t D
/AX [26 26 26 26 20 20 20 32 20 29] D
/AY [26 26 26 26 20 20 20 32 20 60] D
/IX [0 1 2 3 4 5 6 7 8 9] D
/IT [0 0 0 0 0 0 0 0 0 0] D
/AZ [8 8 8 8 8 8 8 8 8 8] D
/WS [26 26 26 26 20 20 20 32 20 29] D
/FC [3 3 3 3 3 3 3 3 3 3] D
/NI 9 D
/BM 10 array D
%%EndProlog
SB
a5a5a5a59c9c9c9c9c9c9c94949494948c8c8c8c8c8c84848487c6c6c6c6
bdbdbdbdbdb5b5b5b5b5adadadadada5a5a5a5a59c9ae7e7e7e7e7e7e7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6a5a5a59c9c9c9c9c9c9c9494
9494948c948c8c8c8c8484848484c6c6c6bdbdbdbdbdb5b5b5b5b5adadad
adada5a5a5a5a59c9c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
e7e7e7e7e7e7a5a59c9c9c9c9c9c9c9494949494948c8c8f8c8c8c848487
8487c6c6bdbdbdbdbdb5b5b5b5b5adadadada5a8ada5a5a5a59a9c9ae7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d9e7e7e7e7e7d6e7d6a59c9c9c9c9c
9c9c949494948f9494949c94948c84848484847bc6bdbdbdbdb5bdb5b5b5
b5b5a8adadadb5adada5a5a59c9c9c9ce7e7e7e7e7e7e7e7e7e7e7e7d9e7
e7e7e7e7e7e7e7e7e7e7e7e79c9c9c9c9c9c9c8f9cf7f1f1f7f7f7f7f7f7
e684848784877b7bbdbdbdbdbdb5b5a8bdfcf2f2fcfcfcfcfcfceea59c9a
9c9a9c93e7e7e7e7e7e7e7d9e7fff7f7ffffffffffffffe7e7d6e7d6e7da
9c9c9c9c9c948f8ff1f7d6f7f7f7f7f7f7f7c48484847b847b7bbdbdbdbd
b5b5a8a8f2fcd6fcfcfcfcfcfcfcd29c9c9c9c9c939ce7e7e7e7e7e7d9d9
f7ffdefffffffffffffff4e7e7e7e7e7dae79c9c9c9c8f8f87f7f7e6b1f7
f7f7f7f7f7f79c8784877b7b7b7bbdbdbdb5a8a89afcfceeb9fcfcfcfcfc
fcfcb59a9c9a9c939c93e7e7e7e7d9d9d6ffffffd9ffffffffffffffe7d6
e7d6e7dae7da9c9c9c948f72f1c46f4a87f7f7f7f7f7f7f78c84847b877b
7b7bbdbdb5b5a88cf2d281609afcfcfcfcfcfcfca59c9c9c9a949394e7e7
e7e7d9d3f7f4bdadd6ffffffffffffffe7e7e7e7d6e7dae79c9c9c8f6f8f
ce5f4a8fd6f7f7f7f7f7f7f7877b877b7b7b7b73b5b5b5a8819ad673609a
d6fcfcfcfcfcfcfc9a9c9a9c9494948ce7e7e7d9bdc0debdadc0deffffff
ffffffffd6e7d6e7e7e7e7de9c9c8f7b5e8fd28fd6f7f7f7f7f7f7a0f7e6
84847b7b7b7b737bb5b5a893749ae19ad6fcfcfcfcfcfcaefcee9c9c9c94
93948c8ce7e7d9dab1c0fbc0deffffffffffffd6ffffe7e7e7e7dae7dee7
9c948f7e4a8ff7f7f7f7f7f7f7bb5e0af7f77b7b7b7b7b7b7b73b5b5a88b
609afcfcfcfcfcfcfcc67424fcfc939c939494938c8ce7e7d9bcadc0ffff
ffffffffffdcb179ffffdae7dae7e7dae7de94948f6f4a9df7f7f7f7f1a0
5e0a0a0af7f77b7b7b7b737b7373b5b5a88160a7fcfcfcfcf2ae74242424
fcfc949394938c8c8c8ce7e7d9bdadc0fffffffff7d6b1797979ffffe7da
e7dae7e7dede949487634a8ff7f7f1b15e0a0a0a0a0a0a0a0a0a0a0a7b73
7373b5ad9a7b609afcfcf2b9742424242424242424242424948c8c8ce7e7
d6c6adc0fffff7d9b17979797979797979797979e7dedede948c87634a8f
f7c95e0a0a0a0a0a0a0a0a0a0a0a0a0a73737372adad9a7b609afccd7424
2424242424242424242424248c8c8c84e7e7d6bdadc0ffdbb17979797979
7979797979797979e7dedede948c87634a8ff7e6c4a0630a0a0a0a0a0a0a
0a0a0a0a7373736badad9a7b609afceed2ae7b2424242424242424242424
8c8c8484e7e7d6bdadc0fffff4d6bd7979797979797979797979e7ded6d6
948c87634a7ef7e6c4a79c8f5e0a0a0aa3a7635f637372736b6badad9a7b
608bfceed2bcb5a874242424b8bc7b737b8c84848484e7e7d6bdadbcffff
f4e7e7d9b1797979f7e7c6bdcededed6d6d68c8c87634a6ff7f7f7e6c4a7
a7b15e0ac4bb63636b7373736b6badad9a7b6081fcfcfceed2bcbcb97424
d2c67b7b848484848484e7e7d6c6adbdfffffffff4e7e7d9b179f4dcc6c6
d6d6d6d6d6ce8c8f876f4a5ef7f7f7f7f7d2c4a7a7b1f7ed876b736b736b
6b6bada89a816074fcfcfcfcfce1d2bcbcb9fcf89a8484848484847be7d9
d6bdadb1fffffffffffbf4e7e7d9ffffd6d6d6d6d6d6cece8c8c876b4a4a
f7f7f7f7f7f7e6c4a7bbf7f7a7726b726b6b6b6ba5a59a84605afcfcfcfc
fcfceed2bcc6fcfcbc8c848c84847b7be7e7d6cead96fffffffffffffff4
e7dcffffe7d3d6d3d6cecece8c8f876b4a37f1f7f7f7f7f7f7f7e6e6f7f7
e6736b6b6b6b6b63a5a89a84604ff2fcfcfcfcfcfcfceeeefcfcee848484
847b7b7be7d9d6cead9ff7ffffffffffffffffffffffffd6d6d6cececec6
8c8484724a378fdef7f7f7f7f7f7f7f7f7f7f7876b6b6b6b6363a5a59c8c
604f9adefcfcfcfcfcfcfcfcfcfcfc9a8484847b7b7be7e7e7d3ad9fc0de
ffffffffffffffffffffffd6d6cececec6c68487847250374a374a4a5e6f
7e7e7e7e83878f736b6b6b63635ea59a9c8c684f5a4f5a6074818b8b8b8b
959aa88c847b7b7b7b73e7d6e7d3b89f969f96adb1bdbcbcbcbcc2d6d9de
cececec6c6c68484877b635e4a4a374a4a373737374a4a636b6b6b6b6363
5e63a5a59a937b7460604f605a4f4f4f4f60607b7b84847b7b7b737be7e7
d6dac6b1adad9fad969f9f9f9fadadc6cecececec6c6c6bd8484847b7b6b
6b63635f505f5e505e505f636b6b636363635f5f9c9c9c939384847b7b73
687374687468737b847b7b7b7b7b7373e7e7e7dadad6cec6c6bdb8bdb1b8
b1b8bdc6cececec6c6c6bdbd8487847b7b7b7b73726b6b6b6b6b636b636b
6b6b6363635f5f5f9c9a9c939c93938c8c84848484847b847b7b7b7b7b7b
7b737373e7d6e7dae7dadaded3d6d6d6d6cececececececec6c6c6bdbdbd
84847b7b7b7b7b7373737373736b736b6b6b6b6363635f5f5f5e9c9c939c
9394938c8c8c8c8c84848484847b7b7b7b7b73737374e7e7dae7dae7dade
dedededed6d6d6cecececec6c6bdbdbdbdb1
a5a5a5a59c9c9c9c9c9c9c94949494948c8c8c8c8c8c84848487c6c6c6c6
bdbdbdbdbdb5b5b5b5b5adadadadada5a5a5a5a59c9ae7e7e7e7e7e7e7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6a5a5a59c9c9c9c9c9c9c9494
9494948c948c8c8c8c8484848484c6c6c6bdbdbdbdbdb5b5b5b5b5adadad
adada5a5a5a5a59c9c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
e7e7e7e7e7e7a5a59c9c9c9c9c9c9c9494949494948c8c8c8c8c8c848487
8487c6c6bdbdbdbdbdbdb5b5b5b5adadadadada5a5a5a5a5a59a9c9ae7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6e7d6a59c9c9c9c9c
9ca79ca79c94948f94948f8c8c8c84848484847bc6bdbdbdbdb5bdbcbdbc
b5b5ada8adada8a5a5a5a5a59c9c9c9ce7e7e7e7e7e7e7e7e7e7e7e7e7d9
e7e7d9e7e7e7e7e7e7e7e7e79c9c9c9c9c9c9ce6f7f7f7f7f7f7f1f1f78f
8784848784877b7bbdbdbdbdbdb5b5eefcfcfcfcfcfcf2f2fca89aa59c9a
9c9a9c93e7e7e7e7e7e7e7fffffffffffffff7f7ffd9d6e7e7d6e7d6e7da
9c9c9c9c9c9c94c4f7f7f7f7f7f7f7d6f7ed877b877b7b847b7bbdbdbdbd
b5b5b5d2fcfcfcfcfcfcfcd6fcf89a939a9c9c9c939ce7e7e7e7e7e7e7f4
ffffffffffffffdeffffd6dad6e7e7e7dae79c9c9c9c9c9494a5f7f7f7f7
f7f7f7bbe6f7f1727b7b7b7b7b7bbdbdbdb5b5b5b5c6fcfcfcfcfcfcfcc6
eefcf28c93939c939c93e7e7e7e7e7e7e7e7ffffffffffffffdcfffff7d3
dadae7dae7da9c9c9c9c9494949cf7f7f7f7f7f7f7875e7ec4f16b72877b
7b7bbdbdb5b5b5b5b5b5fcfcfcfcfcfcfc9a748bd2f2848c9a949394e7e7
e7e7e7e7e7e7ffffffffffffffd6b1bcf4f7ced3d6e7dae79c9c9c949494
948cf7f7f7f7f7f7f7d6a0504ad68763737b7b73b5b5b5b5b5b5adadfcfc
fcfcfcfcfcd6ae6860d69a7b8c94948ce7e7e7e7e7e7e7e7ffffffffffff
ffded6b8added6c6dee7e7de9c9c94949494948cf1f7a0f7f7f7f7f7f7e6
bbd283506b73737bb5b5b5b5b5adadadf2fcaefcfcfcfcfcfceec6e19568
848c8c8ce7e7e7e7e7e7e7e7f7ffd6ffffffffffffffdcfbc2b8cededee7
9c9494949494948cf7f70a5ebbf7f7f7f7f7f7f78f4a63737373b5b5b5b5
adadadadfcfc2474c6fcfcfcfcfcfcfc9a607b8c8c8ce7e7e7e7e7e7e7e7
ffff79b1dcffffffffffffffc0adc6dedede94949494948c8c8cf7f70a0a
0a5ea0f1f7f7f7f79d4a5e727373b5b5b5adadadadadfcfc24242474aef2
fcfcfcfca760738c8c8ce7e7e7e7e7e7e7e7ffff797979b1d6f7ffffffff
c0adc6d3dede949494940a0a0a0a0a0a0a0a0a0a0a5eb1f1f7f78f375f6b
7373b5b5adad242424242424242424242474b9f2fcfc9a4f73848c8ce7e7
e7e77979797979797979797979b1d9f7ffffc09fbdd6dede9494948c0a0a
0a0a0a0a0a0a0a0a0a0a0a5ec9f78f4a5f6b7372adadadad242424242424
2424242424242474cdfc9a6073848c84e7e7e7e779797979797979797979
797979b1dbffc0adbdd6dede94948c8c0a0a0a0a0a0a0a0a0a0a0a63a0b1
e6f78f375f6b6b6badadadad24242424242424242424247baec8eefc9a4f
73848484e7e7e7e77979797979797979797979bdd6f9ffffc09fbdd6d6d6
948c948c8c7b5f63a79c0a0a0a5e8f9ca7c4e6f77e375f6b6b6badadada5
a593737bbcb524242474a8b5bcd2eefc8b4f73848484e7e7e7e7e7dabdc6
e7e7797979b1d9e7e7f4ffffbc9fbdced6d68c948c8f847b6f63c4c40a5e
a7a7a7c4e6f7f7f76f375f6b6b6badadada8a593817bd2d22474bcbcbcd2
eefcfcfc814f737b8484e7e7e7d9e7dabdc6f4f479b1e7e7e7f4ffffffff
bd9fbdced6ce8c8c8c8c87847287f1f7b1a7a7c4d2f7f7f7f7f75e4a5e63
6b6badada5a59a9c8c9af2fcb9bcbcd2e1fcfcfcfcfc745a737b847be7e7
e7e7d6e7d3d6f7ffd9e7e7f4fbffffffffffb196c6cecece8c8c8c848487
84c4f7f7a7b1c4e6f7f7f7f7f7f74a4a5f636b6ba5a5a5a5a59a9cd2fcfc
bcc8d2eefcfcfcfcfcfc5a60737b7b7be7e7e7e7e7d6e7f4ffffe7f9f4ff
ffffffffffff96adbdcecece8c8c8c84848487e6f7f7e6f1f7f7f7f7f7f7
f7f137375f636b63a5a5a5a5a59c9aeefcfceef2fcfcfcfcfcfcfcf24f4f
737b7b7be7e7e7e7e7e7d6fffffffff7fffffffffffffff79f9fbdcecec6
8c8c8484878494f7f7f7f7f7f7f7f7f7f7f7de8f374a5f636363a5a5a5a5
9a9cadfcfcfcfcfcfcfcfcfcfcfcde9a4f60737b7b7be7e7e7e7d6e7e7ff
ffffffffffffffffffffdec09fadbdc6c6c68484848484878c9c8f837e7e
7e7e6f5e4a4a3737374a5e63635fa5a5a59c9c9aa5b5a8958b8b8b8b8174
605a4f4f4f60737b7b73e7e7e7e7e7d6e7e7d9c2bcbcbcbcbdb1ad969f9f
9fadc6c6c6bd84848487847b7b7b6b504a373737374a374a374a4a506363
5f63a59c9c9a9c9c939384685a4f4f4f4f5a4f604f6060687b7b737be7e7
e7d6e7e7dadaceb8969f9f9f9f969fad9fadadb8c6c6bdbd84848484847b
7b7b6b635e5f5f5050505e505f5f5f5e63635f5f9c9c9c9c9c939493847b
7373736868687468737373737b7b7373e7e7e7e7e7dae7dad6cec6bdbdb8
b8b8b1b8bdbdbdc6bdbdbdbd8487847b7b7b7b7b7372736b6b6b6b636363
63636363635f5f5f9c9a9c939c9493948c8c8484847b7b7b7b7b7b7b7b7b
7b737373e7d6e7dae7e7dae7ded3d6d6d6cececececec6c6c6c6bdbdbdbd
84847b7b7b7b7b7b73737373736b6b6b6b6b6b6363635f5f5f5e9c9c939c
939494938c8c8c8c848484847b7b7b7b7b7b73737374e7e7dae7dae7e7da
e7dededed6d6d6cecececec6c6bdbdbdbdb1
a5a5a5a59c9c9c9c9c9c9c94949494948c8c8c8c8c8c84848487c6c6c6c6
bdbdbdbdbdb5b5b5b5b5adadadadada5a5a5a5a59c9ae7e7e7e7e7e7e7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6a5a5a59c9c9c9c9c9c9c9494
9494948c948c8c8c8f8487848484c6c6c6bdbdbdbdbdb5b5b5b5b5adadad
adada5a5a8a59a9c9c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
d9e7d6e7e7e7a5a59c9c9c9c9c9c9c9494949494948c8c8c8f848784847b
8784c6c6bdbdbdbdbdb5b5b5b5b5adadadadada5a8a59a9c9c939a9ce7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d9e7d6e7e7dad6e7a59c9c9c9c9c
f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7727b7bc6bdbdbdbdb5fcfcfcfc
fcfcfcfcfcfcfcfcfcfcfcfcfc8c939ce7e7e7e7e7e7ffffffffffffffff
ffffffffffffffffffd3dae79c9c9c9c9cf7f7f7d2d2d2d2edf7f7f7f7ed
d2d2e6f70a5e727bbdbdbdbdbdfcfcfce1e1e1e1f8fcfcfcfcf8e1e1eefc
24738c93e7e7e7e7e7fffffffbfbfbfbfffffffffffffbfbffff79c6d3da
9c9c9c9cf7f7f7c4c4c4c4f7f7f7f7f7f7f7edd2f7204a5e6b7bbdbdbdbd
fcfcfcd2d2d2d2fcfcfcfcfcfcfcf8e1fc3460738493e7e7e7e7fffffff4
f4f4f4fffffffffffffffffbff7fadc6d6da9c9c9cf7f7f7c4d2e6d2eded
e6f7f7f7f7f7f7f70a4a4a5e737bbdbdbdfcfcfcd2e1eee1f8f8eefcfcfc
fcfcfcfc246060738c94e7e7e7fffffff4fbfffbffffffffffffffffffff
79adadc6dee79c9c9c4ae69494636b6b63638c8cb1b17b847b6be64a506b
737bbdbdb560eeb5b57b84847b7badadc8c89ca59c84ee6068848c93e7e7
e7adffe7e7cececececee7e7f9f9e7e7e7d6ffadb8d6deda9c9c9c944ad2
946b6b6363637bb1b1c47ba3b18463d250847373b5b5b5b560e1b584847b
7b7b9cc8c8d294b8c8a57be1689c8c8ce7e7e7e7adfbe7cecec6c6cee7f9
f9f4e7f7f9e7cefbb8efdee79c9c9494944ad28c7b726b638484b1b1a384
84847b4ae65e8473b5b5b5b5b560e1ad938c847b9c9cc8c8b89c9c9c9c60
ee739c8ce7e7e7e7e7adfbe7dad3cecee7eff9f9f7efefefe7adffc6efde
9c9494948cf7f7c4b1d2c4d2f7f7f7f7e6ede6e6d2f74a506373b5b5b5b5
adfcfcd2c8e1d2e1fcfcfcfceef8eeeee1fc60687b8ce7e7e7e7e7fffff4
f9fbf4fbfffffffffffffffffbffadb8cee794949494f7f7d2c4c4d2c4e6
f7f7f7edd2e6f7f7f70a4a506b73b5b5b5adfcfce1d2d2e1d2eefcfcfcf8
e1eefcfcfc246068848ce7e7e7e7fffffbf4f4fbf4fffffffffffbffffff
ff79adb8d6de949494f7f7d2d2c4d2d2c4edf7f7f7f7f7f7f7f7204a4a5e
6b72b5b5adfcfce1e1d2e1e1d2f8fcfcfcfcfcfcfcfc346060738484e7e7
e7fffffbfbf4fbfbf4ffffffffffffffffff7fadadc6d6de9494944ae68c
6b6b6b6363636b727b847b727363d24a50636b72adadad60eea58484847b
7b7b848c939c948c8c7be160687b8484e7e7e7adffe7cececececececed3
dae7e7d3decefbadb8ced6de94948c8c4ad287637b846b63636b84847b73
736b5ee64a5e636badadadad60e19a7b949c847b7b84a59c9c948c8473ee
60737b84e7e7e7e7adfbd6cee7efd6c6c6d6e7efe7e7e7d6c6ffadc6ced6
948c948c8c4ae672848e6363636b7b84847b6b6b5037d2205e63adadadad
a560ee8ca5a87b7b7b849c9ca59c8484684fe134737be7e7e7e7e7adffd3
e7f6cec6c6d6e7e7e7e7d6d6b89ffb7fc6ce8c948c8c8cf7f7d2d2d2d2d2
d2f7f7f7f7e6d2edf7f7204a5063adadada5a5fcfce1e1e1e1e1e1fcfcfc
fceee1f8fcfc3460687be7e7e7e7e7fffffbfbfbfbfbfbfffffffffffbff
ffff7fadb8ce8c8c8c8cf7f7ede6e6d2d2d2e6d2edf7f7d2e6f7f70a3750
5e63adada5a5fcfcf8eeeee1e1e1eee1f8fcfce1eefcfc244f68737be7e7
e7e7fffffffffffbfbfbfffbfffffffbffffff799fb8c6ce8c8c8cf7f7f7
f7f7f7f7e6e6d2d2f7f7f7f7f7f7203750506363a5a5a5fcfcfcfcfcfcfc
eeeee1e1fcfcfcfcfcfc344f68687b7be7e7e7fffffffffffffffffffbfb
ffffffffffff7f9fb8b8cec68c8c8c4ae684b1b1b17b7b63636b638e8e8e
8e7be64a4a5e6363a5a5a560ee9cc8c8c894937b7b847ba8a8a8a89cee60
60737b7be7e7e7adffe7f9f9f9e7daceced6cef6f6f6f6e7ffadadc6c6c6
8c8c84844ad2b1a3b1b173636b8e5e8e8e8e8e847be64a505e63a5a5a5a5
60e1c8b8c8c88c7b84a873a8a8a8a89c9cee6068737be7e7e7e7adfbf9f7
f9f9deced6f6c6f6f6f6f6efe7ffadb8c6c6848484847b4ad2b1a3a37b73
5e5e63636b8e8e8e8463e64a505fa5a5a59c9c60e1c8b8b89c8c73737b7b
84a8a8a89c7bee606873e7e7e7e7e7adfbf9f7f7e7dec6c6c6c6d6f6f6f6
efceffadb8bd848484877b734ad2e6e6e6e6e6e6e6e6e6e6e6e6e6e6d2e6
0a50a59c9c9a938c60e1eeeeeeeeeeeeeeeeeeeeeeeeeeeee1ee2468e7e7
e7d6dadeadfbfffffffffffffffffffffffffffffbff79b88484877b8473
634a4a0a240a0a240a0a240a0a240a0a240a244a9c9c9a9c9c8c7b606024
3a24243a24243a24243a24243a243a60e7e7d6e7e7deceadad798e79798e
79798e79798e79798e798ead848484847b7b735e50504a504a4a504a4a4a
4a374a4a4a4a4a4a9c9c9c9c93948c7368686068606068606060604f6060
60606060e7e7e7e7dae7dec6b8b8adb8adadb8adadadad9fadadadadadad
87847b7b7b7b7b736363635e5e5e5e5e5e505050505050504a509a9c939c
9493938c7b7b7b737373737373686868686868686068d6e7dae7e7dadade
cececec6c6c6c6c6c6b8b8b8b8b8b8b8adb8
a5a5a5a59c9c9c9c9c9c9c94949494948c8c8c8c8c8c84848487c6c6c6c6
bdbdbdbdbdb5b5b5b5b5adadadadada5a5a5a5a59c9ae7e7e7e7e7e7e7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6a5a5a59c9c9c9c9c9c9c9494
9494948c948c8c8c8c8484848484c6c6c6bdbdbdbdbdb5b5b5b5b5adadad
adada5a5a5a5a59c9c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
e7e7e7e7e7e7a5a59c9c9c9c9c9c9c9494949494948c8c8c8c8c8c848487
8487c6c6bdbdbdbdbdb5b5b5b5b5adadadadada5a5a5a5a5a59a9c9ae7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6e7d6a59c9c9c9c9c
9c9c9494949494948c8c8c8c8c8484848484847bc6bdbdbdbdb5b5b5b5b5
b5adadadadada5a5a5a5a5a59c9c9c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7
e7e7e7e7e7e7e7e7e7e7e7e79c9c9c9c8f83634a373720202424374a5e6b
8784848784877b7bbdbdbdbda8957b604f4f34343a3a4f6074849aa5a59a
9c9a9c93e7e7e7e7d9c2bdad9f9f7f7f8e8e9fadb1ced6e7e7d6e7d6e7da
9c9ca06f4a375e72a3d2f1edf1e6b1845f373763877b847b7b7bbdbdae81
604f748cb8e1f2f8f2eec89c734f4f7b9a9c9c9c939ce7e7d6bdad9fb1d3
f7fbf7fff7fff9e7bd9f9fbdd6e7e7e7dae79c9c635094c4d2e6f1f7f7f7
f7f7edf1e6d28e4a5e9ca7947b7bbdbd7b68add2e1eef2fcfcfcfcfcf8f2
eee1a86073b5bcad9493e7e7bdb8e7f4fbfff7fffffffffffff7fffbf6ad
c6e7e7e7e7da9c9c24cef1e6b184370a00001524507284b1d2f1a3f7f7f7
8c7bbdbd3ad6f2eec89c4f2400001c3a688ca5c8e1f2b8fcfcfca594e7e7
8edef7fff9e79f793b3b588eb8d3e7f9fbf7f7ffffffe7e79c9c5e84f74a
000000001500150000001537e6f18e37378ebb7bb5bd749cfc6000000000
1c001c0000001c4feef2a84f4fa8c68ce7e7b1e7ffad3b3b3b3b583b583b
3b3b589ffff7f69f9ff6dce79c9c8f37d2ed8e50240a1515150a204a6bb1
e6c4374a5063d27bb5b5a84fe1f8a8683a241c1c1c24346084c8eed24f60
687be18ce7e7d99ffbfff6b88e79585858797fadd6f9fff49fadb8cefbe7
9c94946f63f7f7f7f7f7f1e6f7f7f7f7e6c4c44a6b7b7bd2bb73b5b5b581
7bfcfcfcfcfcf2eefcfcfcfceed2d260849493e1c68ce7e7e7bdbdffffff
fffff7fffffffffffff4f4adcee7dafbdce79494948f50d2f7f7f7f7f7f7
f7f7d2c4b1b1b1248c94b1f78c73b5b5b5a868e1fcfcfcfcfcfcfcfce1d2
c8c8c83aa5adc8fca58ce7e7e7d9b8fbfffffffffffffffffbf4f9f9f98e
e7e7f9ffe7de9494948c6f72f7f7f7f7f7f7f7f7e6c4b1d2c4a3f7c4bb7b
7373b5b5adad818cfcfcfcfcfcfcfcfceed2c8e1d2b8fcd2c68c8c8ce7e7
e7e7bdd3fffffffffffffffffff4f9fbf4f7fff4dce7dede9494948c8f5f
d2f7f7f7f7f7f7f7e6c4c4d2a38e5e50506b7372adadadada873e1fcfcfc
fcfcfcfceed2d2e1b8a8736868848c84e7e7e7e7d9bdfbffffffffffffff
fff4f4fbf7f6c6b8b8d6dede94948c948c6b73f7f7f7f7f7f7f7e6d2e67b
4a6b506b7372726badadadadad848cfcfcfcfcfcfcfceee1ee9460846884
8c848c84e7e7e7e7e7cedefffffffffffffffffbffe7add6b8d6deded3d6
9494a7c4e6e663d2f7f7f7f7f7f7f7f7d250c4c4b18c73736b6badb5bcd2
eeee7be1fcfcfcfcfcfcfcfce168d2d2c8a58c8c8484e7e7e7f4ffffbdfb
fffffffffffffffffbb8f4f4f9e7deded6d68cc4e6f7f7e66b63a3d2f7f7
f7f7d2a36b4af7e6f7e6c4726b6badd2eefcfcee7b7bb8e1fcfcfcfce1b8
8460fceefceed28c8484e7f4ffffffffcec6f7fbfffffffffbf7d6adffff
fffff4d3d6ce8cd2f7f7f7f1e6a37b5f372424375073a3e6f7f7f7f1c487
6b6bade1fcfcfcf2eeb894734f3a3a4f688cb8eefcfcfcf2d29a847be7fb
fffffff7fff7e7bd9f8e8e9fb8def7fffffffff7f4d6cece8f63c4f1f7f7
f7f7f7f7f7f7f7f7f7ede6d2d2f1e6c4b1506b6ba87bd2f2fcfcfcfcfcfc
fcfcfcfcfcf8eee1e1f2eed2b9687b7bd9bdf4f7ffffffffffffffffffff
fffffffbfbf7fff4d9b8cece8c5f4a73c4e6f7f7f7f7f7f7f7f7d2d2e6e6
e6c4a75e374a6b63a573608cd2eefcfcfcfcfcfcfcfce1e1eeeeeed2bc73
4f607b7be7bdaddef4fffffffffffffffffffbfbfffffff4e7c69fadcec6
8c8c6f4a3737637ba3c4e6e6e6d2d2b18c634a372437506b6363a5a58160
4f4f7b94b8d2eeeeeee1e1c8a57b604f3a4f687b7b7be7e7bdad9f9fc6e7
f7f4fffffffbfbf9e7cead9f8e9fb8cec6c6848484847b6f504a37242424
2024242437374a506b6b6b63635ea5a5a59c938168604f3a3a3a343a3a3a
4f4f60687b847b7b7b73e7e7e7e7dabdb8ad9f8e8e8e7f8e8e8e9f9fadb8
cececec6c6c684848487847b847b7b7b7b737b73737373736b6b6b6b6363
5e63a59c9c9a9c9c9c949494938c8c8c8c8c84848484847b7b7b737be7e7
e7d6e7e7e7e7e7e7dae7e7dededed6d6d6d6cecec6c6c6bd84848484847b
7b7b7b7b7373737373736b6b6b6b636363635f5f9c9c9c9c9c9394939493
8c8c8c8c8c848484847b7b7b7b7b7373e7e7e7e7e7dae7dae7dae7dedede
ded6d6d6cecec6c6c6c6bdbd8487847b7b7b7b7b7b7373737373736b6b6b
6b6b6363635f5f5f9c9a9c939c949394938c8c8c8c8c848484847b7b7b7b
7b737373e7d6e7dae7e7dae7dae7dedededed6d6d6cececec6c6c6bdbdbd
84847b7b7b7b7b7b7373737373736b6b6b6b6b6363635f5f5f5e9c9c939c
939494938c8c8c8c8c848484847b7b7b7b7b73737374e7e7dae7dae7e7da
e7dedededed6d6d6cececec6c6bdbdbdbdb1
a5a5a59c9c9c9c9c94949494948c8c8c8c848484c6c6c6bdbdbdbdb5b5b5
b5adadadada5a5a59c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
a5a79c9c9c9c9c94949494948c8c8c8c84848784c6bcbdbdbdbdb5b5b5b5
adadadada5a5a5a59a9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6e7
a59c9c9c9c9c94949494948c8c8c8c8c84848487c6bdbdbdbdb5b5b5b5ad
adadada5a5a5a59c9c9ae7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6
9c9c9c835e4a3737373737374a5e7b848784847bbdbdbd95745a4f4f4f4f
4f4f5a7493a59a9c9c9ce7e7e7c2b1969f9f9f9f9f9f96b1dae7d6e7e7e7
9c8f5e4a848ed2f1f7f1f1e6a37b375f84847b7bbda87460a5a8e1f2fcf2
f2eeb8934f739c9c9394e7d9b1ade7f6fbf7fff7f7fff7da9fbde7e7dae7
9c8372d2e6d287372024508cb1c4c4a3e6e69c7bbd958ce1eee19a4f343a
68a5c8d2d2b8eeeeb593e7c2d3fbfffbd69f7f8eb8e7f9f4f4f7ffffe7da
9c9c5ef14a00000000000000006fedb1244ac47bb5bd74f2600000000000
00000081f8c83a60d28ce7e7b1f7ad3b0000000000003bbdfff98eadf4e7
9c946fa3f78c4a37242437508cd2d2374a72d273b5b581b8fca5604f3a3a
4f68a5e1e14f608ce18ce7e7bdf7ffe7ad9f8e8e9fb8e7fbfb9fadd3fbde
94949437f7f7f7f7f7f7f7f7e6d250727bc4bb73b5b5b54ffcfcfcfcfcfc
fcfceee1688c94d2c68ce7e7e79ffffffffffffffffffffbb8d3e7f4dce7
9494945e8ef7f7f7f7f7f7d2b1d28ee6c4a36b73b5adad74a8fcfcfcfcfc
fce1c8e1a8eed2b8848ce7e7e7b1f6fffffffffffffbf9fbf6fff4f7d6de
949494945ff7f7f7f7f7f7e6d2b17b5037507373adadadad73fcfcfcfcfc
fceee1c894684f688c8ce7e7e7e7bdfffffffffffffffbf9e7b89fb8dede
948c9ca57ba3f7f7f7f7f7f7e6636b7b7b73726badadb5c693b8fcfcfcfc
fcfcee7b7b938c8c8484e7e7e7e7daf7ffffffffffffffc6cedae7deded6
8cc4d2f7e650b1f7f7f7f7e68463f1e6c48f6b6badd2e1fcee68c8fcfcfc
fcee9c7bf2eed2a88484e7f4fbffffb8f9ffffffffffe7cef7fff4d9d6d6
8cd2f7f7f7c4845037374a6b8eedf7f7f1a7736bade1fcfcfcd29c684f4f
6084a8f8fcfcf2bc847be7fbfffffff4e7b89f9fadcef6fffffff7e7d6ce
8c5fc4f1f7f7f7f7f7f7f7f7f7f7f1d2a7635f6ba573d2f2fcfcfcfcfcfc
fcfcfcfcf2e1bc7b737be7bdf4f7fffffffffffffffffffff7fbe7c6bdce
8c63376384b1e6e6f1ede6e6b18e7363244a6363a57b4f7b9cc8eeeef2f8
eeeec8a88c7b3a5a7b7be7bd9fc6e7f9fffff7fffffff9f6dece8e96cec6
84847b634a373737373737373724374a5e6b6363a5a5937b604f4f4f4f4f
4f4f4f3a4f60737b7b7be7e7dac6ad9f9f9f9f9f9f9f9f8e9fadc6cec6c6
848484877b847b7b7373737373726b6b6b635e5fa59c9c9a9c9c93948c8c
8c8c848c84847b7b7373e7e7e7d6e7e7dae7dedededed6d3d6cecec6c6bd
8487847b7b7b7b737b7373736b6b6b6363635f5f9c9a9c9c9493948c8c8c
8c8484847b7b7b7b7373e7d6e7e7e7dae7dee7deded6d6d6cec6c6c6bdbd
84847b7b7b7b7b7b7373736b6b6b6363635f5f5e9c9c9c939494938c8c8c
8484847b7b7b7b737374e7e7e7dae7e7dae7deded6d6cececec6c6bdbdb1

a5a5a59c9c9c9c9c94949494948c8c8c8c848484c6c6c6bdbdbdbdb5b5b5
b5adadadada5a5a59c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
a5a79c9c9c9c9c948f8f8c8f7b878f8c84848784c6bcbdbdbdbdb5b5a8a8
ada8939aa8a5a5a59a9ce7e7e7e7e7e7e7e7d9d9e7d9dad6d9e7e7e7d6e7
a59c9c9c9c9c94f7f7f7f7f75e637b8784848487c6bdbdbdbdb5b5fcfcfc
fcfc747b939aa59c9c9ae7e7e7e7e7e7e7ffffffffffb1bddad6e7e7e7d6
9c9c9c9c9c9c94f7f7f7f7f73737728484877b7bbdbdbdbdb5b5b5fcfcfc
fcfc4f4f8ca59c9a9c9ce7e7e7e7e7e7e7ffffffffff9f9fd3e7e7d6e7e7
9c9c9c9c9c9494f7f7f7f7f724247287847b7b7bbdbdbdb5b5b5b5fcfcfc
fcfc3a3a8c9a9c9c9493e7e7e7e7e7e7e7ffffffffff8e8ed3d6e7e7e7da
9c9c9c9c949494f7f7f7f7f724246b877b7b7b7bbdbdb5b5b5b5adfcfcfc
fcfc3a3a849a9c939494e7e7e7e7e7e7e7ffffffffff8e8eced6e7dae7e7
9c9c9c94949494f7f7f7f7f70a2073877b7b7b7bb5b5b5b5adadadfcfcfc
fcfc2434849a9c939394e7e7e7e7e7e7e7ffffffffff797fd6d6e7dadae7
9c94f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7736b73b5b5fcfcfcfcfcfcfcfc
fcfcfcfcfcfcfc84848ce7e7ffffffffffffffffffffffffffffffd6d6de
9494f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7245e73b5b5fcfcfcfcfcfcfcfc
fcfcfcfcfcfcfc3a738ce7e7ffffffffffffffffffffffffffffff8ec6de
9494f7f7f7f7f7f7f7f7f7f7f7f7f7f7f70a4a73b5adfcfcfcfcfcfcfcfc
fcfcfcfcfcfcfc24608ce7e7ffffffffffffffffffffffffffffff79adde
9494f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7154a72adadfcfcfcfcfcfcfcfc
fcfcfcfcfcfcfc1c6084e7e7ffffffffffffffffffffffffffffff58adde
948cf7f7f7f7f7f7f7f7f7f7f7f7f7f7f7154a6badadfcfcfcfcfcfcfcfc
fcfcfcfcfcfcfc1c6084e7e7ffffffffffffffffffffffffffffff58add6
8c8c8763372424f7f7f7f7f720152424240a506badad9a7b4f3a3afcfcfc
fcfc341c3a3a3a246884e7e7d6bd9f8e8effffffffff7f588e8e8e79b8d6
8c8c8c7b727272f7f7f7f7f724244a5e5e4a6b6bada5a5938c8c8cfcfcfc
fcfc3a3a607373607b7be7e7e7dad3d3d3ffffffffff8e8eadc6c6adcece
8c8c8487848784f7f7f7f7f724245e6b6b6b6b6ba5a5a59a9c9a9cfcfcfc
fcfc3a3a7384847b7b84e7e7e7d6e7d6e7ffffffffff8e8ec6d6d6cecece
8c8c8484877b84f7f7f7f7f724245e6b6b6b6363a5a5a59c9a9c9cfcfcfc
fcfc3a3a738484847b7be7e7e7e7d6e7e7ffffffffff8e8ec6d6cececec6
84848484847b7bf7f7f7f7f724245f6b6b636363a5a59c9c9c9c93fcfcfc
fcfc3a3a73847b7b7b7be7e7e7e7e7e7daffffffffff8e8ebdcececec6c6
848487847b7b7b6b6b5e503724375f6b63635e5fa59c9a9c939494847b73
684f3a4f737b7b7b7373e7e7d6e7dae7e7d6cec6b89f8e9fbdcecec6c6bd
8484847b7b7b7b737363504a4a50636363635f5f9c9c9c939c93948c8c7b
685a60687b7b7b7b7373e7e7e7dae7dae7dedeceb896adb8c6c6c6c6bdbd
87847b7b7b7b7b7b7373736b6b6b6363635f5f5e9a9c939c9394938c8c8c
8484847b7b7b7b737374d6e7dae7dae7dae7deded6d6d6cecec6c6bdbdb1

a5a5a59c9c9c9c9c94949494948c8c8c8c848484c6c6c6bdbdbdbdb5b5b5
b5adadadada5a5a59c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
a5a79c9c9c9c9c949494848f8c8c8c8c84848784c6bcbdbdbdbdb5b5b5b5
9ca8adada5a5a5a59a9ce7e7e7e7e7e7e7e7e7e7e7d9e7e7e7e7e7e7d6e7
a59c9c9c9c9c949494c44a6f8f8c8c8c84848487c6bdbdbdbdb5b5b5b5d2
6081a8a5a5a5a59c9c9ae7e7e7e7e7e7e7e7e7f4adbdd9e7e7e7e7e7e7d6
9c9c9c9c9c9c9c9c9cd26b637b8c8c848484847bbdbdbdbdbdbdb5b5b5e1
7b639ca5a5a59c9c9c9ce7e7e7e7e7e7e7e7e7fbce63e7e7e7e7e7e7e7e7
9c9c9cf7f7f7f7f7f7f7f7f7f7f7f7f7f7c47b7bbdbdbdfcfcfcfcfcfcfc
fcfcfcfcfcfcfcd29394e7e7e7fffffffffffffffffffffffffffff4dae7
9c9c9c7b5e376320630a00312063376b4a7b7b7bbdbdb593744f63346324
003134634f8460949493e7e7e7dab19f637f637900317f639fceade7e7da
9c9ca7c4c48c8c8f8cd2004a877b8494c4847b7bb5b5bcd2d2adada8ade1
005a9a9c9cadd29c9394e7e7e7f4f4e7e7d9e7fb3b96d6e7e7e7f4e7dae7
9c94a7c4c4a78c8c8ce637637b8784a7a79c7b73b5b5bcd2d2bcadada5ee
4f639c9a9cbcbcb58c8ce7e7e7f4f4e7e7e7e7ff9f63e7d6e7e7e7e7e7de
949cc49ca7c48c8c8ce637208f7b8ca794a77b73b5b5d2bdbcd2a5a5a5ee
4f34a89ca5bcadbc948ce7e7f4e7e7f4e7e7e7ff9f7fd9e7e7e7e7e7e7de
94a7c4949cc4948c87d24a63737ba7a77ba78c73b5bcd2adb5d2ada59ae1
60639494bcbc94bca58ce7e7f4e7e7f4e7e7d6fbad63e7e7e7e7e7e7e7de
94c4c48c8cc4a78484e64a208784bb947ba7a772add2d2ada5d2bca59cee
60349a9cc6ad8cbcbc84e7f4f4e7e7f4e7e7e7ffad7fd6e7dce7e7e7e7de
8cd29c8c8ca7c48c87d25063738cc47b737bc46bade1b5a5a5bcd2a59ae1
686394a5d2948c94d284e7fbe7e7e7e7f4e7d6fbb863e7e7f4e7dee7f4d6
8cf7f1e6d2b173877be637377b9cf7e6d2d2a37badfcf2eee1c88c9a9cee
4f4f94b5fceee1e1b893e7fff7fffbf9ded6e7ff9f9fe7e7fffffbfbf7da
8c8e0a0000004a877bd24a4a73737b0000003163ada8240000005a9a9ce1
60608c8c93000000317be7f6793b000096d6e7fbadaddededa3b000031ce
8c8c7b374a737b7b7bc44a377373735e244a5e63a5a5934f5a779c9c93d2
604f8c8c8c733a60737be7e7da9f9697e7e7daf4ad9fdededec68eadc6ce
8c8c84877b7b7b7b7bd2632073737273736b6363a5a5a59a939c939494e1
7b348c8c8c8484847b7be7e7e7d6dae7dae7e7fbce7fdeded3d6d6cecec6
84848484847b7b84b1f7e63737506b6b6b636363a5a59c9c9c939c9cc8fc
ee4f4f6884847b7b7b7be7e7e7e7e7dae7e7f9ffff9f9fb8d6d6cecec6c6
848487847b73b1f7f7f7d2a38e0a205f6b635e5fa59c9a9c938cc8fcfcfc
e1b8a82434737b7b7373e7e7d6e7dadef9fffffffbf7f6797fbdcec6c6bd
8484847b7b240000000000000000003163635f5f9c9c9c939c3a00000000
0000000000317b7b7373e7e7e7dae78e3b3b0000000000000031cec6bdbd
87847b7b7b7b7b737373736b6b6b6363635f5f5e9a9c939c9393948c8c8c
8484847b7b7b7b737374d6e7dae7dadae7dededed6d6cececec6c6bdbdb1

ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffffffff5d6ebffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffdf7fbfffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffebaed6ffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffbf007f
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fff5d6ebffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffdf7fbfffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffebd6c2c2d2f5ffff
ffffd6e1fadbc7c2dbfafffffff5d6ebffffffffffffffffbf7f404070df
ffffffff7f9fef8f50408fefffffffdf7fbfffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffd2aeae
c2c2aeb3e6ffffffaebdbdb3c2bdaebdf0ffffebaed6ffffffffffffff70
000040400010afffffff0030301040300030cfffffbf007fffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff0aebdfafffff0b3b8ffffffaeaebdfaffffe1aec2ffffebaed6ffff
ffffffffcf0030efffffcf1020ffffff000030efffff9f0040ffffbf007f
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffebc2e6ffffffffc2aeffffffaeaef5ffffffffccaef0
ffebaed6ffffffffffffbf40afffffffff4000ffffff0000dfffffffff60
00cfffbf007fffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffffffffae6b3aeffffffaeb8ffff
ffffffe1aee6ffebaed6ffffffffffffffffffffffefaf1000ffffff0020
ffffffffff9f00afffbf007fffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffffffffffff0ccbdaeaeaeaeaeff
ffffaec2ffffffffffebaed6ffebaed6ffffffffffffffcf603000000000
00ffffff0040ffffffffffbf007fffbf007fffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffe6aeaec2
d6e1f0c2aeffffffaec2ffffffffffebaedbffebaed6ffffffffffffaf00
00407f9fcf4000ffffff0040ffffffffffbf008fffbf007fffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffbdb3f0ffffffffc2aeffffffaebdffffffffffdbaeebffebaed6ffff
ffffffff3010cfffffffff4000ffffff0030ffffffffff8f00bfffbf007f
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffaec2fffffffffab3aeffffffaeaef5ffffffffc2b3ff
ffebaed6ffffffffffff0040ffffffffef1000ffffff0000dfffffffff40
10ffffbf007fffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffbdb3f0fffff5bdaeaeffffffaeaebdfa
ffffe1aeccffffebaed6ffffffffffff3010cfffffdf300000ffffff0000
30efffff9f0060ffffbf007fffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffe6aeb3c2bdaec2d2aebd
f0ffaeb8b3aec2b3aebdfaffffebaed6ffffffffffffaf00104030004070
0030cfff0020100040100030efffffbf007fffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffebd2c2
d2e6fffaccc7f5ffaec2f5d2c2c7e1fffffffff5d6ebffffffffffffffbf
704070afffef6050dfff0040df7040509fffffffffdf7fbfffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffaec2ffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff0040ffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffaec2ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffff0040ffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffaec2ffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffff0040
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffc2d2ffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffff4070ffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff
a5a5a59c9c9c9c9c94949494948c8c8c8c848484c6c6c6bdbdbdbdb5b5b5
b5adadadada5a5a59c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
a5a79ca5f7a59c9494b1e6e6c49c8c8c84848784c6bcbdc6fcc6b5b5b5c8
eeeed2b5a5a5a5a59a9ce7e7e7e7ffe7e7e7e7f9fffff4e7e7e7e7e7d6e7
a59c9c87b1f1c49c948f8f8ceded7b8484848487c6bdbd9ac8f2d2bdb5a8
a8a5f8f893a5a59c9c9ae7e7e7d6f9f7f4e7e7d9d9e7ffffdae7e7e7e7d6
9c9c9c9c24b1f77294948c8c4a15f7c47b84847bbdbdbdbd3ac8fc8cadad
ada55a1cfcd2939c9c9ce7e7e7e78ef9ffd3e7e7e7e79658fff4dae7e7e7
9c24f79ce6f77b4a8c8c8c8f6f00008e6b7b7b7bbd3afcb5eefc945aa5ad
ada8810000a884939c93e78effe7ffffe796e7e7e7d9bd3b3bf6d6dae7da
9c8f31f7f7e6a324948c8c94d20a0000846b7b7bbda831fcfceeb83ab5a5
a5ade12400009c849494e7d931fffffff78ee7e7e7e7fb79003be7cee7e7
9c9c8c15240a72ed248c94e6f700001524f7b17bb5b5ad1c3a248cf83aa5
adeefc00001c3afcc893e7e7e7588e79d3ff8ee7e7ffff3b00588efff9da
9c9494947220006bd224e6ed1500636b240a4a7bb5b5b5b58c340084e13a
eef81c007b843a246094e7e7e7e7d37f00d6fb8effff583bcece8e79ade7
9494949494a77b0ad2f7f715004a847b7b207b73b5b5b5adadbc9c24e1fc
fc1c00609c949434948ce7e7e7e7e7e7e779fbffff5800ade7e7e77fe7de
949494948c8c72f7f1f72000508e7b7b7b738473b5adadadadad8cfcf2fc
340068a89493948c9c8ce7e7e7e7e7e7d3fff7ff7f00b8f6e7dae7dee7de
9494948c8c8c9cf1f70a0063247b7b7373737373adadadada5a5b5f2fc24
007b3a9493948c8c8c8ce7e7e7e7e7e7e7f7ff7900ce8ee7dae7dededede
948c8c8c8c9cf1e60a000024e6247b737373736badadada5a5b5f2ee2400
003aee3a948c8c8c8484e7e7e7e7e7e7f7ff793b008eff8ee7dededed6d6
8c8c8c8ca7f1d20a005e7b0050f7247373726b6badada5a5bcf2e1240073
940068fc3a8c8c848484e7e7e7e7e7f7fb793bc6e73bb8ff8edededed6d6
8c8c8c9cf1c40a00507b847b0a5ee624736b6b6bada5a5b5f2d22400689c
9c942473ee3a8c84847be7e7e7e7f7f4793bb8e7e7e779c6ff8eded6d6ce
8c8ca7f18e0a004a7b7b7b847b00f7f76350876ba5a5bcf2a82400609494
939c8c00fcfc7b689a7be7e7e7f7f6793bade7e7dae7e73bffffc6b8d6ce
8c9cf1a30a0037847b7b7b738c73f70000848463a5b5f2b824004f9c9394
948ca58cfc00009c9c7be7e7f7f7793b9fe7dae7e7dee7deff0000efe7c6
84724a0a0037847b7b73737373b16b0073e63763a58c6024004f9c93948c
8c8c8cc884008cee4f7be7d3ad793b9fe7dae7dedededef9d600e7ff9fc6
846b15004a877b7b737b7373736b20635e0a155fa5841c00609a94948c8c
8c8c8484347b73241c73e7ce583badd6e7e7dee7deded6d67fcec67958bd
84847b637b847b73737373736b6b63370a24635f9c9c947b939c938c8c8c
8c8484847b4f243a7b73e7e7e7bddae7dae7dededed6d6cec69f798ecebd
87847b7b7b7b7b737373736b6b6b6363635f5f5e9a9c93949493948c8c8c
8484847b7b7b7b737374d6e7dae7e7dae7dededed6d6cececec6c6bdbdb1

ffffffffffffffffffffffffffffdfffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffecffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffdf0000000000ffffffffffffffffffffffffffffffff
ffffffffffffffec0000000000ffffffffffffffffffffffffffffffffff
ffffffffffffff0000000000ffffffffffffffffffffffffffffffffffff
ffffffff0000000000000000dfffffffffffffffffffffffffffffffffff
ffffff0000000000000000ecffffffffffffffffffffffffffffffffffff
ffff0000000000000000ffffffffffffffffffffffffffffffffffffffff
df000000000000000000ffffffffffffffffffffffffffffffffffffffec
000000000000000000ffffffffffffffffffffffffffffffffffffffff00
0000000000000000ffffffffffffffffffffffffffffffffffffff000000
00000000000000dfffffffffffffffffffffffffffffffffffff00000000
000000000000ecffffffffffffffffffffffffffffffffffff0000000000
0000000000ffffffffffffffffffffffffffffffffffffff000000000000
0000000000ffffffffffffffffffffffffffffffffffff00000000000000
00000000ffffffffffffffffffffffffffffffffffff0000000000000000
000000ffffffffffffffffffffffffffffffffffdf000000000000000000
0000ffffffffffffffffffffffffffffffffffec00000000000000000000
00ffffffffffffffffffffffffffffffffffff0000000000000000000000
ffffffffffffffffffffffffffffffffffdf0000000000000000000000ff
ffffffffffffffffffffffffffffffffec0000000000000000000000ffff
ffffffffffffffffffffffffffffffff0000000000000000000000ffffff
ffffffffffffffffffffffffffffdf0000000000000000000000ffffffff
ffffffffffffffffffffffffffec0000000000000000000000ffffffffff
ffffffffffffffffffffffffff0000000000000000000000ffffffffffff
ffffffffffffffffffffffff0000000000000000000000ffffffffffffff
ffffffffffffffffffffff0000000000000000000000ffffffffffffffff
ffffffffffffffffffff0000000000000000000000ffffffffffffffffff
ffffffffffffffffff00000000000000000000ffffffffffffffffffffff
ffffffffffffffff00000000000000000000ffffffffffffffffffffffff
ffffffffffffff00000000000000000000ffffffffffffffffffffffffff
ffffffffffffff0000000000000000dfffffffffffffffffffffffffffff
ffffffffffff0000000000000000ecffffffffffffffffffffffffffffff
ffffffffff0000000000000000ffffffffffffffffffffffffffffffffff
ffffffffff000000000000dfffffffffffffffffffffffffffffffffffff
ffffffff000000000000ecffffffffffffffffffffffffffffffffffffff
ffffff000000000000ffffffffffffffffffffffffffffffffffffffffff
ffffffdfdfdfdfffffffffffffffffffffffffffffffffffffffffffffff
ffffececececffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffdf0000000000000000000000
0000000000000000000000ffffffffffffec000000000000000000000000
00000000000000000000ffffffffffffff00000000000000000000000000
000000000000000000ffffffffff00000000000000000000000000000000
00000000000000000000ffffff0000000000000000000000000000000000
000000000000000000ffffff000000000000000000000000000000000000
0000000000000000ffff0000000000000000000000000000000000000000
00000000000000dfff000000000000000000000000000000000000000000
000000000000ecff00000000000000000000000000000000000000000000
0000000000ffff0000000000000000000000000000000000000000000000
0000000000ff000000000000000000000000000000000000000000000000
00000000ff00000000000000000000000000000000000000000000000000
000000df0000000000000000000000000000000000000000000000000000
0000ec000000000000000000000000000000000000000000000000000000
00ff00000000000000000000000000000000000000000000000000000000
df00000000000000000000000000000000000000000000000000000000ec
00000000000000000000000000000000000000000000000000000000ff00
000000000000000000000000000000000000000000000000000000df0000
0000000000000000000000000000000000000000000000000000ec000000
00000000000000000000000000000000000000000000000000ff00000000
000000000000000000000000000000000000000000000000df00000000df
dfdf0000000000000000000000000000dfdf0000000000ec00000000ecec
ec0000000000000000000000000000ecec0000000000ff00000000ffffff
0000000000000000000000000000ffff0000000000df00000000dfffdf00
00000000000000000000000000ffff0000000000ec00000000ecffec0000
000000000000000000000000ffff0000000000ff00000000ffffff000000
0000000000000000000000ffff0000000000df00000000dfffdf00000000
00000000000000000000ffff0000000000ec00000000ecffec0000000000
000000000000000000ffff0000000000ff00000000ffffff000000000000
0000000000000000ffff0000000000df00000000dfffdf00000000000000
00000000000000ffff0000000000ec00000000ecffec0000000000000000
000000000000ffff0000000000ff00000000ffffff000000000000000000
0000000000ffff0000000000df00000000dfffdf00000000000000000000
00000000ffff0000000000ec00000000ecffec0000000000000000000000
000000ffff0000000000ff00000000ffffff000000000000000000000000
0000ffff0000000000df00000000dfffdf00000000000000000000000000
00ffff0000000000ec00000000ecffec0000000000000000000000000000
ffff0000000000ff00000000ffffff0000000000000000000000000000ff
ff0000000000df00000000dfffdf0000000000000000000000000000ffff
0000000000ec00000000ecffec0000000000000000000000000000ffff00
00000000ff00000000ffffff0000000000000000000000000000ffff0000
000000df00000000dfffdf0000000000000000000000000000ffff000000
0000ec00000000ecffec0000000000000000000000000000ffff00000000
00ff00000000ffffff0000000000000000000000000000ffff0000000000
df00000000dfffdf0000000000000000000000000000ffff0000000000ec
00000000ecffec0000000000000000000000000000ffff0000000000ff00
000000ffffff0000000000000000000000000000ffff0000000000df0000
0000dfffdf0000000000000000000000000000ffff0000000000ec000000
00ecffec0000000000000000000000000000ffff0000000000ff00000000
ffffff0000000000000000000000000000ffff0000000000df00000000df
ffdf0000000000000000000000000000ffff0000000000ec00000000ecff
ec0000000000000000000000000000ffff0000000000ff00000000ffffff
0000000000000000000000000000ffff0000000000df00000000dfffdf00
00000000000000000000000000ffff0000000000ec00000000ecffec0000
000000000000000000000000ffff0000000000ff00000000ffffff000000
0000000000000000000000ffff0000000000df00000000dfffdf00000000
00000000000000000000ffff0000000000ec00000000ecffec0000000000
000000000000000000ffff0000000000ff00000000ffffff000000000000
0000000000000000ffff0000000000df00000000dfffdf00000000000000
00000000000000ffff0000000000ec00000000ecffec0000000000000000
000000000000ffff0000000000ff00000000ffffff000000000000000000
0000000000ffff0000000000df00000000dfffdf000000000000ffff0000
00000000ffff0000000000ec00000000ecffec000000000000ffff000000
000000ffff0000000000ff00000000ffffff000000000000ffff00000000
0000ffff0000000000df00000000dfffdf000000000000ffff0000000000
00ffff0000000000ec00000000ecffec000000000000ffff000000000000
ffff0000000000ff00000000ffffff000000000000ffff000000000000ff
ff0000000000ff00000000dfffdf000000000000ffff000000000000ffff
00000000dfff00000000ecffec000000000000ffff000000000000ffff00
000000ecff00000000ffffff000000000000ffff000000000000ffff0000
0000ffffdf000000dfffdf000000000000ffff000000000000ffff000000
dfffffec000000ecffec000000000000ffff000000000000ffff000000ec
ffffff000000ffffff000000000000ffff000000000000ffff000000ffff
ffffffdf00dfffdf000000000000ffff000000000000ffffdfffffffffff
ffffec00ecffec000000000000ffff000000000000ffffecffffffffffff
ffff00ffffff000000000000ffff000000000000ffffffffffffffffffff
ffffffffdf000000000000ffff000000000000ffffffffffffffffffffff
ffffffec000000000000ffff000000000000ffffffffffffffffffffffff
ffffff000000000000ffff000000000000ffffffffffffffffffffffffff
ffdf000000000000ffff000000000000ffffffffffffffffffffffffffff
ec000000000000ffff000000000000ffffffffffffffffffffffffffffff
000000000000ffff000000000000ffffffffffffffffffffffffffffdf00
0000000000ffff000000000000ffffffffffffffffffffffffffffec0000
00000000ffff000000000000ffffffffffffffffffffffffffffff000000
000000ffff000000000000ffffffffffffffffffffffffffffdf00000000
0000ffff000000000000ffffffffffffffffffffffffffffec0000000000
00ffff000000000000ffffffffffffffffffffffffffffff000000000000
ffff000000000000ffffffffffffffffffffffffffffdf000000000000ff
ff000000000000ffffffffffffffffffffffffffffec000000000000ffff
000000000000ffffffffffffffffffffffffffffff000000000000ffff00
0000000000ffffffffffffffffffffffffffffdf000000000000ffff0000
00000000ffffffffffffffffffffffffffffec000000000000ffff000000
000000ffffffffffffffffffffffffffffff000000000000ffff00000000
0000ffffffffffffffffffffffffffffdf000000000000ffff0000000000
00ffffffffffffffffffffffffffffec000000000000ffff000000000000
ffffffffffffffffffffffffffffff000000000000ffff000000000000ff
ffffffffffffffffffffffffffdf000000000000ffff000000000000ffff
ffffffffffffffffffffffffec000000000000ffff000000000000ffffff
ffffffffffffffffffffffff000000000000ffff000000000000ffffffff
ffffffffffffffffffffdf000000000000ffff000000000000ffffffffff
ffffffffffffffffffec000000000000ffff000000000000ffffffffffff
ffffffffffffffffff000000000000ffff000000000000ffffffffffffff
ffffffffffffffdf000000000000ffff000000000000ffffffffffffffff
ffffffffffffec000000000000ffff000000000000ffffffffffffffffff
ffffffffffff000000000000ffff000000000000ffffffffffffffffffff
ffffffffdf000000000000ffff000000000000ffffffffffffffffffffff
ffffffec000000000000ffff000000000000ffffffffffffffffffffffff
ffffff000000000000ffff000000000000ffffffffffffffffffffffffff
ffdf000000000000ffff000000000000ffffffffffffffffffffffffffff
ec000000000000ffff000000000000ffffffffffffffffffffffffffffff
000000000000ffff000000000000ffffffffffffffffffffffffffffdf00
0000000000ffff000000000000ffffffffffffffffffffffffffffec0000
00000000ffff000000000000ffffffffffffffffffffffffffffff000000
000000ffff000000000000ffffffffffffffffffffffffffffdf00000000
0000ffff000000000000ffffffffffffffffffffffffffffec0000000000
00ffff000000000000ffffffffffffffffffffffffffffff000000000000
ffff000000000000ffffffffffffffffffffffffffffdf000000000000ff
ff000000000000ffffffffffffffffffffffffffffec000000000000ffff
000000000000ffffffffffffffffffffffffffffff000000000000ffff00
0000000000ffffffffffffffffffffffffffffdf000000000000ffff0000
00000000ffffffffffffffffffffffffffffec000000000000ffff000000
000000ffffffffffffffffffffffffffffff000000000000ffff00000000
0000ffffffffffffffffffffffffffffdf000000000000ffff0000000000
00ffffffffffffffffffffffffffffec000000000000ffff000000000000
ffffffffffffffffffffffffffffff000000000000ffff000000000000ff
ffffffffffffffffffffffffffdf000000000000ffff000000000000ffff
ffffffffffffffffffffffffec000000000000ffff000000000000ffffff
ffffffffffffffffffffffff000000000000ffff000000000000ffffffff
ffffffffffffffffffffdf000000000000ffff000000000000ffffffffff
ffffffffffffffffffec000000000000ffff000000000000ffffffffffff
ffffffffffffffffff000000000000ffff000000000000ffffffffffffff

0 11 SF
0 LE neg 20 sub M
(





)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(The Nuts and Bolts of the Java Language)ES()ES()EA(



)0 P(
)HR(

)0 2 H(
    Table of Contents
)EH(
)0 P(
)BQ(


)UL(
)LI(

)A(The Nuts and Bolts of the Java Language)EA(
    )UL(
    )LI(
    )A(A Simple Class Definition)EA(
    )LI(
    )A(The main\201\202 Method)EA(
    )LI(
    )A(Introducing Exceptions)EA(
    )LI(
    )A(Variables and Data Types)EA(
    )LI(
    )A(Control Flow Statements)EA(
    )LI(
    )A(The Standard Input Stream)EA(
    )LI(
    )A(Operators)EA(
    )LI(
    )A(The Standard Output Stream)EA(
    )LI(
    )A(Character Data)EA(
    )LI(
    )A(Running the Application)EA(
    )LU(

)LU(

)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(The Nuts and Bolts of the Java Language)ES()ES()EA(





)WB NL NP(







)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(Table of Contents)ES()ES()EA(



)0 P(
)HR(

)0 1 H(
     The Nuts and Bolts of the Java Language
)EH(
)0 P(
)BQ(
 
This lesson introduces you to the basic concepts of the Java language
through a line by line explanation of a simple Java application.
You'll learn specifics about the syntax and semantics of the Java
language including variables and data types, control flow, and
operators and expressions.  You will also learn about basic class
definitions, the )SM(main\201\202)ES( method, strings, static methods and variables,
and making system calls.

)0 4 H(The Character-Counting Application)EH(
)BQ(
The following application reads and counts characters in its input and then
displays the number of characters read. The character-counting program uses
several components of the Java language and of the class libraries shipped
with the Java development environment. The links in the following listing visit
pages that explain a particular feature of the application or a general Java
language concept. Where appropriate, those pages refer you to other lessons
in )BD(The Java Programmer's Guide)ES( or to other documentation.
)BQ(
)PR(
)A(class Count)EA( {
    )A(public static void main)EA(\201String args[]\202
        )A(throws java.io.IOException)EA(
    {
        )A(int count = 0;)EA(

        )A(while)EA( \201)A(System.in.read\201\202 != -1)EA(\202
            )A(count++;)EA(
        )A(System.out.println)EA(\201)A("Input has " + count + " chars.")EA(\202;
    }
}
)RP(
)QB(
Instead of using the links embedded in the source listing above,
you can use the
)A()0 0 IM()EA(
and
)A()0 1 IM()EA(
links \201in the header and footer of each page\202 to step through the links in order.
)QB(

)0 4 H()A(Running the Application)EA(
)EH(
)BQ(
Type in the program exactly as it appears above and save it to a file.
Then use the Java compiler to compile the program, and 
the Java interpreter to run it.
)QB(

)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(Table of Contents)ES()ES()EA(





)WB NL NP(




)0 P(
)HR(

)0 2 H(
    Count.java
)EH(
)0 P(
)BQ(

)PR(

/*
 * Copyright \201c\202 1994 Sun Microsystems, Inc. All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software
 * and its documentation for NON-COMMERCIAL purposes and without
 * fee is hereby granted provided that this copyright notice
 * appears in all copies. Please refer to the file "copyright.html"
 * for further important copyright and licensing information.
 *
 * SUN MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
 * THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. SUN SHALL NOT BE LIABLE FOR
 * ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR
 * DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 */
class Count {
    public static void main\201String args[]\202
	throws java.io.IOException
    {
        int count = 0;

        while \201System.in.read\201\202 != -1\202
            count++;
        System.out.println\201"Input has " + count + " chars."\202;
    }
}
)RP(
)QB(
)0 P(
)HR(
)0 P(


)WB NL NP(







)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(The Nuts and Bolts of the Java Language)ES()ES()EA(



)0 P(
)HR(

)0 2 H(
    A Simple Class Definition
)EH(
)0 P(
)BQ(

)BQ(
)PR(
)BD(class Count {)ES(
    public static void main\201String args[]\202
        throws java.io.IOException
    {
        int count = 0;

        while \201System.in.read\201\202 != -1\202
            count++;
        System.out.println\201"Input has " + count + " chars."\202;
    }
)BD(})ES(
)RP(
)QB(

In the Java language, all methods and variables must exist within a class.
So, the first line of the character-counting application defines a class,
)SM(Count)ES(, that defines the methods, variables, and any other classes
needed to implement the character-counting application. Since this program
is such a simple one, the Count class just defines one method named )SM(main\201\202)ES(.
)0 P(
)A(Defining a Class)EA(
)A()0 4 IM()EA(
in )I(The Anatomy of a Java Application)ES( contains a more thorough discussion
about defining a class.

)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(The Nuts and Bolts of the Java Language)ES()ES()EA(





)WB NL NP(







)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(The Nuts and Bolts of the Java Language)ES()ES()EA(



)0 P(
)HR(

)0 2 H(
    The main\201\202 Method
)EH(
)0 P(
)BQ(
 
)BQ(
)PR(
class Count {
    )BD(public static void main)ES(\201String args[]\202
        throws java.io.IOException
    {
        int count = 0;

        while \201System.in.read\201\202 != -1\202
            count++;
        System.out.println\201"Input has " + count + " chars."\202;
    }
}    
)RP(
)QB(

In the Java language, when you execute a class with the
Java interpreter, the runtime system starts by calling the
class's )SM(main\201\202)ES( method. The )SM(main\201\202)ES(
method then calls all the other methods required to run your
application.
)0 P(
)A(The main\201\202 Method)EA(
)A()0 4 IM()EA(
in )I(The Anatomy of a Java Application)ES( provides a more
thorough discussion about the )SM(main\201\202)ES( method.

)0 4 H(Accepting a Filename on the Command Line)EH(
)BQ(
The )SM(main\201\202)ES( method accepts a single parameter:
an array of Strings.
This parameter is the mechanism through which the runtime system
passes command line arguments to your application. Currently, the
character-counting application ignores its command line arguments.
Let's modify the program to accept a command line argument and
have it count the characters in the file specified on the command line.
Compare this version of the character-counting
program with the original version listed above.
)BQ(
)PR(
import java.io.*;

class CountFile {
    public static void main\201String args[]\202
	throws java.io.IOException, java.io.FileNotFoundException
    {
        int count = 0;
	InputStream is;

        if \201args.length == 1\202
	    is = new FileInputStream\201args[0]\202;
	else
	    is = System.in;
	
        while \201is.read\201\202 != -1\202
            count++;

	if \201args.length == 1\202
	    System.out.println\201args[0] + " has "+ count + " chars."\202;
	else
	    System.out.println\201"Input has " + count + " chars."\202;
    }
}
)RP(
)QB(
In this implementation of the character-counting program,
if the user specifies a name on the command line then
the application counts the characters in the file. Otherwise,
the application acts as it did before and reads from the
standard input stream. Now, )A(run the new version)EA(
of the program on this )A(text file)EA( and specify
the name of the file \201"testing"\202 on the command line.
)0 P(
For more information about command line arguments refer to the
)A()I(Command Line Arguments)ES()EA(
)A()0 4 IM()EA(
lesson.
)QB(

)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(The Nuts and Bolts of the Java Language)ES()ES()EA(





)WB NL NP(




)0 P(
)HR(

)0 2 H(
    CountFile.java
)EH(
)0 P(
)BQ(

)PR(

/*
 * Copyright \201c\202 1994 Sun Microsystems, Inc. All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software
 * and its documentation for NON-COMMERCIAL purposes and without
 * fee is hereby granted provided that this copyright notice
 * appears in all copies. Please refer to the file "copyright.html"
 * for further important copyright and licensing information.
 *
 * SUN MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
 * THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. SUN SHALL NOT BE LIABLE FOR
 * ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR
 * DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 */
import java.io.*;

class CountFile {
    public static void main\201String args[]\202
	throws java.io.IOException, java.io.FileNotFoundException
    {
        int count = 0;
	InputStream is;

        if \201args.length == 1\202
	    is = new FileInputStream\201args[0]\202;
	else
	    is = System.in;)WR(
	
        while \201is.read\201\202 != -1\202
            count++;

	if \201args.length == 1\202
	    System.out.println\201args[0] + " has "+ count + " chars."\202;
	else
	    System.out.println\201"Input has " + count + " chars."\202;
    }
}
)RP(
)QB(
)0 P(
)HR(
)0 P(


)WB NL NP(




)A()0 0 IM()EA(
)0 P(
)HR(

)0 2 H(
    Platform-Specific Details: Running a Java Application
)EH(
)0 P(
)BQ(

)DL(
)DT()BD(UNIX)ES(
)DD(
)PR(
% )BD(java CountFile testing)ES(
testing has 70 chars.
)RP(

)DT()BD(DOS shell \201Windows 95/NT\202)ES(
)DD(
)PR(
C:\200> )BD(java CountFile testing)ES(
testing has 71 chars.
)RP(

)LD(

)BD(Note:)ES( the program gives different results for UNIX and
DOS systems. On UNIX when you press the return key, you get
a single character: )SM(\200n)ES(.
However, on DOS when you press the return key, you get
two characters: )SM(\200r\200n)ES(.

)QB(
)0 P(
)HR(
)0 P(
)A()2 0 IM()EA(


)WB NL NP(







)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(The Nuts and Bolts of the Java Language)ES()ES()EA(



)0 P(
)HR(

)0 2 H(
    Introducing Exceptions
)EH(
)0 P(
)BQ(
 
)BQ(
)PR(
class Count {
    public static void main\201String args[]\202
        )BD(throws java.io.IOException)ES(
    {
        int count = 0;

        while \201System.in.read\201\202 != -1\202
            count++;
        System.out.println\201"Input has " + count + " chars."\202;
    }
}    
)RP(
)QB(

The following code snippet is invalid because it tries to divide 7 by 0
and mathematically divide by 0 is an undefined operation.
)BQ(
)PR(
int x = 0;
int y = 7;
System.out.println\201"answer = " + )BD(y/x)ES(\202;
)RP(
)QB(
An event that occurs during the execution of program that prevents the continuation of
the normal flow of instructions, such as the divide by 0 above, is called an
)I(exception)ES(. Different computer systems handle exceptions in different ways;
some more elegantly than others.
)0 P(
In the Java language, you can catch exceptions and try to handle them within a special code segment
known as an )I(exception handler)ES(. The exception handler can try to recover
from the error, or if the error is too serious to recover from, then the exception
handler can display pertinent information to help the user detect the problem.

)0 P(
In the Java language, every method must declare all of the exceptions, if any, it can throw.
The bold line shown in the character-counting application above declares
that the )SM(main\201\202)ES( method can throw an exception called
)SM(java.io.IOException)ES(. You will notice that the )SM(main\201\202)ES(
method does not throw any exceptions directly. Rather it can throw one
indirectly through its call to )SM(System.in.read\201\202)ES(.

)0 4 H(See Also)EH(
)BQ(
)A()0 4 IM()EA(
)A(Error Handling and Exceptions)EA(
)QB(

)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(The Nuts and Bolts of the Java Language)ES()ES()EA(





)WB NL NP(







)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(The Nuts and Bolts of the Java Language)ES()ES()EA(



)0 P(
)HR(

)0 2 H(
    Variables and Data Types
)EH(
)0 P(
)BQ(
 
)BQ(
)PR(
class Count {
    public static void main\201String args[]\202
        throws java.io.IOException
    {
        )BD(int count = 0;)ES(

        while \201System.in.read\201\202 != -1\202
            count++;
        System.out.println\201"Input has " + count + " chars."\202;
    }
}    
)RP(
)QB(

)0 4 H(Variables)EH(
)BQ(
The character-counting program uses one local variable--)SM(count)ES(.
The program increments )SM(count)ES( each time it reads a character.
)QB(

)0 4 H(Primitive Data Types)EH(
)BQ(
All variables in the Java language must have a data type. The Java language supports a full range of
primitive data types, including integer, floating point, character, and boolean.
)BQ(
)PR(
 )BD(Type)ES(             )BD(Size/Format)ES(
byte		 8-bit two's complement
short		16-bit two's complement
int		32-bit two's complement
long		64-bit two's complement

float		32-bit IEEE 754 floating point
double		64-bit IEEE 754 floating point

char		16-bit Unicode character
)RP(
)QB(
)0 P(
In the example program, )SM(count)ES( is an integer, as indicated by
the )SM(int)ES( keyword that precedes it.
A variable's data type determines its range of values, operations
that can be performed on it, and the effect of those operations.
For example, integers can have only whole number values \201both positive
and negative\202 and the standard arithmetic operators \201)SM(+)ES(, )SM(-)ES(, etc.\202
perform the normal arithmetic operations \201addition, subtraction, etc.\202.

)0 P(
The code ")SM(= 0)ES(" that follows the variable name initializes the
variable to 0. If you try to use a variable in a program without first initializing it, the
compiler issues an error message. See
)A(Troubleshooting Compiler Problems)EA(
)A()0 5 IM()EA(
for more information.
)QB(

)0 4 H(Complex Data Types)EH(
)BQ(
The Java language also supports many complex data types, including
arrays, strings, and objects.
In addition to the predefined data types listed above,
you can define your own data types through )I(class)ES(
and )I(interface)ES( definitions.
Indeed, you've already defined a class--the )SM(Count)ES( class
in the character-counting program.
See
)A(Missing Page)EA(
)A()0 5 IM()EA(.
for more information about defining your own classes and interfaces.
)QB(
)0 P(
)HR(
)BD(Note to C and C++ Programmers:)ES(
There are three
)A(C Data Types Not Supported By the Java Language)EA(
)A()0 6 IM()EA(.
They are pointer, struct, and union.
)HR(

)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(The Nuts and Bolts of the Java Language)ES()ES()EA(





)WB NL NP(







)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(The Nuts and Bolts of the Java Language)ES()ES()EA(



)0 P(
)HR(

)0 2 H(
    Control Flow Statements
)EH(
)0 P(
)BQ(
 
)BQ(
)PR(
class Count {
    public static void main\201String args[]\202
        throws java.io.IOException
    {
        int count = 0;

        )BD(while)ES( \201System.in.read\201\202 != -1\202
            count++;
        System.out.println\201"Input has " + count + " chars."\202;
    }
}    
)RP(
)QB(
The character-counting program uses a )SM(while)ES( statement to loop
over all the characters of the input source and count them.
Generally speaking, a )SM(while)ES( statement performs
some action )I(while)ES( a certain condition remains true.
The general syntax of the )SM(while)ES( statement is:
)BQ(
)PR(
while \201)I(expression)ES(\202
    )I(statement)ES(
)RP(
)QB(
That is, while )I(expression)ES( is true, do )I(statement)ES(.
In the character-counting application, while the )SM(read\201\202)ES( method
returns a character that is )BD(not)ES( -1, the program
increments )SM(count)ES(. More information about reading from
the standard input stream is in the next page of this lesson.

)0 4 H(Other Control Flow Statements)EH(
)BQ(
Statements such as the )SM(while)ES( statement are )I(control flow statements)ES(.
They determine the order in which other statements are executed.
The Java language supports several other control flow statements:
)BQ(
)PR(
   )BD(Statement)ES(             )BD(Keyword)ES(
decision making    if-else, switch
loops              for, while, do-while
exceptions         try-catch-throw
miscellaneous      break, continue, label:, return
)RP(
)QB(
Although )SM(goto)ES( is a reserved word,
the Java language does not support the
)SM(goto)ES( statement.
)QB(

)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(The Nuts and Bolts of the Java Language)ES()ES()EA(





)WB NL NP(







)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(The Nuts and Bolts of the Java Language)ES()ES()EA(



)0 P(
)HR(

)0 2 H(
    The Standard Input Stream
)EH(
)0 P(
)BQ(
  
)BQ(
)PR(
class Count {
    public static void main\201String args[]\202
        throws java.io.IOException
    {
        int count = 0;

        while \201)BD(System.in.read\201\202 != -1)ES(\202
            count++;
        System.out.println\201"Input has " + count + " chars."\202;
    }
}    
)RP(
)QB(

System is a member of the java.lang
package and provides system functionality such
as standard input and output, copying arrays, getting
the current date and time, and getting environment variables.
The )SM(while)ES( loop uses the System class
to read characters.
)0 P(
All of the System class's methods and variables are class
methods and variables. For more information about how to use
class methods and variables refer to
)A(Static vs. Instance)EA(
)A()0 4 IM()EA(
in )I(The Anatomy of a Java Application)ES(.

)0 4 H(The Standard Input Stream)EH(
)BQ(
)SM(System.in)ES( implements the )I(standard input stream)ES(.
The standard input stream is a C library concept
that has been assimilated into the Java language. Simply put, a stream is
a flowing buffer of characters; the standard input stream
is a stream that reads characters from the keyboard.
The standard input stream is a convenient place
for an old-fashioned text-based application to get
input from the user.
)QB(

)0 4 H(Reading from the Standard Input Stream)EH(
)BQ(
The )SM(read\201\202)ES( method provided by )SM(System.in)ES(
reads a single character and returns either the
character that was read or, if there are no more characters to
be read, -1.
)0 P(
When a program reads from the standard input stream,
the program blocks waiting for you to type something in.
The program continues to wait for input until you give
it some indication that the input is complete.
To indicate to any program that reads from the standard input stream
that you have finished entering characters, type the
)A(end-of-input character)EA(
appropriate for your system at the beginning of a new line.
When the character-counting program receives an end-of-input character
the loop terminates and the program displays the number of characters
you typed.
)QB(

)0 4 H(See Also)EH(
)BQ(
)A()0 7 IM()EA(
)A(java.lang.System)EA(
)QB(
 
)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(The Nuts and Bolts of the Java Language)ES()ES()EA(





)WB NL NP(




)A()0 0 IM()EA(
)0 P(
)HR(

)0 2 H(
    Platform-Specific Details: The End-of-Input Character
)EH(
)0 P(
)BQ(
 
)DL(
)DT()BD(UNIX)ES(
)DD(
Use the control-D character \201type D while holding down the
control key\202 to indicate to a program reading from the standard
input stream that you have finished entering input.
The control-D character is often written as )SM(^D)ES(.
)BQ(
)PR(
% )BD(java Count
This is a test.
^D)ES(
Input has 16 chars.
)RP(
)QB(

)DT()BD(DOS shell \201Windows 95/NT\202)ES(
)DD(
Use the control-Z character \201type Z while holding down the
control key\202 to indicate to a program reading from the standard
input stream that you have finished entering input.
Or you can press the )SM(F6)ES( key.
The control-Z character is often written as )SM(^Z)ES(.
)BQ(
)PR(
C:\200> )BD(java Count
This is a test.
^Z)ES(
Input has 17 chars.
)RP(
)QB(
)LD(

)BD(Note:)ES( the program gives different results for UNIX and
DOS systems. On UNIX when you press the return key, you get
a single character )SM(\200n)ES(.
However, on DOS when you press the return key, you get
two characters )SM(\200r\200n)ES(.

)QB(
)0 P(
)HR(
)0 P(
)A()2 0 IM()EA(


)WB NL NP(







)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(The Nuts and Bolts of the Java Language)ES()ES()EA(



)0 P(
)HR(

)0 2 H(
    Operators
)EH(
)0 P(
)BQ(

)BQ(
)PR(
class Count {
    public static void main\201String args[]\202
        throws java.io.IOException
    {
        int count = 0;

        while \201System.in.read\201\202 )BD(!=)ES( -1\202
            )BD(count++;)ES(
        System.out.println\201"Input has " + count + " chars."\202;
    }
}    
)RP(
)QB(
The character-counting program uses several )I(operators)ES(
including )SM([])ES(, )SM(=)ES(, )SM(!=)ES(, )SM(++)ES(,
and )SM(+)ES(.
As in other languages, Java operators fall into four categories:
arithmetic, relational, logical, and string.
With a few notable exceptions, Java operators use )I(infix notation)ES(--the
operator appears )I(between)ES( its operands.
)BQ(
)PR(
op1 operator op2
)RP(
)QB(

)0 4 H(Arithmetic Operators)EH(
)BQ(
The Java language supports various arithmetic operations--including addition, subtraction,
multiplication, and division--on all numbers.
The statement )SM(count++)ES( uses a
short cut operator )SM(++)ES(, which increments a number.
)QB(

)0 4 H(Relational Operators)EH(
)BQ(
The relational operators compare two values and determine the relationship
between them. For example, )SM(!=)ES( returns true if
two values are )I(unequal)ES(. The character-counting program uses )SM(!=)ES(
to determine whether the value returned by )SM(System.in.read\201\202)ES( is not equal to -1.
)QB(

)0 4 H(Logical Operators)EH(
)BQ(
The logical operators take two values and perform boolean logic
operations. Two such operators are )SM(&&)ES( and )SM(||)ES(,
which perform )I(boolean and)ES( and )I(boolean or)ES( operations, respectively.
Typically, programmers use logical operators to evaluate
compound expressions. For example, this code snippet verifies that
an array index is between two boundaries:
)BQ(
)PR(
if \2010 < index && index < NUM_ENTRIES\202
)RP(
)QB(
)QB(

)0 4 H(String Operators)EH(
)BQ(
The Java language extends the definition of the operator )SM(+)ES( to
include string concatenation. The example program uses )SM(+)ES(
to contenate ")SM(Input has )ES(", the value of )SM(count)ES(,
and ")SM( chars.)ES("
)BQ(
)PR(
System.out.println\201"Input has " + count + " chars."\202;
)RP(
)QB(
)A(String Concatenation)EA(
contains more information.
)QB(

)0 4 H(Operator Precedence)EH(
)BQ(
The Java language allows you to create compound expressions and statements such as
this one:
)BQ(
)PR(
x * y * z
)RP(
)QB(
In this particular example, the order in which the expression is evaluated
is unimportant because multiplication is commutative.
However, this is not true of all expressions, for example:
)BQ(
)PR(
x * y / 100
)RP(
)QB(
gives different results if you perform the
multiplication first or the division first.
You can use balanced parentheses )SM(\201)ES( and )SM(\202)ES(
to explicitly tell the Java compiler the order in which to evaluate an expression,
for example )SM(x * \201y / 100\202)ES(, or you can rely on the )I(precedence)ES( the
Java language assigns to each operator. This )A(chart)EA(
illustrates the relative precedence for all Java operators.
)QB(

)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(The Nuts and Bolts of the Java Language)ES()ES()EA(





)WB NL NP(




)A()0 0 IM()EA(
)0 P(
)HR(

)0 2 H(
    Operator Precedence Chart
)EH(
)0 P(
)BQ(

[PENDING: Under Construction.]
 
)QB(
)0 P(
)HR(
)0 P(
)A()2 0 IM()EA(


)WB NL NP(







)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(The Nuts and Bolts of the Java Language)ES()ES()EA(



)0 P(
)HR(

)0 2 H(
    The Standard Output Stream
)EH(
)0 P(
)BQ(

)BQ(
)PR(
class Count {
    public static void main\201String args[]\202
        throws java.io.IOException
    {
        int count = 0;

        while \201System.in.read\201\202 != -1\202
            count++;
        )BD(System.out.println)ES(\201"Input has " + count + " chars."\202;
    }
}    
)RP(
)QB(

You've already seen the System class being used to
read characters from the standard input stream.
The character-counting program also uses the
System class to display its output.
)SM(System.out.println\201\202)ES( displays
its string argument followed by a newline.
)SM(println\201\202)ES( has a companion method
)SM(print\201\202)ES( that displays it argument
with no trailing newline.
To explicitly specify the newline character use )SM(\200n)ES(.
)0 P(
)SM(System.out)ES( implements the )I(standard output stream)ES(.
The standard output stream is a C library concept
that has been assimilated into the Java language. Simply put, a stream is
a flowing buffer of characters; the standard output stream
is a stream that writes its contents to the display.
The standard output stream is a convenient place
for an old-fashioned text-based application to display
its output.

)0 4 H(See Also)EH(
)BQ(
)A()0 7 IM()EA(
)A(java.lang.System)EA()BR(
)A()0 8 IM()EA(
)A(Standard Output and Error Streams)EA( from )I(Using System Resources)ES(
)QB(

)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(The Nuts and Bolts of the Java Language)ES()ES()EA(





)WB NL NP(







)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(The Nuts and Bolts of the Java Language)ES()ES()EA(



)0 P(
)HR(

)0 2 H(
    Character Data
)EH(
)0 P(
)BQ(
 
)BQ(
)PR(
class Count {
    public static void main\201String args[]\202
	throws java.io.IOException
    {
        int count = 0;

        while \201System.in.read\201\202 != -1\202
            count++;
        System.out.println\201)BD("Input has " + count + " chars.")ES(\202;
    }
}    
)RP(
)QB(

In C and C++, strings are simply null-terminated arrays
of characters.  However, in the Java language, strings are
first-class objects--instances of the String class.
Like System, the String class is a member of the java.lang
package.
)0 P(
The character-counting program 
uses Strings in two different places.
The first is in the definition of the )SM(main\201\202)ES( method:
)BQ(
)PR(
    String args[]
)RP(
)QB(
This code explicitly declares an array, named )SM(args)ES(, that
contains String objects. The empty brackets indicate that
the length of the array is unknown at compilation time.

)0 P(
The compiler always allocates a String object when it encounters
a )I(literal string)ES(--a string of characters between double
quotation marks. So the program implicitly allocates two String objects
with ")SM(Input has )ES(" and ")SM( chars.)ES(".

)0 4 H(String Concatenation)EH()EA(
)BQ(
The Java language lets you concatenate strings together easily with the )SM(+)ES(
operator. The example program uses this feature of the Java language to print its
output. The following code snippet concatenates three strings together to produce
its output:
)BQ(
)PR(
"Input has " + count + " chars."
)RP(
)QB(
Two of the strings concatenated together are literal strings: ")SM(Input has )ES("
and ")SM( chars.)ES(" The third string--the one in the middle--is actually an integer that
first gets converted to a string and then concatenated to the others.
)QB(

)0 4 H(See Also)EH(
)BQ(
)A()0 7 IM()EA(
)A(java.lang.String)EA()BR(
)A()0 4 IM()EA(
)A()I(The String and StringBuffer Classes)ES()EA(
)QB(

)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(The Nuts and Bolts of the Java Language)ES()ES()EA(





)WB NL NP(







)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(The Nuts and Bolts of the Java Language)ES()ES()EA(



)0 P(
)HR(

)0 2 H(
    Running the Application
)EH(
)0 P(
)BQ(

Before you can run the application, you must save it to a Java 
source file, and compile it. For more information about saving
a Java source file, and compiling a java program, see the
)A(Saving, Compiling and Running an Application)EA(
)A()0 4 IM()EA(
page in )I(The Anatomy of a Java Application)ES(.
)0 P(
Now, you can )A(run your application)EA( using the Java interpreter.
)0 P(
The output of the character-counting program depends on the input
you enter for it.
When a application reads from the standard input stream, like
the character-counting application does, the application blocks waiting
for you to type something in. The application continues
to wait for input until you give it some indication that the input is complete.
To indicate to any program that reads from the standard input stream
that you have finished entering characters type the )A(end-of-input character)EA(
appropriate for your system at the beginning of a newline.
When the character-counting program receives an end-of-input character it
prints out the number of characters you typed.
)0 P(
In the UNIX example below, the user entered
)BD(This is a test.)ES( and the application displayed
)SM(Input has 16 chars.)ES(
)BQ(
)PR(
)BD(% java Count
This is a test.)ES(
Input has 16 chars.
)RP(
)QB(
At first glance it may appear that the output is incorrect, since
)BD(This is a test.)ES( has only 15 characters. But the user entered
a newline as the 16th character.
)0 P(
If you have any problems, see
)A(Troubleshooting Interpreter Problems)EA(
)A()0 5 IM()EA(.

)0 4 H(See Also)EH(
)BQ(
)A()0 9 IM()EA(
)A(Compiler Man Page)EA()BR(
)A()0 9 IM()EA(
)A(Interpreter Man Page)EA(
)QB(

)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(The Nuts and Bolts of the Java Language)ES()ES()EA(





)WB NL NP(




)A()0 0 IM()EA(
)0 P(
)HR(

)0 2 H(
    Platform-Specific Details: Running a Java Application
)EH(
)0 P(
)BQ(

)DL(
)DT()BD(UNIX)ES(
)DD(
)PR(
% )BD(java Count
This is test.
^D)ES(
Input has 16 chars.
)RP(

)DT()BD(DOS shell \201Windows 95/NT\202)ES(
)DD(
)PR(
C:\200> )BD(java Count
This is test.
^Z)ES(
Input has 17 chars.
)RP(
)LD(

)BD(Note:)ES( The argument to the Java interpreter is 
the name of the class, not the name of a file.
)0 P(
)BD(Note:)ES( the program gives different results for UNIX and 
DOS systems. On UNIX when you press the return key, you get
a single character: )SM(\200n)ES(.
However, on DOS when you press the return key, you get
two characters: )SM(\200r\200n)ES(.

)QB(
)0 P(
)HR(
)0 P(
)A()2 0 IM()EA(


)WB NL NP(




)A()0 0 IM()EA(
)0 P(
)HR(

)0 2 H(
    Platform-Specific Details: The End-of-Input Character
)EH(
)0 P(
)BQ(
 
)DL(
)DT()BD(UNIX)ES(
)DD(
Use the control-D character \201type D while holding down the
control key\202 to indicate to a program reading from the standard
input stream that you have finished entering input.
The control-D character is often written as )SM(^D)ES(.
)BQ(
)PR(
% )BD(java Count
This is a test.
^D)ES(
Input has 16 chars.
)RP(
)QB(

)DT()BD(DOS shell \201Windows 95/NT\202)ES(
)DD(
Use the control-Z character \201type Z while holding down the
control key\202 to indicate to a program reading from the standard
input stream that you have finished entering input.
Or you can press the )SM(F6)ES( key.
The control-Z character is often written as )SM(^Z)ES(.
)BQ(
)PR(
C:\200> )BD(java Count
This is a test.
^Z)ES(
Input has 17 chars.
)RP(
)QB(
)LD(

)BD(Note:)ES( the program gives different results for UNIX and
DOS systems. On UNIX when you press the return key, you get
a single character )SM(\200n)ES(.
However, on DOS when you press the return key, you get
two characters )SM(\200r\200n)ES(.

)QB(
)0 P(
)HR(
)0 P(
)A()2 0 IM()EA(


)WB NL showpage end restore
