%!
%%Title: java.cmdLineArgs.html
%%DocumentFonts: NewCenturySchlbk-Roman NewCenturySchlbk-Bold NewCenturySchlbk-Italic NewCenturySchlbk-BoldItalic Courier Courier-Bold Courier-Oblique Courier-BoldOblique
%%Creator: html2ps 0.2 alpha, written by Jan Karrman, jan@tdb.uu.se
%%EndComments
save
1000 dict begin
/colorimage where {pop} {
 /colorimage {
  pop pop /Bp exch def /Gp exch def /Rp exch def
  {/Re Rp def /Gr Gp def /Bl Bp def
  0 1 Re length 1 sub {
   /i exch def Gr i Re i get 0.299 mul Gr i get 0.587 mul add
   Bl i get 0.114 mul add cvi put
  } for Gr} image
 } def
} ifelse
/D {def} def
/t {true} D
/f {false} D
/RF {/NewCenturySchlbk-Roman} D
/BF {/NewCenturySchlbk-Bold} D
/IF {/NewCenturySchlbk-Italic} D
/IB {/NewCenturySchlbk-BoldItalic} D
/FF {/Courier} D
/FB {/Courier-Bold} D
/FI {/Courier-Oblique} D
/FT {/Courier-BoldOblique} D
/F 1 D
/W {453 F div} D
/LE {651 F div} D
/PS 1 D
/HS [19 17 15 13 12 11] D
/HT [2 2 2 2 2 2] D
/MK 7 D
/NO t D
/ZL f D
/ZR f D
/Zl () D
/Zr () D
/TU f D
/AU t D
/SN 0 D
/LA {TU PM 1 eq and {W 56 F div add 0 translate}
 {70 705 translate F dup scale} ie} D
/FP 0 D
/SG [0.80000000000000004441 1 1] D
statusdict /setduplexmode known
 {statusdict begin false setduplexmode end} if
%-- End of variable part --
/ie {ifelse} D
/E {exch} D
/M {moveto} D
/S {show} D
/R {rmoveto} D
/L {lineto} D
/RL {rlineto} D
/CP {currentpoint} D
/SW {stringwidth} D
/GI {getinterval} D
/PI {putinterval} D
/U {gsave CP currentfont /FontInfo get /UnderlinePosition get
 0 E currentfont /FontMatrix get dtransform E pop add newpath M
 dup SW RL stroke grestore} D
/B {-10 3 R gsave CP newpath 2.5 0 360 arc closepath
 UI 2 mod 0 eq {stroke} {fill} ie grestore 10 -3 R} D
/NP {/PM PN SN sub 2 mod D PN SN gt TU not PM 0 eq or and {showpage} if
 0.6 setlinewidth LA /BP t D /PN PN 1 add D
 /OF currentfont D RF findfont 10 scalefont setfont
 /YO {LE neg 60 F div dup 40 gt {pop 40} if sub} D
 NO {W 2 div YO M PN ST cvs S} if
 ZL {0 YO M Zl S} if
 ZR {W YO M Zr dup stringwidth pop neg 0 R S} if
 OF setfont
 XO SZ SL get neg M /CI 0 D} D
/SF {/CS E D CS SZ SL 3 2 roll put /YI CS -1.2 mul D dup ST cvs C1 E join
 ( NF ) join /C1 E D NF /BW ( ) SW pop D} D
/NF {FL E get findfont CS scalefont setfont} D
/FS {CF MK PF {1 or} if and or /CF E D FR SL CF put CF E SF} D
/FL [RF FF BF FB IF FI IB FT] D
/reencodeISO {
dup dup findfont dup length dict begin
{ 1 index /FID ne { def }{ pop pop } ie } forall
/Encoding ISOLatin1Encoding D
currentdict end definefont
} D
/ISOLatin1Encoding [
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
/parenleft/parenright/asterisk/plus/comma/minus/period/slash
/zero/one/two/three/four/five/six/seven/eight/nine/colon/semicolon
/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N
/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright
/asciicircum/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m
/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/asciitilde
/.notdef/backslash/parenleft/parenright/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/dotlessi/grave/acute/circumflex/tilde/macron/breve
/dotaccent/dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut
/ogonek/caron/space/exclamdown/cent/sterling/currency/yen/brokenbar
/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot
/hyphen/registered/macron/degree/plusminus/twosuperior/threesuperior
/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine
/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute
/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis
/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave
/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex
/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis
/yacute/thorn/ydieresis
] D
FL {reencodeISO D} forall

/BS {/PC E D /TX E D /fin f D /CW 0 D /LK 0 D /SC 0 D
 /RT TX D {RT ( ) search {/NW E D pop /RT E D /WH NW SW pop D CW WH add LL gt
 {TX SC LK SC sub GI PC /SC LK D /CW WH BW add D}
 {/CW CW WH add BW add D} ie
 /LK LK NW length add 1 add D} {pop exit} ie} loop
 /fin t D /LC TX length D /WH RT SW pop D CW WH add LL gt
 {TX SC LK SC sub GI PC NL RT dup () ne {PC} {pop} ie}
 {TX SC LC SC sub GI PC} ie} D

/BT {RS dup dup () ne E ( ) ne and
 {/LS LL D /LL W L1 sub XO sub D {/CI 0 D SH /BP f D fin not {NL} if
  /HM t D /LL LS D} BS} {BG {pop} {SH /BP f D} ie} ie} D
/BL {HM not {CP E pop XO E M} if} D
/NL {BL W XO sub L1 sub TB {BW add} if AT mul 2 div YA neg dup 0 lt {3 sub} if
 R F0 CF ne {F0 NF} if C1 cvx exec /C1 () D /L1 0 D /F0 CF D
 BP not {0 YB NN neg R} if /YA 0 D /YB 0 D CP /YC E D pop XO YC M YC LE neg gt
 {YI CI sub dup 0 lt BP not and {dup 0 E R CI add /CI E D} {pop} ie}
 {NP} ie /T t D} D
/RS {/TM E D /CN 0 D TM
 {dup 9 eq E 10 eq or {TM CN ( ) PI} if
  /CN CN 1 add D} forall /CN 0 D /BK HM EN and {0} {1} ie D TM
 {dup 32 ne {TM CN 3 2 roll put /CN CN 1 add D /BK 0 D}
 {pop BK 0 eq {TM CN 32 put /CN CN 1 add D} if /BK 1 D} ie}
  forall TM 0 CN GI dup dup () ne E ( ) ne and
  {dup CN 1 sub get 32 eq {/EN f D} {/EN t D} ie} if} D
/join {2 copy length E length add string dup 4 2 roll 2 index 0 3 index
 PI E length E PI} bind D
/EG {dup 0 E dup () eq {E pop} {E get} ifelse 10 ne {(\n) E join} if} D
/WR {PB {EG /PB f D} if PP {EG /PP f D} if (\n) search
 {dup () ne BP not or {TR /CI 0 D /NC 0 D NL pop WR}{pop pop WR} ie} {TR} ie} D
/TR {(\t) search {dup length /NC E NC add D SH MS 0 8 NC 8 mod sub dup
 /NC E NC add D GI SH pop TR} {dup length /NC E NC add D SH} ie
 /BP f D} D
/SH {CP E pop LE neg lt {NP} if dup SW pop L1 add /L1 E D
 C1 (\() join T not {( ) join} if E join (\)) join
 AU AF and UF or {( U ) join} if ( S ) join /C1 E D /T t D /TB EN not D} D
/BG {CP pop XO sub abs 0.01 lt} D
/ON {AR AI NN get 1 add dup AR AI 3 -1 roll put ST cvs length dup ST E (. ) PI
 ST 0 3 -1 roll 2 add GI dup SW pop neg 0 R S} D
/SP {YI E /YI E D NL /YI E D} D
/BR {BN} D
/BN {PF {WR} {BT NL} ie /HM f D} D
/AB {CH E 0 E put CH join WB} D
/NN {dup 0 lt {pop 0} if} D
/H  {1 sub /HL E D E BN /AT E D CP E pop LE neg WW add lt {NP} if
 BH SP /SL SL 1 add D HS HL get HT HL get FS} D
/EH {BN /AT 0 D AH SP /SL SL 1 sub NN D /CF 0 D SZ SL get FR SL get FS} D
/P  {E PF {WR /PP t D} {BN AE not {AH SP} if} ie /AT E D} D
/HR {BN 0 CP E pop M gsave PF {0 YI R} if W 0 RL stroke grestore /CI 0 D
 /BP f D NL} D
/AD {BN /AE t D AH SP 4 11 SF} D
/DA {BN /AE f D AH SP 0 11 SF} D
/PR {BN /AT 0 D /CF 0 D 9 PS mul 1 FS /PF t D /PB t D /NC 0 D} D
/PW {pop PR} D
/RP {PF {dup () ne {dup dup length 1 sub get 10 ne {(\n) join} if} if
 WR AH SP /CF 0 D 11 0 FS /PF f D} {BT} ie} D
/SI {/XO AI LG add NN IN mul BC NN BI mul add D /LL W XO sub D} D
/DT {BN /LG LG 1 sub D SI /LG LG 1 add D BL} D
/DD {BN SI BL} D
/DL {BN XO 0 eq {AH SP} if /LG LG 1 add D BL} D
/LD {BN LG 0 gt {/LG LG 1 sub D} if SI XO 0 eq {AH SP} if BL} D
/UL {BN XO 0 eq {AH SP} {NL} ie NR AI NN 0 put /UI UI 1 add D
 /AI AI 1 add D SI BL} D
/LU {BN /UI UI 1 sub D /AI AI 1 sub D SI XO 0 eq {AH SP} {NL} ie BL} D
/OL {BN XO 0 eq {AH SP} {NL} ie NR AI NN 1 put /AI AI 1 add D SI BL} D
/LO {BN AR AI NN 0 put /AI AI 1 sub D SI XO 0 eq {AH SP} {NL} ie BL} D
/LI {BN /BP f D /CI 0 D CP E pop LE neg lt {NP} if
 /C1 C1 NR AI 1 sub NN get 1 eq {( ON )} {( B )} ie join D BL} D
/BQ {BN AH SP /BC BC 1 add D SI BL} D
/QB {BN AH SP /BC BC 1 sub D SI BL} D
/WB {PF {WR} {BT} ie} D
/A  {WB /AF t D} D
/EA {WB /AF f D} D
/SS {SZ SL get /SL SL 1 add D} D
/I  {WB SS 4 FS} D
/BD {WB SS 2 FS} D
/TT {WB SS 1 FS} D
/KB {WB SS /CF 0 D 3 FS} D
/CT {WB SS /CF 0 D 4 FS} D
/SM {WB SS /CF 0 D 1 FS} D
/ES {WB /SL SL 1 sub NN D /CF 0 D SZ SL get FR SL get FS} D
/UN {WB /UF t D} D
/NU {WB /UF f D} D
/SB {0 1 NI {/N E D /K WS N get D /NY AY N get FC N get mul D /BV NY array D
 0 1 NY 1 sub {/TM K string D currentfile TM readhexstring pop pop BV E TM put}
 for BM N BV put} for} D
/colorimage where {pop} {
 /colorimage {
  pop pop /Bp E D /Gp E D /Rp E D
  {/Re Rp D /Gr Gp D /Bl Bp D
  0 1 Re length 1 sub {
   /i E D Gr i Re i get 0.299 mul Gr i get 0.587 mul add Bl i get 0.114 mul add
   cvi put
  } for Gr} image
 } D
} ie
/IP {BV N get /N N 1 add D} D
/II {/K E D /TY E D /XW AX K get D /YW AY K get D /IS SG IT K get get D
 /XS XW IS mul D /YS YW IS mul D YS CS sub TY 2 eq {/MB E D /MA 0 D}
 {TY 2 mod 1 eq {2 div /MA E 2 sub D /MB MA 4 add D}{/MA E D /MB 0 D} ie} ie} D
/IM {II /ty TY D /xs XS D /ys YS D /ya YA D /yb YB D /ma MA D /mb MB D /k K D
 /CI 0 D WB L1 xs add dup /L1 E D XO add W gt
 {NL /YA ma D /YB mb D /YS ys D /L1 xs D}
 {ma YA gt {/YA ma D} if mb YB gt {/YB mb D} if} ie CP E pop YS sub LE neg lt
 {NP /YA ma D /YB mb D /L1 xs D} if /BP f D ty ST cvs ( ) join k ST cvs join
 C1 E join ( DI ) join FP 2 eq FP 1 eq AF and or {( FM ) join} if /C1 E D
 /HM t D /EN f D /T TY 3 eq D} D
/DI {II /YN YW neg D /HM t D /CI 0 D /K2 IX K get D gsave CP MB sub translate
 K2 0 ge {/DP AZ K2 get D /BV BM K2 get D XS YS scale /N 0 D XW YW DP
 [XW 0 0 YN 0 YW] {IP} FC K2 get 1 eq {image} {{IP} {IP} t 3 colorimage} ie}
 {PV K2 neg 1 sub get exec} ie grestore XS 0 R} D
/FM {gsave CP MB sub translate XS neg 0 M 0 YS RL XS 0 RL 0 YS neg RL XS neg
 0 RL stroke grestore} D
/BH -35 D
/AH -28 D
/LL W D
/XO 0 D
/YI 0 D
/CI 0 D
/LG 0 D
/AI 0 D
/UI 0 D
/IN 30 D
/BI 12 D
/WW 50 D
/AR [0 0 0 0 0 0 0 0 0 0] D
/NR [0 0 0 0 0 0 0 0 0 0] D
/FR [0 0 0 0 0 0 0 0 0 0] D
/SZ [0 0 0 0 0 0 0 0 0 0] D
/SL 0 D
/CF 0 D
/BC 0 D
/YA 0 D
/YB 0 D
/F0 0 D
/N 0 D
/AT 0 D
/C1 () D
/C2 () D
/L1 0 D
/L2 0 D
/PN SN D
/MS (        ) D
/CH 1 string D
/ST 6 string D
/HM f D
/PF f D
/EN f D
/TB f D
/UF f D
/PP f D
/AE f D
/AF f D
/BP t D
/T t D
/AX [26 26 26 26 20 20 20 20 32] D
/AY [26 26 26 26 20 20 20 20 32] D
/IX [0 1 2 3 4 5 6 7 8] D
/IT [0 0 0 0 0 0 0 0 0] D
/AZ [8 8 8 8 8 8 8 8 8] D
/WS [26 26 26 26 20 20 20 20 32] D
/FC [3 3 3 3 3 3 3 3 3] D
/NI 8 D
/BM 9 array D
%%EndProlog
SB
a5a5a5a59c9c9c9c9c9c9c94949494948c8c8c8c8c8c84848487c6c6c6c6
bdbdbdbdbdb5b5b5b5b5adadadadada5a5a5a5a59c9ae7e7e7e7e7e7e7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6a5a5a59c9c9c9c9c9c9c9494
9494948c948c8c8c8c8484848484c6c6c6bdbdbdbdbdb5b5b5b5b5adadad
adada5a5a5a5a59c9c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
e7e7e7e7e7e7a5a59c9c9c9c9c9c9c9494949494948c8c8f8c8c8c848487
8487c6c6bdbdbdbdbdb5b5b5b5b5adadadada5a8ada5a5a5a59a9c9ae7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d9e7e7e7e7e7d6e7d6a59c9c9c9c9c
9c9c949494948f9494949c94948c84848484847bc6bdbdbdbdb5bdb5b5b5
b5b5a8adadadb5adada5a5a59c9c9c9ce7e7e7e7e7e7e7e7e7e7e7e7d9e7
e7e7e7e7e7e7e7e7e7e7e7e79c9c9c9c9c9c9c8f9cf7f1f1f7f7f7f7f7f7
e684848784877b7bbdbdbdbdbdb5b5a8bdfcf2f2fcfcfcfcfcfceea59c9a
9c9a9c93e7e7e7e7e7e7e7d9e7fff7f7ffffffffffffffe7e7d6e7d6e7da
9c9c9c9c9c948f8ff1f7d6f7f7f7f7f7f7f7c48484847b847b7bbdbdbdbd
b5b5a8a8f2fcd6fcfcfcfcfcfcfcd29c9c9c9c9c939ce7e7e7e7e7e7d9d9
f7ffdefffffffffffffff4e7e7e7e7e7dae79c9c9c9c8f8f87f7f7e6b1f7
f7f7f7f7f7f79c8784877b7b7b7bbdbdbdb5a8a89afcfceeb9fcfcfcfcfc
fcfcb59a9c9a9c939c93e7e7e7e7d9d9d6ffffffd9ffffffffffffffe7d6
e7d6e7dae7da9c9c9c948f72f1c46f4a87f7f7f7f7f7f7f78c84847b877b
7b7bbdbdb5b5a88cf2d281609afcfcfcfcfcfcfca59c9c9c9a949394e7e7
e7e7d9d3f7f4bdadd6ffffffffffffffe7e7e7e7d6e7dae79c9c9c8f6f8f
ce5f4a8fd6f7f7f7f7f7f7f7877b877b7b7b7b73b5b5b5a8819ad673609a
d6fcfcfcfcfcfcfc9a9c9a9c9494948ce7e7e7d9bdc0debdadc0deffffff
ffffffffd6e7d6e7e7e7e7de9c9c8f7b5e8fd28fd6f7f7f7f7f7f7a0f7e6
84847b7b7b7b737bb5b5a893749ae19ad6fcfcfcfcfcfcaefcee9c9c9c94
93948c8ce7e7d9dab1c0fbc0deffffffffffffd6ffffe7e7e7e7dae7dee7
9c948f7e4a8ff7f7f7f7f7f7f7bb5e0af7f77b7b7b7b7b7b7b73b5b5a88b
609afcfcfcfcfcfcfcc67424fcfc939c939494938c8ce7e7d9bcadc0ffff
ffffffffffdcb179ffffdae7dae7e7dae7de94948f6f4a9df7f7f7f7f1a0
5e0a0a0af7f77b7b7b7b737b7373b5b5a88160a7fcfcfcfcf2ae74242424
fcfc949394938c8c8c8ce7e7d9bdadc0fffffffff7d6b1797979ffffe7da
e7dae7e7dede949487634a8ff7f7f1b15e0a0a0a0a0a0a0a0a0a0a0a7b73
7373b5ad9a7b609afcfcf2b9742424242424242424242424948c8c8ce7e7
d6c6adc0fffff7d9b17979797979797979797979e7dedede948c87634a8f
f7c95e0a0a0a0a0a0a0a0a0a0a0a0a0a73737372adad9a7b609afccd7424
2424242424242424242424248c8c8c84e7e7d6bdadc0ffdbb17979797979
7979797979797979e7dedede948c87634a8ff7e6c4a0630a0a0a0a0a0a0a
0a0a0a0a7373736badad9a7b609afceed2ae7b2424242424242424242424
8c8c8484e7e7d6bdadc0fffff4d6bd7979797979797979797979e7ded6d6
948c87634a7ef7e6c4a79c8f5e0a0a0aa3a7635f637372736b6badad9a7b
608bfceed2bcb5a874242424b8bc7b737b8c84848484e7e7d6bdadbcffff
f4e7e7d9b1797979f7e7c6bdcededed6d6d68c8c87634a6ff7f7f7e6c4a7
a7b15e0ac4bb63636b7373736b6badad9a7b6081fcfcfceed2bcbcb97424
d2c67b7b848484848484e7e7d6c6adbdfffffffff4e7e7d9b179f4dcc6c6
d6d6d6d6d6ce8c8f876f4a5ef7f7f7f7f7d2c4a7a7b1f7ed876b736b736b
6b6bada89a816074fcfcfcfcfce1d2bcbcb9fcf89a8484848484847be7d9
d6bdadb1fffffffffffbf4e7e7d9ffffd6d6d6d6d6d6cece8c8c876b4a4a
f7f7f7f7f7f7e6c4a7bbf7f7a7726b726b6b6b6ba5a59a84605afcfcfcfc
fcfceed2bcc6fcfcbc8c848c84847b7be7e7d6cead96fffffffffffffff4
e7dcffffe7d3d6d3d6cecece8c8f876b4a37f1f7f7f7f7f7f7f7e6e6f7f7
e6736b6b6b6b6b63a5a89a84604ff2fcfcfcfcfcfcfceeeefcfcee848484
847b7b7be7d9d6cead9ff7ffffffffffffffffffffffffd6d6d6cececec6
8c8484724a378fdef7f7f7f7f7f7f7f7f7f7f7876b6b6b6b6363a5a59c8c
604f9adefcfcfcfcfcfcfcfcfcfcfc9a8484847b7b7be7e7e7d3ad9fc0de
ffffffffffffffffffffffd6d6cececec6c68487847250374a374a4a5e6f
7e7e7e7e83878f736b6b6b63635ea59a9c8c684f5a4f5a6074818b8b8b8b
959aa88c847b7b7b7b73e7d6e7d3b89f969f96adb1bdbcbcbcbcc2d6d9de
cececec6c6c68484877b635e4a4a374a4a373737374a4a636b6b6b6b6363
5e63a5a59a937b7460604f605a4f4f4f4f60607b7b84847b7b7b737be7e7
d6dac6b1adad9fad969f9f9f9fadadc6cecececec6c6c6bd8484847b7b6b
6b63635f505f5e505e505f636b6b636363635f5f9c9c9c939384847b7b73
687374687468737b847b7b7b7b7b7373e7e7e7dadad6cec6c6bdb8bdb1b8
b1b8bdc6cececec6c6c6bdbd8487847b7b7b7b73726b6b6b6b6b636b636b
6b6b6363635f5f5f9c9a9c939c93938c8c84848484847b847b7b7b7b7b7b
7b737373e7d6e7dae7dadaded3d6d6d6d6cececececececec6c6c6bdbdbd
84847b7b7b7b7b7373737373736b736b6b6b6b6363635f5f5f5e9c9c939c
9394938c8c8c8c8c84848484847b7b7b7b7b73737374e7e7dae7dae7dade
dedededed6d6d6cecececec6c6bdbdbdbdb1
a5a5a5a59c9c9c9c9c9c9c94949494948c8c8c8c8c8c84848487c6c6c6c6
bdbdbdbdbdb5b5b5b5b5adadadadada5a5a5a5a59c9ae7e7e7e7e7e7e7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6a5a5a59c9c9c9c9c9c9c9494
9494948c948c8c8c8c8484848484c6c6c6bdbdbdbdbdb5b5b5b5b5adadad
adada5a5a5a5a59c9c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
e7e7e7e7e7e7a5a59c9c9c9c9c9c9c9494949494948c8c8c8c8c8c848487
8487c6c6bdbdbdbdbdbdb5b5b5b5adadadadada5a5a5a5a5a59a9c9ae7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6e7d6a59c9c9c9c9c
9ca79ca79c94948f94948f8c8c8c84848484847bc6bdbdbdbdb5bdbcbdbc
b5b5ada8adada8a5a5a5a5a59c9c9c9ce7e7e7e7e7e7e7e7e7e7e7e7e7d9
e7e7d9e7e7e7e7e7e7e7e7e79c9c9c9c9c9c9ce6f7f7f7f7f7f7f1f1f78f
8784848784877b7bbdbdbdbdbdb5b5eefcfcfcfcfcfcf2f2fca89aa59c9a
9c9a9c93e7e7e7e7e7e7e7fffffffffffffff7f7ffd9d6e7e7d6e7d6e7da
9c9c9c9c9c9c94c4f7f7f7f7f7f7f7d6f7ed877b877b7b847b7bbdbdbdbd
b5b5b5d2fcfcfcfcfcfcfcd6fcf89a939a9c9c9c939ce7e7e7e7e7e7e7f4
ffffffffffffffdeffffd6dad6e7e7e7dae79c9c9c9c9c9494a5f7f7f7f7
f7f7f7bbe6f7f1727b7b7b7b7b7bbdbdbdb5b5b5b5c6fcfcfcfcfcfcfcc6
eefcf28c93939c939c93e7e7e7e7e7e7e7e7ffffffffffffffdcfffff7d3
dadae7dae7da9c9c9c9c9494949cf7f7f7f7f7f7f7875e7ec4f16b72877b
7b7bbdbdb5b5b5b5b5b5fcfcfcfcfcfcfc9a748bd2f2848c9a949394e7e7
e7e7e7e7e7e7ffffffffffffffd6b1bcf4f7ced3d6e7dae79c9c9c949494
948cf7f7f7f7f7f7f7d6a0504ad68763737b7b73b5b5b5b5b5b5adadfcfc
fcfcfcfcfcd6ae6860d69a7b8c94948ce7e7e7e7e7e7e7e7ffffffffffff
ffded6b8added6c6dee7e7de9c9c94949494948cf1f7a0f7f7f7f7f7f7e6
bbd283506b73737bb5b5b5b5b5adadadf2fcaefcfcfcfcfcfceec6e19568
848c8c8ce7e7e7e7e7e7e7e7f7ffd6ffffffffffffffdcfbc2b8cededee7
9c9494949494948cf7f70a5ebbf7f7f7f7f7f7f78f4a63737373b5b5b5b5
adadadadfcfc2474c6fcfcfcfcfcfcfc9a607b8c8c8ce7e7e7e7e7e7e7e7
ffff79b1dcffffffffffffffc0adc6dedede94949494948c8c8cf7f70a0a
0a5ea0f1f7f7f7f79d4a5e727373b5b5b5adadadadadfcfc24242474aef2
fcfcfcfca760738c8c8ce7e7e7e7e7e7e7e7ffff797979b1d6f7ffffffff
c0adc6d3dede949494940a0a0a0a0a0a0a0a0a0a0a5eb1f1f7f78f375f6b
7373b5b5adad242424242424242424242474b9f2fcfc9a4f73848c8ce7e7
e7e77979797979797979797979b1d9f7ffffc09fbdd6dede9494948c0a0a
0a0a0a0a0a0a0a0a0a0a0a5ec9f78f4a5f6b7372adadadad242424242424
2424242424242474cdfc9a6073848c84e7e7e7e779797979797979797979
797979b1dbffc0adbdd6dede94948c8c0a0a0a0a0a0a0a0a0a0a0a63a0b1
e6f78f375f6b6b6badadadad24242424242424242424247baec8eefc9a4f
73848484e7e7e7e77979797979797979797979bdd6f9ffffc09fbdd6d6d6
948c948c8c7b5f63a79c0a0a0a5e8f9ca7c4e6f77e375f6b6b6badadada5
a593737bbcb524242474a8b5bcd2eefc8b4f73848484e7e7e7e7e7dabdc6
e7e7797979b1d9e7e7f4ffffbc9fbdced6d68c948c8f847b6f63c4c40a5e
a7a7a7c4e6f7f7f76f375f6b6b6badadada8a593817bd2d22474bcbcbcd2
eefcfcfc814f737b8484e7e7e7d9e7dabdc6f4f479b1e7e7e7f4ffffffff
bd9fbdced6ce8c8c8c8c87847287f1f7b1a7a7c4d2f7f7f7f7f75e4a5e63
6b6badada5a59a9c8c9af2fcb9bcbcd2e1fcfcfcfcfc745a737b847be7e7
e7e7d6e7d3d6f7ffd9e7e7f4fbffffffffffb196c6cecece8c8c8c848487
84c4f7f7a7b1c4e6f7f7f7f7f7f74a4a5f636b6ba5a5a5a5a59a9cd2fcfc
bcc8d2eefcfcfcfcfcfc5a60737b7b7be7e7e7e7e7d6e7f4ffffe7f9f4ff
ffffffffffff96adbdcecece8c8c8c84848487e6f7f7e6f1f7f7f7f7f7f7
f7f137375f636b63a5a5a5a5a59c9aeefcfceef2fcfcfcfcfcfcfcf24f4f
737b7b7be7e7e7e7e7e7d6fffffffff7fffffffffffffff79f9fbdcecec6
8c8c8484878494f7f7f7f7f7f7f7f7f7f7f7de8f374a5f636363a5a5a5a5
9a9cadfcfcfcfcfcfcfcfcfcfcfcde9a4f60737b7b7be7e7e7e7d6e7e7ff
ffffffffffffffffffffdec09fadbdc6c6c68484848484878c9c8f837e7e
7e7e6f5e4a4a3737374a5e63635fa5a5a59c9c9aa5b5a8958b8b8b8b8174
605a4f4f4f60737b7b73e7e7e7e7e7d6e7e7d9c2bcbcbcbcbdb1ad969f9f
9fadc6c6c6bd84848487847b7b7b6b504a373737374a374a374a4a506363
5f63a59c9c9a9c9c939384685a4f4f4f4f5a4f604f6060687b7b737be7e7
e7d6e7e7dadaceb8969f9f9f9f969fad9fadadb8c6c6bdbd84848484847b
7b7b6b635e5f5f5050505e505f5f5f5e63635f5f9c9c9c9c9c939493847b
7373736868687468737373737b7b7373e7e7e7e7e7dae7dad6cec6bdbdb8
b8b8b1b8bdbdbdc6bdbdbdbd8487847b7b7b7b7b7372736b6b6b6b636363
63636363635f5f5f9c9a9c939c9493948c8c8484847b7b7b7b7b7b7b7b7b
7b737373e7d6e7dae7e7dae7ded3d6d6d6cececececec6c6c6c6bdbdbdbd
84847b7b7b7b7b7b73737373736b6b6b6b6b6b6363635f5f5f5e9c9c939c
939494938c8c8c8c848484847b7b7b7b7b7b73737374e7e7dae7dae7e7da
e7dededed6d6d6cecececec6c6bdbdbdbdb1
a5a5a5a59c9c9c9c9c9c9c94949494948c8c8c8c8c8c84848487c6c6c6c6
bdbdbdbdbdb5b5b5b5b5adadadadada5a5a5a5a59c9ae7e7e7e7e7e7e7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6a5a5a59c9c9c9c9c9c9c9494
9494948c948c8c8c8f8487848484c6c6c6bdbdbdbdbdb5b5b5b5b5adadad
adada5a5a8a59a9c9c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
d9e7d6e7e7e7a5a59c9c9c9c9c9c9c9494949494948c8c8c8f848784847b
8784c6c6bdbdbdbdbdb5b5b5b5b5adadadadada5a8a59a9c9c939a9ce7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d9e7d6e7e7dad6e7a59c9c9c9c9c
f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7727b7bc6bdbdbdbdb5fcfcfcfc
fcfcfcfcfcfcfcfcfcfcfcfcfc8c939ce7e7e7e7e7e7ffffffffffffffff
ffffffffffffffffffd3dae79c9c9c9c9cf7f7f7d2d2d2d2edf7f7f7f7ed
d2d2e6f70a5e727bbdbdbdbdbdfcfcfce1e1e1e1f8fcfcfcfcf8e1e1eefc
24738c93e7e7e7e7e7fffffffbfbfbfbfffffffffffffbfbffff79c6d3da
9c9c9c9cf7f7f7c4c4c4c4f7f7f7f7f7f7f7edd2f7204a5e6b7bbdbdbdbd
fcfcfcd2d2d2d2fcfcfcfcfcfcfcf8e1fc3460738493e7e7e7e7fffffff4
f4f4f4fffffffffffffffffbff7fadc6d6da9c9c9cf7f7f7c4d2e6d2eded
e6f7f7f7f7f7f7f70a4a4a5e737bbdbdbdfcfcfcd2e1eee1f8f8eefcfcfc
fcfcfcfc246060738c94e7e7e7fffffff4fbfffbffffffffffffffffffff
79adadc6dee79c9c9c4ae69494636b6b63638c8cb1b17b847b6be64a506b
737bbdbdb560eeb5b57b84847b7badadc8c89ca59c84ee6068848c93e7e7
e7adffe7e7cececececee7e7f9f9e7e7e7d6ffadb8d6deda9c9c9c944ad2
946b6b6363637bb1b1c47ba3b18463d250847373b5b5b5b560e1b584847b
7b7b9cc8c8d294b8c8a57be1689c8c8ce7e7e7e7adfbe7cecec6c6cee7f9
f9f4e7f7f9e7cefbb8efdee79c9c9494944ad28c7b726b638484b1b1a384
84847b4ae65e8473b5b5b5b5b560e1ad938c847b9c9cc8c8b89c9c9c9c60
ee739c8ce7e7e7e7e7adfbe7dad3cecee7eff9f9f7efefefe7adffc6efde
9c9494948cf7f7c4b1d2c4d2f7f7f7f7e6ede6e6d2f74a506373b5b5b5b5
adfcfcd2c8e1d2e1fcfcfcfceef8eeeee1fc60687b8ce7e7e7e7e7fffff4
f9fbf4fbfffffffffffffffffbffadb8cee794949494f7f7d2c4c4d2c4e6
f7f7f7edd2e6f7f7f70a4a506b73b5b5b5adfcfce1d2d2e1d2eefcfcfcf8
e1eefcfcfc246068848ce7e7e7e7fffffbf4f4fbf4fffffffffffbffffff
ff79adb8d6de949494f7f7d2d2c4d2d2c4edf7f7f7f7f7f7f7f7204a4a5e
6b72b5b5adfcfce1e1d2e1e1d2f8fcfcfcfcfcfcfcfc346060738484e7e7
e7fffffbfbf4fbfbf4ffffffffffffffffff7fadadc6d6de9494944ae68c
6b6b6b6363636b727b847b727363d24a50636b72adadad60eea58484847b
7b7b848c939c948c8c7be160687b8484e7e7e7adffe7cececececececed3
dae7e7d3decefbadb8ced6de94948c8c4ad287637b846b63636b84847b73
736b5ee64a5e636badadadad60e19a7b949c847b7b84a59c9c948c8473ee
60737b84e7e7e7e7adfbd6cee7efd6c6c6d6e7efe7e7e7d6c6ffadc6ced6
948c948c8c4ae672848e6363636b7b84847b6b6b5037d2205e63adadadad
a560ee8ca5a87b7b7b849c9ca59c8484684fe134737be7e7e7e7e7adffd3
e7f6cec6c6d6e7e7e7e7d6d6b89ffb7fc6ce8c948c8c8cf7f7d2d2d2d2d2
d2f7f7f7f7e6d2edf7f7204a5063adadada5a5fcfce1e1e1e1e1e1fcfcfc
fceee1f8fcfc3460687be7e7e7e7e7fffffbfbfbfbfbfbfffffffffffbff
ffff7fadb8ce8c8c8c8cf7f7ede6e6d2d2d2e6d2edf7f7d2e6f7f70a3750
5e63adada5a5fcfcf8eeeee1e1e1eee1f8fcfce1eefcfc244f68737be7e7
e7e7fffffffffffbfbfbfffbfffffffbffffff799fb8c6ce8c8c8cf7f7f7
f7f7f7f7e6e6d2d2f7f7f7f7f7f7203750506363a5a5a5fcfcfcfcfcfcfc
eeeee1e1fcfcfcfcfcfc344f68687b7be7e7e7fffffffffffffffffffbfb
ffffffffffff7f9fb8b8cec68c8c8c4ae684b1b1b17b7b63636b638e8e8e
8e7be64a4a5e6363a5a5a560ee9cc8c8c894937b7b847ba8a8a8a89cee60
60737b7be7e7e7adffe7f9f9f9e7daceced6cef6f6f6f6e7ffadadc6c6c6
8c8c84844ad2b1a3b1b173636b8e5e8e8e8e8e847be64a505e63a5a5a5a5
60e1c8b8c8c88c7b84a873a8a8a8a89c9cee6068737be7e7e7e7adfbf9f7
f9f9deced6f6c6f6f6f6f6efe7ffadb8c6c6848484847b4ad2b1a3a37b73
5e5e63636b8e8e8e8463e64a505fa5a5a59c9c60e1c8b8b89c8c73737b7b
84a8a8a89c7bee606873e7e7e7e7e7adfbf9f7f7e7dec6c6c6c6d6f6f6f6
efceffadb8bd848484877b734ad2e6e6e6e6e6e6e6e6e6e6e6e6e6e6d2e6
0a50a59c9c9a938c60e1eeeeeeeeeeeeeeeeeeeeeeeeeeeee1ee2468e7e7
e7d6dadeadfbfffffffffffffffffffffffffffffbff79b88484877b8473
634a4a0a240a0a240a0a240a0a240a0a240a244a9c9c9a9c9c8c7b606024
3a24243a24243a24243a24243a243a60e7e7d6e7e7deceadad798e79798e
79798e79798e79798e798ead848484847b7b735e50504a504a4a504a4a4a
4a374a4a4a4a4a4a9c9c9c9c93948c7368686068606068606060604f6060
60606060e7e7e7e7dae7dec6b8b8adb8adadb8adadadad9fadadadadadad
87847b7b7b7b7b736363635e5e5e5e5e5e505050505050504a509a9c939c
9493938c7b7b7b737373737373686868686868686068d6e7dae7e7dadade
cececec6c6c6c6c6c6b8b8b8b8b8b8b8adb8
a5a5a5a59c9c9c9c9c9c9c94949494948c8c8c8c8c8c84848487c6c6c6c6
bdbdbdbdbdb5b5b5b5b5adadadadada5a5a5a5a59c9ae7e7e7e7e7e7e7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6a5a5a59c9c9c9c9c9c9c9494
9494948c948c8c8c8c8484848484c6c6c6bdbdbdbdbdb5b5b5b5b5adadad
adada5a5a5a5a59c9c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
e7e7e7e7e7e7a5a59c9c9c9c9c9c9c9494949494948c8c8c8c8c8c848487
8487c6c6bdbdbdbdbdb5b5b5b5b5adadadadada5a5a5a5a5a59a9c9ae7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6e7d6a59c9c9c9c9c
9c9c9494949494948c8c8c8c8c8484848484847bc6bdbdbdbdb5b5b5b5b5
b5adadadadada5a5a5a5a5a59c9c9c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7
e7e7e7e7e7e7e7e7e7e7e7e79c9c9c9c8f83634a373720202424374a5e6b
8784848784877b7bbdbdbdbda8957b604f4f34343a3a4f6074849aa5a59a
9c9a9c93e7e7e7e7d9c2bdad9f9f7f7f8e8e9fadb1ced6e7e7d6e7d6e7da
9c9ca06f4a375e72a3d2f1edf1e6b1845f373763877b847b7b7bbdbdae81
604f748cb8e1f2f8f2eec89c734f4f7b9a9c9c9c939ce7e7d6bdad9fb1d3
f7fbf7fff7fff9e7bd9f9fbdd6e7e7e7dae79c9c635094c4d2e6f1f7f7f7
f7f7edf1e6d28e4a5e9ca7947b7bbdbd7b68add2e1eef2fcfcfcfcfcf8f2
eee1a86073b5bcad9493e7e7bdb8e7f4fbfff7fffffffffffff7fffbf6ad
c6e7e7e7e7da9c9c24cef1e6b184370a00001524507284b1d2f1a3f7f7f7
8c7bbdbd3ad6f2eec89c4f2400001c3a688ca5c8e1f2b8fcfcfca594e7e7
8edef7fff9e79f793b3b588eb8d3e7f9fbf7f7ffffffe7e79c9c5e84f74a
000000001500150000001537e6f18e37378ebb7bb5bd749cfc6000000000
1c001c0000001c4feef2a84f4fa8c68ce7e7b1e7ffad3b3b3b3b583b583b
3b3b589ffff7f69f9ff6dce79c9c8f37d2ed8e50240a1515150a204a6bb1
e6c4374a5063d27bb5b5a84fe1f8a8683a241c1c1c24346084c8eed24f60
687be18ce7e7d99ffbfff6b88e79585858797fadd6f9fff49fadb8cefbe7
9c94946f63f7f7f7f7f7f1e6f7f7f7f7e6c4c44a6b7b7bd2bb73b5b5b581
7bfcfcfcfcfcf2eefcfcfcfceed2d260849493e1c68ce7e7e7bdbdffffff
fffff7fffffffffffff4f4adcee7dafbdce79494948f50d2f7f7f7f7f7f7
f7f7d2c4b1b1b1248c94b1f78c73b5b5b5a868e1fcfcfcfcfcfcfcfce1d2
c8c8c83aa5adc8fca58ce7e7e7d9b8fbfffffffffffffffffbf4f9f9f98e
e7e7f9ffe7de9494948c6f72f7f7f7f7f7f7f7f7e6c4b1d2c4a3f7c4bb7b
7373b5b5adad818cfcfcfcfcfcfcfcfceed2c8e1d2b8fcd2c68c8c8ce7e7
e7e7bdd3fffffffffffffffffff4f9fbf4f7fff4dce7dede9494948c8f5f
d2f7f7f7f7f7f7f7e6c4c4d2a38e5e50506b7372adadadada873e1fcfcfc
fcfcfcfceed2d2e1b8a8736868848c84e7e7e7e7d9bdfbffffffffffffff
fff4f4fbf7f6c6b8b8d6dede94948c948c6b73f7f7f7f7f7f7f7e6d2e67b
4a6b506b7372726badadadadad848cfcfcfcfcfcfcfceee1ee9460846884
8c848c84e7e7e7e7e7cedefffffffffffffffffbffe7add6b8d6deded3d6
9494a7c4e6e663d2f7f7f7f7f7f7f7f7d250c4c4b18c73736b6badb5bcd2
eeee7be1fcfcfcfcfcfcfcfce168d2d2c8a58c8c8484e7e7e7f4ffffbdfb
fffffffffffffffffbb8f4f4f9e7deded6d68cc4e6f7f7e66b63a3d2f7f7
f7f7d2a36b4af7e6f7e6c4726b6badd2eefcfcee7b7bb8e1fcfcfcfce1b8
8460fceefceed28c8484e7f4ffffffffcec6f7fbfffffffffbf7d6adffff
fffff4d3d6ce8cd2f7f7f7f1e6a37b5f372424375073a3e6f7f7f7f1c487
6b6bade1fcfcfcf2eeb894734f3a3a4f688cb8eefcfcfcf2d29a847be7fb
fffffff7fff7e7bd9f8e8e9fb8def7fffffffff7f4d6cece8f63c4f1f7f7
f7f7f7f7f7f7f7f7f7ede6d2d2f1e6c4b1506b6ba87bd2f2fcfcfcfcfcfc
fcfcfcfcfcf8eee1e1f2eed2b9687b7bd9bdf4f7ffffffffffffffffffff
fffffffbfbf7fff4d9b8cece8c5f4a73c4e6f7f7f7f7f7f7f7f7d2d2e6e6
e6c4a75e374a6b63a573608cd2eefcfcfcfcfcfcfcfce1e1eeeeeed2bc73
4f607b7be7bdaddef4fffffffffffffffffffbfbfffffff4e7c69fadcec6
8c8c6f4a3737637ba3c4e6e6e6d2d2b18c634a372437506b6363a5a58160
4f4f7b94b8d2eeeeeee1e1c8a57b604f3a4f687b7b7be7e7bdad9f9fc6e7
f7f4fffffffbfbf9e7cead9f8e9fb8cec6c6848484847b6f504a37242424
2024242437374a506b6b6b63635ea5a5a59c938168604f3a3a3a343a3a3a
4f4f60687b847b7b7b73e7e7e7e7dabdb8ad9f8e8e8e7f8e8e8e9f9fadb8
cececec6c6c684848487847b847b7b7b7b737b73737373736b6b6b6b6363
5e63a59c9c9a9c9c9c949494938c8c8c8c8c84848484847b7b7b737be7e7
e7d6e7e7e7e7e7e7dae7e7dededed6d6d6d6cecec6c6c6bd84848484847b
7b7b7b7b7373737373736b6b6b6b636363635f5f9c9c9c9c9c9394939493
8c8c8c8c8c848484847b7b7b7b7b7373e7e7e7e7e7dae7dae7dae7dedede
ded6d6d6cecec6c6c6c6bdbd8487847b7b7b7b7b7b7373737373736b6b6b
6b6b6363635f5f5f9c9a9c939c949394938c8c8c8c8c848484847b7b7b7b
7b737373e7d6e7dae7e7dae7dae7dedededed6d6d6cececec6c6c6bdbdbd
84847b7b7b7b7b7b7373737373736b6b6b6b6b6363635f5f5f5e9c9c939c
939494938c8c8c8c8c848484847b7b7b7b7b73737374e7e7dae7dae7e7da
e7dedededed6d6d6cececec6c6bdbdbdbdb1
a5a5a59c9c9c9c9c94949494948c8c8c8c848484c6c6c6bdbdbdbdb5b5b5
b5adadadada5a5a59c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
a5a79c9c9c9c9c949494848f8c8c8c8c84848784c6bcbdbdbdbdb5b5b5b5
9ca8adada5a5a5a59a9ce7e7e7e7e7e7e7e7e7e7e7d9e7e7e7e7e7e7d6e7
a59c9c9c9c9c949494c44a6f8f8c8c8c84848487c6bdbdbdbdb5b5b5b5d2
6081a8a5a5a5a59c9c9ae7e7e7e7e7e7e7e7e7f4adbdd9e7e7e7e7e7e7d6
9c9c9c9c9c9c9c9c9cd26b637b8c8c848484847bbdbdbdbdbdbdb5b5b5e1
7b639ca5a5a59c9c9c9ce7e7e7e7e7e7e7e7e7fbce63e7e7e7e7e7e7e7e7
9c9c9cf7f7f7f7f7f7f7f7f7f7f7f7f7f7c47b7bbdbdbdfcfcfcfcfcfcfc
fcfcfcfcfcfcfcd29394e7e7e7fffffffffffffffffffffffffffff4dae7
9c9c9c7b5e376320630a00312063376b4a7b7b7bbdbdb593744f63346324
003134634f8460949493e7e7e7dab19f637f637900317f639fceade7e7da
9c9ca7c4c48c8c8f8cd2004a877b8494c4847b7bb5b5bcd2d2adada8ade1
005a9a9c9cadd29c9394e7e7e7f4f4e7e7d9e7fb3b96d6e7e7e7f4e7dae7
9c94a7c4c4a78c8c8ce637637b8784a7a79c7b73b5b5bcd2d2bcadada5ee
4f639c9a9cbcbcb58c8ce7e7e7f4f4e7e7e7e7ff9f63e7d6e7e7e7e7e7de
949cc49ca7c48c8c8ce637208f7b8ca794a77b73b5b5d2bdbcd2a5a5a5ee
4f34a89ca5bcadbc948ce7e7f4e7e7f4e7e7e7ff9f7fd9e7e7e7e7e7e7de
94a7c4949cc4948c87d24a63737ba7a77ba78c73b5bcd2adb5d2ada59ae1
60639494bcbc94bca58ce7e7f4e7e7f4e7e7d6fbad63e7e7e7e7e7e7e7de
94c4c48c8cc4a78484e64a208784bb947ba7a772add2d2ada5d2bca59cee
60349a9cc6ad8cbcbc84e7f4f4e7e7f4e7e7e7ffad7fd6e7dce7e7e7e7de
8cd29c8c8ca7c48c87d25063738cc47b737bc46bade1b5a5a5bcd2a59ae1
686394a5d2948c94d284e7fbe7e7e7e7f4e7d6fbb863e7e7f4e7dee7f4d6
8cf7f1e6d2b173877be637377b9cf7e6d2d2a37badfcf2eee1c88c9a9cee
4f4f94b5fceee1e1b893e7fff7fffbf9ded6e7ff9f9fe7e7fffffbfbf7da
8c8e0a0000004a877bd24a4a73737b0000003163ada8240000005a9a9ce1
60608c8c93000000317be7f6793b000096d6e7fbadaddededa3b000031ce
8c8c7b374a737b7b7bc44a377373735e244a5e63a5a5934f5a779c9c93d2
604f8c8c8c733a60737be7e7da9f9697e7e7daf4ad9fdededec68eadc6ce
8c8c84877b7b7b7b7bd2632073737273736b6363a5a5a59a939c939494e1
7b348c8c8c8484847b7be7e7e7d6dae7dae7e7fbce7fdeded3d6d6cecec6
84848484847b7b84b1f7e63737506b6b6b636363a5a59c9c9c939c9cc8fc
ee4f4f6884847b7b7b7be7e7e7e7e7dae7e7f9ffff9f9fb8d6d6cecec6c6
848487847b73b1f7f7f7d2a38e0a205f6b635e5fa59c9a9c938cc8fcfcfc
e1b8a82434737b7b7373e7e7d6e7dadef9fffffffbf7f6797fbdcec6c6bd
8484847b7b240000000000000000003163635f5f9c9c9c939c3a00000000
0000000000317b7b7373e7e7e7dae78e3b3b0000000000000031cec6bdbd
87847b7b7b7b7b737373736b6b6b6363635f5f5e9a9c939c9393948c8c8c
8484847b7b7b7b737374d6e7dae7dadae7dededed6d6cececec6c6bdbdb1

a5a5a59c9c9c9c9c94949494948c8c8c8c848484c6c6c6bdbdbdbdb5b5b5
b5adadadada5a5a59c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
a5a79c9c9c9c9c94949494948c8c8c8c84848784c6bcbdbdbdbdb5b5b5b5
adadadada5a5a5a59a9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6e7
a59c9c9c9c7e948f737372634a8f6f8484848487c6bdbdbdb58bb5a88c8c
8c7b60a881a5a59c9c9ae7e7e7e7e7bce7d9deded3ceadd9bde7e7e7e7d6
9c9c9c8f72948f8c8ef7f7504a7b84737b877b7bbdbdbda88cada8ada8fc
fc685a939c8c939a9c9ce7e7e7d9d3e7d9e7f6ffffb896dae7dedad6e7e7
9c9c8724edf77b5e6ff7f74a157bf7f7377b847bbdbd9a3af8fc937481fc
fc601c94fcfc4f939c93e7e7d68effffdab1bdffffad58e7ffff9fdae7da
9c9c5e7bf7f7f78ec4f7f7a38ef7f7f7504a7b7bbdbd7493fcfcfca8d2fc
fcb8a8fcfcfc685a9494e7e7b1dafffffff6f4fffff7f6ffffffb896e7e7
9c9c8f4a73f7f7f7f7a3b1f7f7f7f74a00637b7bb5b5a85a8cfcfcfcfcb8
c8fcfcfcfc60007b9394e7e7d996defffffffff7f9ffffffffad3bbddae7
9c948f8f4a7bf7c46b8eb1d2f7f76b15637b7b73b5b5a8a85a93fcd284a8
c8e1fcfc7b1c7b94948ce7e7d9d996dafff4d6f6f9fbffffce58c6e7e7de
94944a8e7bc4f76bc4d2b1f7f7f7a3a3a7947b73b5b55aa893d2fc84d2e1
c8fcfcfcb8b8bcad8c8ce7e796f6daf4ffd6f4fbf9fffffff7f7e7e7e7de
94944af7f7f7a38ed20a00b1f7f7f7f7f7377373b5ad60fcfcfcb8a8e124
00c8fcfcfcfcfc4f8c8ce7e7adfffffff7f6fb793bf9ffffffffff9fdede
949450f7f7f7b1b1b1150ad2f7f7f7f7f7377373adad68fcfcfcc8c8c81c
24e1fcfcfcfcfc4f8c8ce7e7b8fffffff9f9f95879fbffffffffff9fdede
948c20634aa3f7d2e6b1d2f7f7f78e506b0a736badad347b60b8fce1eec8
e1fcfcfca8687b248c84e7e77fc6adf7fffbfff9fbfffffff6b8ce79ded6
8c8c72724a7bf7f7f7f7f7f7f7f76b001515726badad8c8c5a94fcfcfcfc
fcfcfcfc7b001c1c8c84e7e7d3d396e7ffffffffffffffffce3b5858d3d6
8c8c8c6f8cf7f7f7f7f7f7f7f7f7ed5e50726b6bada5a581a5fcfcfcfcfc
fcfcfcfcf873688c847be7e7e7bde7ffffffffffffffffffffc6b8d3d6ce
8c8c6f7bf7f7f76b8ef7f78e7bf7f7f76b506b6ba5a58193fcfcfc84a8fc
fca893fcfcfc8468847be7e7bddaffffffd6f6fffff6daffffffceb8cece
8c8c6f4af7f74a15a3f7f74a0073f7c40a4a6363a5a58160fcfc601cb8fc
fc600084fcd2245a7b7be7e7bdadffffad58f7ffffad3bd6fff47996cec6
84848450374a0072a7f7f76b204a5e2024636363a5a59c684f60008cbcfc
fc7b345a73343a7b7b7be7e7e7b89fad3bd3e7ffffce7f96c67f8ec6c6c6
8484877b3715507b6b4a4a0a206b20206f635e5fa59c9a9c4f1c68938460
602434843434817b7373e7e7d6e79f58b8dad6adad797fd67f7fbdc6c6bd
848484877b7b7b7373737372736b6b6b63635f5f9c9c9c9a9494938c8c8c
8c8c8484847b7b7b7373e7e7e7d6e7e7dae7dededed3d6cececec6c6bdbd
87847b7b7b7b7b737373736b6b6b6b63635f5f5e9a9c9c949394948c8c8c
8484847b7b7b7b737374d6e7e7e7dae7e7dededed6d6cececec6bdbdbdb1

a5a5a59c9c9c9c9c94949494948c8c8c8c848484c6c6c6bdbdbdbdb5b5b5
b5adadadada5a5a59c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
a5a79c9c9c9c9c94949494948c8c8c8c84848784c6bcbdbdbdbdb5b5b5b5
adadadada5a5a5a59a9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6e7
a59c9c9c9c9c94949494948c8c8c8c8c84848487c6bdbdbdbdb5b5b5b5ad
adadada5a5a5a59c9c9ae7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6
9c9c9c835e4a3737373737374a5e7b848784847bbdbdbd95745a4f4f4f4f
4f4f5a7493a59a9c9c9ce7e7e7c2b1969f9f9f9f9f9f96b1dae7d6e7e7e7
9c8f5e4a848ed2f1f7f1f1e6a37b375f84847b7bbda87460a5a8e1f2fcf2
f2eeb8934f739c9c9394e7d9b1ade7f6fbf7fff7f7fff7da9fbde7e7dae7
9c8372d2e6d287372024508cb1c4c4a3e6e69c7bbd958ce1eee19a4f343a
68a5c8d2d2b8eeeeb593e7c2d3fbfffbd69f7f8eb8e7f9f4f4f7ffffe7da
9c9c5ef14a00000000000000006fedb1244ac47bb5bd74f2600000000000
00000081f8c83a60d28ce7e7b1f7ad3b0000000000003bbdfff98eadf4e7
9c946fa3f78c4a37242437508cd2d2374a72d273b5b581b8fca5604f3a3a
4f68a5e1e14f608ce18ce7e7bdf7ffe7ad9f8e8e9fb8e7fbfb9fadd3fbde
94949437f7f7f7f7f7f7f7f7e6d250727bc4bb73b5b5b54ffcfcfcfcfcfc
fcfceee1688c94d2c68ce7e7e79ffffffffffffffffffffbb8d3e7f4dce7
9494945e8ef7f7f7f7f7f7d2b1d28ee6c4a36b73b5adad74a8fcfcfcfcfc
fce1c8e1a8eed2b8848ce7e7e7b1f6fffffffffffffbf9fbf6fff4f7d6de
949494945ff7f7f7f7f7f7e6d2b17b5037507373adadadad73fcfcfcfcfc
fceee1c894684f688c8ce7e7e7e7bdfffffffffffffffbf9e7b89fb8dede
948c9ca57ba3f7f7f7f7f7f7e6636b7b7b73726badadb5c693b8fcfcfcfc
fcfcee7b7b938c8c8484e7e7e7e7daf7ffffffffffffffc6cedae7deded6
8cc4d2f7e650b1f7f7f7f7e68463f1e6c48f6b6badd2e1fcee68c8fcfcfc
fcee9c7bf2eed2a88484e7f4fbffffb8f9ffffffffffe7cef7fff4d9d6d6
8cd2f7f7f7c4845037374a6b8eedf7f7f1a7736bade1fcfcfcd29c684f4f
6084a8f8fcfcf2bc847be7fbfffffff4e7b89f9fadcef6fffffff7e7d6ce
8c5fc4f1f7f7f7f7f7f7f7f7f7f7f1d2a7635f6ba573d2f2fcfcfcfcfcfc
fcfcfcfcf2e1bc7b737be7bdf4f7fffffffffffffffffffff7fbe7c6bdce
8c63376384b1e6e6f1ede6e6b18e7363244a6363a57b4f7b9cc8eeeef2f8
eeeec8a88c7b3a5a7b7be7bd9fc6e7f9fffff7fffffff9f6dece8e96cec6
84847b634a373737373737373724374a5e6b6363a5a5937b604f4f4f4f4f
4f4f4f3a4f60737b7b7be7e7dac6ad9f9f9f9f9f9f9f9f8e9fadc6cec6c6
848484877b847b7b7373737373726b6b6b635e5fa59c9c9a9c9c93948c8c
8c8c848c84847b7b7373e7e7e7d6e7e7dae7dedededed6d3d6cecec6c6bd
8487847b7b7b7b737b7373736b6b6b6363635f5f9c9a9c9c9493948c8c8c
8c8484847b7b7b7b7373e7d6e7e7e7dae7dee7deded6d6d6cec6c6c6bdbd
84847b7b7b7b7b7b7373736b6b6b6363635f5f5e9c9c9c939494938c8c8c
8484847b7b7b7b737374e7e7e7dae7e7dae7deded6d6cececec6c6bdbdb1

a5a5a59c9c9c9c9c94949494948c8c8c8c848484c6c6c6bdbdbdbdb5b5b5
b5adadadada5a5a59c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
a5a79ca5f7a59c9494b1e6e6c49c8c8c84848784c6bcbdc6fcc6b5b5b5c8
eeeed2b5a5a5a5a59a9ce7e7e7e7ffe7e7e7e7f9fffff4e7e7e7e7e7d6e7
a59c9c87b1f1c49c948f8f8ceded7b8484848487c6bdbd9ac8f2d2bdb5a8
a8a5f8f893a5a59c9c9ae7e7e7d6f9f7f4e7e7d9d9e7ffffdae7e7e7e7d6
9c9c9c9c24b1f77294948c8c4a15f7c47b84847bbdbdbdbd3ac8fc8cadad
ada55a1cfcd2939c9c9ce7e7e7e78ef9ffd3e7e7e7e79658fff4dae7e7e7
9c24f79ce6f77b4a8c8c8c8f6f00008e6b7b7b7bbd3afcb5eefc945aa5ad
ada8810000a884939c93e78effe7ffffe796e7e7e7d9bd3b3bf6d6dae7da
9c8f31f7f7e6a324948c8c94d20a0000846b7b7bbda831fcfceeb83ab5a5
a5ade12400009c849494e7d931fffffff78ee7e7e7e7fb79003be7cee7e7
9c9c8c15240a72ed248c94e6f700001524f7b17bb5b5ad1c3a248cf83aa5
adeefc00001c3afcc893e7e7e7588e79d3ff8ee7e7ffff3b00588efff9da
9c9494947220006bd224e6ed1500636b240a4a7bb5b5b5b58c340084e13a
eef81c007b843a246094e7e7e7e7d37f00d6fb8effff583bcece8e79ade7
9494949494a77b0ad2f7f715004a847b7b207b73b5b5b5adadbc9c24e1fc
fc1c00609c949434948ce7e7e7e7e7e7e779fbffff5800ade7e7e77fe7de
949494948c8c72f7f1f72000508e7b7b7b738473b5adadadadad8cfcf2fc
340068a89493948c9c8ce7e7e7e7e7e7d3fff7ff7f00b8f6e7dae7dee7de
9494948c8c8c9cf1f70a0063247b7b7373737373adadadada5a5b5f2fc24
007b3a9493948c8c8c8ce7e7e7e7e7e7e7f7ff7900ce8ee7dae7dededede
948c8c8c8c9cf1e60a000024e6247b737373736badadada5a5b5f2ee2400
003aee3a948c8c8c8484e7e7e7e7e7e7f7ff793b008eff8ee7dededed6d6
8c8c8c8ca7f1d20a005e7b0050f7247373726b6badada5a5bcf2e1240073
940068fc3a8c8c848484e7e7e7e7e7f7fb793bc6e73bb8ff8edededed6d6
8c8c8c9cf1c40a00507b847b0a5ee624736b6b6bada5a5b5f2d22400689c
9c942473ee3a8c84847be7e7e7e7f7f4793bb8e7e7e779c6ff8eded6d6ce
8c8ca7f18e0a004a7b7b7b847b00f7f76350876ba5a5bcf2a82400609494
939c8c00fcfc7b689a7be7e7e7f7f6793bade7e7dae7e73bffffc6b8d6ce
8c9cf1a30a0037847b7b7b738c73f70000848463a5b5f2b824004f9c9394
948ca58cfc00009c9c7be7e7f7f7793b9fe7dae7e7dee7deff0000efe7c6
84724a0a0037847b7b73737373b16b0073e63763a58c6024004f9c93948c
8c8c8cc884008cee4f7be7d3ad793b9fe7dae7dedededef9d600e7ff9fc6
846b15004a877b7b737b7373736b20635e0a155fa5841c00609a94948c8c
8c8c8484347b73241c73e7ce583badd6e7e7dee7deded6d67fcec67958bd
84847b637b847b73737373736b6b63370a24635f9c9c947b939c938c8c8c
8c8484847b4f243a7b73e7e7e7bddae7dae7dededed6d6cec69f798ecebd
87847b7b7b7b7b737373736b6b6b6363635f5f5e9a9c93949493948c8c8c
8484847b7b7b7b737374d6e7dae7e7dae7dededed6d6cececec6c6bdbdb1

ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffffffff5d6ebffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffdf7fbfffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffebaed6ffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffbf007f
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fff5d6ebffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffdf7fbfffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffebd6c2c2d2f5ffff
ffffd6e1fadbc7c2dbfafffffff5d6ebffffffffffffffffbf7f404070df
ffffffff7f9fef8f50408fefffffffdf7fbfffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffd2aeae
c2c2aeb3e6ffffffaebdbdb3c2bdaebdf0ffffebaed6ffffffffffffff70
000040400010afffffff0030301040300030cfffffbf007fffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff0aebdfafffff0b3b8ffffffaeaebdfaffffe1aec2ffffebaed6ffff
ffffffffcf0030efffffcf1020ffffff000030efffff9f0040ffffbf007f
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffebc2e6ffffffffc2aeffffffaeaef5ffffffffccaef0
ffebaed6ffffffffffffbf40afffffffff4000ffffff0000dfffffffff60
00cfffbf007fffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffffffffae6b3aeffffffaeb8ffff
ffffffe1aee6ffebaed6ffffffffffffffffffffffefaf1000ffffff0020
ffffffffff9f00afffbf007fffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffffffffffff0ccbdaeaeaeaeaeff
ffffaec2ffffffffffebaed6ffebaed6ffffffffffffffcf603000000000
00ffffff0040ffffffffffbf007fffbf007fffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffe6aeaec2
d6e1f0c2aeffffffaec2ffffffffffebaedbffebaed6ffffffffffffaf00
00407f9fcf4000ffffff0040ffffffffffbf008fffbf007fffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffbdb3f0ffffffffc2aeffffffaebdffffffffffdbaeebffebaed6ffff
ffffffff3010cfffffffff4000ffffff0030ffffffffff8f00bfffbf007f
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffaec2fffffffffab3aeffffffaeaef5ffffffffc2b3ff
ffebaed6ffffffffffff0040ffffffffef1000ffffff0000dfffffffff40
10ffffbf007fffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffbdb3f0fffff5bdaeaeffffffaeaebdfa
ffffe1aeccffffebaed6ffffffffffff3010cfffffdf300000ffffff0000
30efffff9f0060ffffbf007fffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffe6aeb3c2bdaec2d2aebd
f0ffaeb8b3aec2b3aebdfaffffebaed6ffffffffffffaf00104030004070
0030cfff0020100040100030efffffbf007fffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffebd2c2
d2e6fffaccc7f5ffaec2f5d2c2c7e1fffffffff5d6ebffffffffffffffbf
704070afffef6050dfff0040df7040509fffffffffdf7fbfffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffaec2ffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff0040ffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffaec2ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffff0040ffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffaec2ffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffff0040
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffc2d2ffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffff4070ffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff
0 11 SF
0 LE neg 20 sub M
(





)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(Command Line Arguments)ES()ES()EA(



)0 P(
)HR(

)0 2 H(
    Table Of Contents
)EH(
)0 P(
)BQ(


)UL(
)LI(

)A(Command Line Arguments)EA(
    )UL(
    )LI(
    )A(The Space Character Separates Command Line Arguments)EA(
    )LI(
    )A(Conventions)EA(
    )LI(
    )A(Parsing Command Line Arguments)EA(
    )LU(
)LU(

)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(Command Line Arguments)ES()ES()EA(





)WB NL NP(







)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(Table of Contents)ES()ES()EA(



)0 P(
)HR(

)0 1 H(
     Command Line Arguments
)EH(
)0 P(
)BQ(

Your Java application can accept any number of arguments
from the command line. Command line arguments allow the user to
affect the operation of an application. For example, a program
might allow the user to specify verbose mode--that is, specify that
the application display a lot of trace information--with the
command line argument )SM(-verbose)ES(.
)0 P(
When invoking an application, the user types the command line arguments
after the application name. For example, suppose you had a Java application,
called )SM(Sort)ES(, that sorted lines in a file, and that the data 
you want sorted is in a file named )SM(ListOfFriends)ES(. If you were
using DOS, you would invoke the )SM(Sort)ES( application on your
data file like this:
)BQ(
)PR(
C:\200> )BD(java Sort ListOfFriends)ES(
)RP(
)QB(
In the Java language, when you invoke an application, the runtime system passes the
command line arguments to the application's )SM(main)ES( method via
an array of Strings. Each String in the array contains one of the command
line arguments. In the previous example, the command line arguments passed
to the )SM(Sort)ES( application is an array that contains a single string:
")SM(ListOfFriends)ES(".

)0 4 H(Echo Command Line Arguments)EH(
)BQ(
This simple application displays each of its command line arguments 
on a line by itself:
)BQ(
)PR(
class Echo {
    public static void main \201String args[]\202 {
        for \201int i = 0; i < args.length; i++\202
            System.out.println\201args[i]\202;
    }
}
)RP(
)QB(
)BD(Try this:)ES( Invoke the Echo application with the
command line shown in this DOS example:
)BQ(
)PR(
C:\200> )BD(java Echo Drink Hot Java)ES(
Drink
Hot
Java
)RP(
)QB(
You'll notice that the application displays each word--)SM(Drink)ES(,
)SM(Hot)ES(, and )SM(Java)ES(--on a line by itself. This is because
)A(The Space Character Separates Command Line Arguments)EA(.
)QB(

)0 4 H()A(Conventions)EA(
)EH(
)BQ(
There are several conventions that you should observe when accepting and processing
command line arguments with a Java application.
)QB(

)0 4 H()A(Parsing Command Line Arguments)EA(
)EH(
)BQ(
Most programs accept several command line arguments that allow the user to
affect the execution of the application. For example, the UNIX command that prints
the contents of a directory--the )SM(ls)ES( utility program--accepts arguments
that determine which file attributes to print and the order in which the files are listed.
Typically, the user can specify the command line arguments in any order thereby
requiring the application to )I(parse)ES( them.
)QB(


)HR(
)BD(Note to C and C++ Programmers:)ES(
The command line arguments passed to a Java application differ
in number and in type than those passed to a C or C++ program.
For further information refer to
)A(Java Command Line Arguments Differ from C and C++)EA(
)A()0 4 IM()EA(.
)HR(

)BD(Note to Applet Programmers:)ES(
The runtime system only passes command line
arguments to Java )I(applications)ES(--applets use parameters
instead.  For more information about applet parameters, see
)A(Communicating With the User)EA(
)A()0 5 IM()EA(.
)HR(

)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(Table of Contents)ES()ES()EA(





)WB NL NP(




)0 P(
)HR(

)0 2 H(
    Echo.java
)EH(
)0 P(
)BQ(

)PR(

/*
 * Copyright \201c\202 1994 Sun Microsystems, Inc. All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software
 * and its documentation for NON-COMMERCIAL purposes and without
 * fee is hereby granted provided that this copyright notice
 * appears in all copies. Please refer to the file "copyright.html"
 * for further important copyright and licensing information.
 *
 * SUN MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
 * THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. SUN SHALL NOT BE LIABLE FOR
 * ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR
 * DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 */
class Echo {
    public static void main \201String args[]\202 {
        for \201int i = 0; i < args.length; i++\202
            System.out.println\201args[i]\202;
    }
}
)RP(
)QB(
)0 P(
)HR(
)0 P(


)WB NL NP(







)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(Command Line Arguments)ES()ES()EA(



)0 P(
)HR(

)0 2 H(
    The Space Character Separates Command Line Arguments
)EH(
)0 P(
)BQ(

The system interprets the space character as a separator
for command line arguments. If you want )BD(Drink Hot Java)ES( to be
interpreted as a single argument, you would join them with double quotes \201which
the system consumes\202. On UNIX, you would run it like this:
)BQ(
)PR(
% )BD(java Echo "Drink Hot Java")ES(
Drink Hot Java
)RP(
)QB(

)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(Command Line Arguments)ES()ES()EA(





)WB NL NP(







)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(Command Line Arguments)ES()ES()EA(



)0 P(
)HR(

)0 2 H(
    Conventions for Command Line Arguments
)EH(
)0 P(
)BQ(

The Java language follows UNIX conventions that define three different types of
command line arguments:
)UL(
)LI(
)A(word arguments)EA( \201also known as options\202
)LI(
)A(arguments that require arguments)EA(
)LI(
)A(flags)EA(
)LU(

In addition, your application should observe the following conventions
that apply to Java command line arguments.
)UL(
)LI(
The dash character \201 - \202 precedes options, flags or series of flags.
)LI(
Arguments can be given in any order, except where an argument requires
another argument.
)LI(
Flags can be listed in any order and/or separately: )SM(-xn)ES( )I(or)ES(
)SM(-nx)ES( )I(or)ES( )SM(-x -n)ES(.
)LI(
Filenames typically come last.
)LI(
The program prints a usage error when a command line argument is unrecognized.
Usages statements usually take the form:
)PR(
usage: )I(application_name)ES( [ optional_args ] required_args
)RP(
)LU(


)0 4 H(Word Arguments)EH(
)EA(
)BQ(
Arguments, such as )SM(-verbose)ES(, are )I(word arguments)ES(
and must be specified in their entirety on the command line. For example,
)SM(-ver)ES( would )BD(not)ES( match )SM(-verbose)ES(.
)0 P(
You can use a statement such as the following to check for word arguments.
)BQ(
)PR(
if \201argument.equals\201"-verbose"\202\202
    vflag = true;
)RP(
)QB(
The statement checks for the word argument )SM(-verbose)ES(
and sets a flag within the program indicating that the program
should run in verbose mode.
)QB(


)0 4 H(Arguments that Require Arguments)EH(
)EA(
)BQ(
Some arguments require more information. For example, a command line argument
such as )SM(-output)ES( might allow the user to redirect the output of the
program. However, the )SM(-output)ES( option alone does not provide enough
information to the application: how does the application know where to redirect
its output? Thus, the user must also specify a filename. Typically, the next item on the
command line provides the additional information for command line arguments
that require it. You can use a statement such as the following to parse arguments
that require arguments.
)BQ(
)PR(
if \201argument.equals\201"-output"\202\202 {
    if \201nextarg < args.length\202
        outputfile = args[nextarg++];
    else
        System.err.println\201"-output requires a filename"\202;
}
)RP(
)QB(
Notice that the code snippet checks to make sure that the
user actually specified a next argument before trying to use it.
)QB(
 

)0 4 H(Flags)EH(
)EA(
)BQ(
Flags are single character codes that modify the behaviour of the
program in some way. For example, the )SM(-t)ES( flag provided
to UNIX's )SM(ls)ES( command indicates that the output should
be sorted by time stamp. Most applications allow users to specify
flags separately in any order:
)BQ(
)PR(
-x -n     )I(or)ES(    -n -x
)RP(
)QB(
In addition, to make life easier for users, applications should
also allow users to concatenate flags and specify them in any order:
)BQ(
)PR(
-nx    )I(or)ES(    -xn
)RP(
)QB(
The sample program described on the )A(next page)EA(
implements a simple algorithm to process flag arguments
that can be specified in any order and/or separately.
)QB(

)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(Command Line Arguments)ES()ES()EA(





)WB NL NP(







)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(Command Line Arguments)ES()ES()EA(



)0 P(
)HR(

)0 2 H(
    Parsing Command Line Arguments
)EH(
)0 P(
)BQ(

This )A(program)EA(
provides you with a basis from which
you can build your own command line parser.
It accepts one command line argument of each type:
a word argument, an argument that requires an argument, and two flags.
In addition, this program requires a filename.
Here's the usage statement for this program:
)PR(
usage: ParseCmdLine [-verbose] [-xn] [-output )I(afile)ES(] filename
)RP(
The arguments within square brackets are optional;
the )I(filename)ES( argument is required.
)0 P(
)0 4 H(See Also)EH(
)BQ(
The example program relies heavily on the String and System classes. For more information
about these two classes follow the links below.
)0 P(
)A()0 6 IM()EA(
)A()I(The String and StringBuffer Classes)ES()EA()BR(
)A()0 7 IM()EA(
)A()I(Using System Resources)ES()EA()BR(
)0 P(
)A()0 8 IM()EA(
)A(java.lang.String)EA()BR(
)A()0 8 IM()EA(
)A(java.lang.System)EA()BR(
)QB(

)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(Command Line Arguments)ES()ES()EA(





)WB NL NP(




)0 P(
)HR(

)0 2 H(
    ParseCmdLine.java
)EH(
)0 P(
)BQ(

)PR(

/*
 * Copyright \201c\202 1994 Sun Microsystems, Inc. All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software
 * and its documentation for NON-COMMERCIAL purposes and without
 * fee is hereby granted provided that this copyright notice
 * appears in all copies. Please refer to the file "copyright.html"
 * for further important copyright and licensing information.
 *
 * SUN MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
 * THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. SUN SHALL NOT BE LIABLE FOR
 * ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR
 * DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 */
class ParseCmdLine {
    public static void main\201String args[]\202 {

        int i = 0, j;
        String arg;
        char flag;
        boolean vflag = false;
        String outputfile = "";

        while \201i < args.length && args[i].startsWith\201"-"\202\202 {
            arg = args[i++];

    // use this type of check for "wordy" arguments)WR(
            if \201arg.equals\201"-verbose"\202\202 {
                System.out.println\201"verbose mode on"\202;
                vflag = true;
            }

    // use this type of check for arguments that require arguments
            else if \201arg.equals\201"-output"\202\202 {
                if \201i < args.length\202
                    outputfile = args[i++];
                else
                    System.err.println\201"-output requires a filename"\202;
                if \201vflag\202
                    System.out.println\201"output file = " + outputfile\202;
            }

    // use this type of check for a series of flag arguments
            else {
                for \201j = 1; j < arg.length\201\202; j++\202 {
                    flag = arg.charAt\201j\202;
                    switch \201flag\202 {
                    case 'x':
                        if \201vflag\202 System.out.println\201"Option x"\202;
                        break;
                    case 'n':
                        if \201vflag\202 System.out.println\201"Option n"\202;
                        break;
                    default:
                        System.err.println\201"ParseCmdLine: illegal option " + flag\202;
                        break;
                    })WR(
                }
            }
        }
        if \201i == args.length\202
            System.err.println\201"Usage: ParseCmdLine [-verbose] [-xn] [-output afile] filename"\202;
        else
            System.out.println\201"Success!"\202;
    }
}
)RP(
)QB(
)0 P(
)HR(
)0 P(


)WB NL showpage end restore
