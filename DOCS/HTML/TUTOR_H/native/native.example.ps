%!
%%Title: native.example.html
%%DocumentFonts: NewCenturySchlbk-Roman NewCenturySchlbk-Bold NewCenturySchlbk-Italic NewCenturySchlbk-BoldItalic Courier Courier-Bold Courier-Oblique Courier-BoldOblique
%%Creator: html2ps 0.2 alpha, written by Jan Karrman, jan@tdb.uu.se
%%EndComments
save
1000 dict begin
/colorimage where {pop} {
 /colorimage {
  pop pop /Bp exch def /Gp exch def /Rp exch def
  {/Re Rp def /Gr Gp def /Bl Bp def
  0 1 Re length 1 sub {
   /i exch def Gr i Re i get 0.299 mul Gr i get 0.587 mul add
   Bl i get 0.114 mul add cvi put
  } for Gr} image
 } def
} ifelse
/D {def} def
/t {true} D
/f {false} D
/RF {/NewCenturySchlbk-Roman} D
/BF {/NewCenturySchlbk-Bold} D
/IF {/NewCenturySchlbk-Italic} D
/IB {/NewCenturySchlbk-BoldItalic} D
/FF {/Courier} D
/FB {/Courier-Bold} D
/FI {/Courier-Oblique} D
/FT {/Courier-BoldOblique} D
/F 1 D
/W {453 F div} D
/LE {651 F div} D
/PS 1 D
/HS [19 17 15 13 12 11] D
/HT [2 2 2 2 2 2] D
/MK 7 D
/NO t D
/ZL f D
/ZR f D
/Zl () D
/Zr () D
/TU f D
/AU t D
/SN 0 D
/LA {TU PM 1 eq and {W 56 F div add 0 translate}
 {70 705 translate F dup scale} ie} D
/FP 0 D
/SG [0.80000000000000004441 1 1] D
statusdict /setduplexmode known
 {statusdict begin false setduplexmode end} if
%-- End of variable part --
/ie {ifelse} D
/E {exch} D
/M {moveto} D
/S {show} D
/R {rmoveto} D
/L {lineto} D
/RL {rlineto} D
/CP {currentpoint} D
/SW {stringwidth} D
/GI {getinterval} D
/PI {putinterval} D
/U {gsave CP currentfont /FontInfo get /UnderlinePosition get
 0 E currentfont /FontMatrix get dtransform E pop add newpath M
 dup SW RL stroke grestore} D
/B {-10 3 R gsave CP newpath 2.5 0 360 arc closepath
 UI 2 mod 0 eq {stroke} {fill} ie grestore 10 -3 R} D
/NP {/PM PN SN sub 2 mod D PN SN gt TU not PM 0 eq or and {showpage} if
 0.6 setlinewidth LA /BP t D /PN PN 1 add D
 /OF currentfont D RF findfont 10 scalefont setfont
 /YO {LE neg 60 F div dup 40 gt {pop 40} if sub} D
 NO {W 2 div YO M PN ST cvs S} if
 ZL {0 YO M Zl S} if
 ZR {W YO M Zr dup stringwidth pop neg 0 R S} if
 OF setfont
 XO SZ SL get neg M /CI 0 D} D
/SF {/CS E D CS SZ SL 3 2 roll put /YI CS -1.2 mul D dup ST cvs C1 E join
 ( NF ) join /C1 E D NF /BW ( ) SW pop D} D
/NF {FL E get findfont CS scalefont setfont} D
/FS {CF MK PF {1 or} if and or /CF E D FR SL CF put CF E SF} D
/FL [RF FF BF FB IF FI IB FT] D
/reencodeISO {
dup dup findfont dup length dict begin
{ 1 index /FID ne { def }{ pop pop } ie } forall
/Encoding ISOLatin1Encoding D
currentdict end definefont
} D
/ISOLatin1Encoding [
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
/parenleft/parenright/asterisk/plus/comma/minus/period/slash
/zero/one/two/three/four/five/six/seven/eight/nine/colon/semicolon
/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N
/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright
/asciicircum/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m
/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/asciitilde
/.notdef/backslash/parenleft/parenright/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/dotlessi/grave/acute/circumflex/tilde/macron/breve
/dotaccent/dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut
/ogonek/caron/space/exclamdown/cent/sterling/currency/yen/brokenbar
/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot
/hyphen/registered/macron/degree/plusminus/twosuperior/threesuperior
/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine
/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute
/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis
/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave
/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex
/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis
/yacute/thorn/ydieresis
] D
FL {reencodeISO D} forall

/BS {/PC E D /TX E D /fin f D /CW 0 D /LK 0 D /SC 0 D
 /RT TX D {RT ( ) search {/NW E D pop /RT E D /WH NW SW pop D CW WH add LL gt
 {TX SC LK SC sub GI PC /SC LK D /CW WH BW add D}
 {/CW CW WH add BW add D} ie
 /LK LK NW length add 1 add D} {pop exit} ie} loop
 /fin t D /LC TX length D /WH RT SW pop D CW WH add LL gt
 {TX SC LK SC sub GI PC NL RT dup () ne {PC} {pop} ie}
 {TX SC LC SC sub GI PC} ie} D

/BT {RS dup dup () ne E ( ) ne and
 {/LS LL D /LL W L1 sub XO sub D {/CI 0 D SH /BP f D fin not {NL} if
  /HM t D /LL LS D} BS} {BG {pop} {SH /BP f D} ie} ie} D
/BL {HM not {CP E pop XO E M} if} D
/NL {BL W XO sub L1 sub TB {BW add} if AT mul 2 div YA neg dup 0 lt {3 sub} if
 R F0 CF ne {F0 NF} if C1 cvx exec /C1 () D /L1 0 D /F0 CF D
 BP not {0 YB NN neg R} if /YA 0 D /YB 0 D CP /YC E D pop XO YC M YC LE neg gt
 {YI CI sub dup 0 lt BP not and {dup 0 E R CI add /CI E D} {pop} ie}
 {NP} ie /T t D} D
/RS {/TM E D /CN 0 D TM
 {dup 9 eq E 10 eq or {TM CN ( ) PI} if
  /CN CN 1 add D} forall /CN 0 D /BK HM EN and {0} {1} ie D TM
 {dup 32 ne {TM CN 3 2 roll put /CN CN 1 add D /BK 0 D}
 {pop BK 0 eq {TM CN 32 put /CN CN 1 add D} if /BK 1 D} ie}
  forall TM 0 CN GI dup dup () ne E ( ) ne and
  {dup CN 1 sub get 32 eq {/EN f D} {/EN t D} ie} if} D
/join {2 copy length E length add string dup 4 2 roll 2 index 0 3 index
 PI E length E PI} bind D
/EG {dup 0 E dup () eq {E pop} {E get} ifelse 10 ne {(\n) E join} if} D
/WR {PB {EG /PB f D} if PP {EG /PP f D} if (\n) search
 {dup () ne BP not or {TR /CI 0 D /NC 0 D NL pop WR}{pop pop WR} ie} {TR} ie} D
/TR {(\t) search {dup length /NC E NC add D SH MS 0 8 NC 8 mod sub dup
 /NC E NC add D GI SH pop TR} {dup length /NC E NC add D SH} ie
 /BP f D} D
/SH {CP E pop LE neg lt {NP} if dup SW pop L1 add /L1 E D
 C1 (\() join T not {( ) join} if E join (\)) join
 AU AF and UF or {( U ) join} if ( S ) join /C1 E D /T t D /TB EN not D} D
/BG {CP pop XO sub abs 0.01 lt} D
/ON {AR AI NN get 1 add dup AR AI 3 -1 roll put ST cvs length dup ST E (. ) PI
 ST 0 3 -1 roll 2 add GI dup SW pop neg 0 R S} D
/SP {YI E /YI E D NL /YI E D} D
/BR {BN} D
/BN {PF {WR} {BT NL} ie /HM f D} D
/AB {CH E 0 E put CH join WB} D
/NN {dup 0 lt {pop 0} if} D
/H  {1 sub /HL E D E BN /AT E D CP E pop LE neg WW add lt {NP} if
 BH SP /SL SL 1 add D HS HL get HT HL get FS} D
/EH {BN /AT 0 D AH SP /SL SL 1 sub NN D /CF 0 D SZ SL get FR SL get FS} D
/P  {E PF {WR /PP t D} {BN AE not {AH SP} if} ie /AT E D} D
/HR {BN 0 CP E pop M gsave PF {0 YI R} if W 0 RL stroke grestore /CI 0 D
 /BP f D NL} D
/AD {BN /AE t D AH SP 4 11 SF} D
/DA {BN /AE f D AH SP 0 11 SF} D
/PR {BN /AT 0 D /CF 0 D 9 PS mul 1 FS /PF t D /PB t D /NC 0 D} D
/PW {pop PR} D
/RP {PF {dup () ne {dup dup length 1 sub get 10 ne {(\n) join} if} if
 WR AH SP /CF 0 D 11 0 FS /PF f D} {BT} ie} D
/SI {/XO AI LG add NN IN mul BC NN BI mul add D /LL W XO sub D} D
/DT {BN /LG LG 1 sub D SI /LG LG 1 add D BL} D
/DD {BN SI BL} D
/DL {BN XO 0 eq {AH SP} if /LG LG 1 add D BL} D
/LD {BN LG 0 gt {/LG LG 1 sub D} if SI XO 0 eq {AH SP} if BL} D
/UL {BN XO 0 eq {AH SP} {NL} ie NR AI NN 0 put /UI UI 1 add D
 /AI AI 1 add D SI BL} D
/LU {BN /UI UI 1 sub D /AI AI 1 sub D SI XO 0 eq {AH SP} {NL} ie BL} D
/OL {BN XO 0 eq {AH SP} {NL} ie NR AI NN 1 put /AI AI 1 add D SI BL} D
/LO {BN AR AI NN 0 put /AI AI 1 sub D SI XO 0 eq {AH SP} {NL} ie BL} D
/LI {BN /BP f D /CI 0 D CP E pop LE neg lt {NP} if
 /C1 C1 NR AI 1 sub NN get 1 eq {( ON )} {( B )} ie join D BL} D
/BQ {BN AH SP /BC BC 1 add D SI BL} D
/QB {BN AH SP /BC BC 1 sub D SI BL} D
/WB {PF {WR} {BT} ie} D
/A  {WB /AF t D} D
/EA {WB /AF f D} D
/SS {SZ SL get /SL SL 1 add D} D
/I  {WB SS 4 FS} D
/BD {WB SS 2 FS} D
/TT {WB SS 1 FS} D
/KB {WB SS /CF 0 D 3 FS} D
/CT {WB SS /CF 0 D 4 FS} D
/SM {WB SS /CF 0 D 1 FS} D
/ES {WB /SL SL 1 sub NN D /CF 0 D SZ SL get FR SL get FS} D
/UN {WB /UF t D} D
/NU {WB /UF f D} D
/SB {0 1 NI {/N E D /K WS N get D /NY AY N get FC N get mul D /BV NY array D
 0 1 NY 1 sub {/TM K string D currentfile TM readhexstring pop pop BV E TM put}
 for BM N BV put} for} D
/colorimage where {pop} {
 /colorimage {
  pop pop /Bp E D /Gp E D /Rp E D
  {/Re Rp D /Gr Gp D /Bl Bp D
  0 1 Re length 1 sub {
   /i E D Gr i Re i get 0.299 mul Gr i get 0.587 mul add Bl i get 0.114 mul add
   cvi put
  } for Gr} image
 } D
} ie
/IP {BV N get /N N 1 add D} D
/II {/K E D /TY E D /XW AX K get D /YW AY K get D /IS SG IT K get get D
 /XS XW IS mul D /YS YW IS mul D YS CS sub TY 2 eq {/MB E D /MA 0 D}
 {TY 2 mod 1 eq {2 div /MA E 2 sub D /MB MA 4 add D}{/MA E D /MB 0 D} ie} ie} D
/IM {II /ty TY D /xs XS D /ys YS D /ya YA D /yb YB D /ma MA D /mb MB D /k K D
 /CI 0 D WB L1 xs add dup /L1 E D XO add W gt
 {NL /YA ma D /YB mb D /YS ys D /L1 xs D}
 {ma YA gt {/YA ma D} if mb YB gt {/YB mb D} if} ie CP E pop YS sub LE neg lt
 {NP /YA ma D /YB mb D /L1 xs D} if /BP f D ty ST cvs ( ) join k ST cvs join
 C1 E join ( DI ) join FP 2 eq FP 1 eq AF and or {( FM ) join} if /C1 E D
 /HM t D /EN f D /T TY 3 eq D} D
/DI {II /YN YW neg D /HM t D /CI 0 D /K2 IX K get D gsave CP MB sub translate
 K2 0 ge {/DP AZ K2 get D /BV BM K2 get D XS YS scale /N 0 D XW YW DP
 [XW 0 0 YN 0 YW] {IP} FC K2 get 1 eq {image} {{IP} {IP} t 3 colorimage} ie}
 {PV K2 neg 1 sub get exec} ie grestore XS 0 R} D
/FM {gsave CP MB sub translate XS neg 0 M 0 YS RL XS 0 RL 0 YS neg RL XS neg
 0 RL stroke grestore} D
/BH -35 D
/AH -28 D
/LL W D
/XO 0 D
/YI 0 D
/CI 0 D
/LG 0 D
/AI 0 D
/UI 0 D
/IN 30 D
/BI 12 D
/WW 50 D
/AR [0 0 0 0 0 0 0 0 0 0] D
/NR [0 0 0 0 0 0 0 0 0 0] D
/FR [0 0 0 0 0 0 0 0 0 0] D
/SZ [0 0 0 0 0 0 0 0 0 0] D
/SL 0 D
/CF 0 D
/BC 0 D
/YA 0 D
/YB 0 D
/F0 0 D
/N 0 D
/AT 0 D
/C1 () D
/C2 () D
/L1 0 D
/L2 0 D
/PN SN D
/MS (        ) D
/CH 1 string D
/ST 6 string D
/HM f D
/PF f D
/EN f D
/TB f D
/UF f D
/PP f D
/AE f D
/AF f D
/BP t D
/T t D
/AX [26 26 26 26 20] D
/AY [26 26 26 26 20] D
/IX [0 1 2 3 4] D
/IT [0 0 0 0 0] D
/AZ [8 8 8 8 8] D
/WS [26 26 26 26 20] D
/FC [3 3 3 3 3] D
/NI 4 D
/BM 5 array D
%%EndProlog
SB
a5a5a5a59c9c9c9c9c9c9c94949494948c8c8c8c8c8c84848487c6c6c6c6
bdbdbdbdbdb5b5b5b5b5adadadadada5a5a5a5a59c9ae7e7e7e7e7e7e7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6a5a5a59c9c9c9c9c9c9c9494
9494948c948c8c8c8c8484848484c6c6c6bdbdbdbdbdb5b5b5b5b5adadad
adada5a5a5a5a59c9c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
e7e7e7e7e7e7a5a59c9c9c9c9c9c9c9494949494948c8c8f8c8c8c848487
8487c6c6bdbdbdbdbdb5b5b5b5b5adadadada5a8ada5a5a5a59a9c9ae7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d9e7e7e7e7e7d6e7d6a59c9c9c9c9c
9c9c949494948f9494949c94948c84848484847bc6bdbdbdbdb5bdb5b5b5
b5b5a8adadadb5adada5a5a59c9c9c9ce7e7e7e7e7e7e7e7e7e7e7e7d9e7
e7e7e7e7e7e7e7e7e7e7e7e79c9c9c9c9c9c9c8f9cf7f1f1f7f7f7f7f7f7
e684848784877b7bbdbdbdbdbdb5b5a8bdfcf2f2fcfcfcfcfcfceea59c9a
9c9a9c93e7e7e7e7e7e7e7d9e7fff7f7ffffffffffffffe7e7d6e7d6e7da
9c9c9c9c9c948f8ff1f7d6f7f7f7f7f7f7f7c48484847b847b7bbdbdbdbd
b5b5a8a8f2fcd6fcfcfcfcfcfcfcd29c9c9c9c9c939ce7e7e7e7e7e7d9d9
f7ffdefffffffffffffff4e7e7e7e7e7dae79c9c9c9c8f8f87f7f7e6b1f7
f7f7f7f7f7f79c8784877b7b7b7bbdbdbdb5a8a89afcfceeb9fcfcfcfcfc
fcfcb59a9c9a9c939c93e7e7e7e7d9d9d6ffffffd9ffffffffffffffe7d6
e7d6e7dae7da9c9c9c948f72f1c46f4a87f7f7f7f7f7f7f78c84847b877b
7b7bbdbdb5b5a88cf2d281609afcfcfcfcfcfcfca59c9c9c9a949394e7e7
e7e7d9d3f7f4bdadd6ffffffffffffffe7e7e7e7d6e7dae79c9c9c8f6f8f
ce5f4a8fd6f7f7f7f7f7f7f7877b877b7b7b7b73b5b5b5a8819ad673609a
d6fcfcfcfcfcfcfc9a9c9a9c9494948ce7e7e7d9bdc0debdadc0deffffff
ffffffffd6e7d6e7e7e7e7de9c9c8f7b5e8fd28fd6f7f7f7f7f7f7a0f7e6
84847b7b7b7b737bb5b5a893749ae19ad6fcfcfcfcfcfcaefcee9c9c9c94
93948c8ce7e7d9dab1c0fbc0deffffffffffffd6ffffe7e7e7e7dae7dee7
9c948f7e4a8ff7f7f7f7f7f7f7bb5e0af7f77b7b7b7b7b7b7b73b5b5a88b
609afcfcfcfcfcfcfcc67424fcfc939c939494938c8ce7e7d9bcadc0ffff
ffffffffffdcb179ffffdae7dae7e7dae7de94948f6f4a9df7f7f7f7f1a0
5e0a0a0af7f77b7b7b7b737b7373b5b5a88160a7fcfcfcfcf2ae74242424
fcfc949394938c8c8c8ce7e7d9bdadc0fffffffff7d6b1797979ffffe7da
e7dae7e7dede949487634a8ff7f7f1b15e0a0a0a0a0a0a0a0a0a0a0a7b73
7373b5ad9a7b609afcfcf2b9742424242424242424242424948c8c8ce7e7
d6c6adc0fffff7d9b17979797979797979797979e7dedede948c87634a8f
f7c95e0a0a0a0a0a0a0a0a0a0a0a0a0a73737372adad9a7b609afccd7424
2424242424242424242424248c8c8c84e7e7d6bdadc0ffdbb17979797979
7979797979797979e7dedede948c87634a8ff7e6c4a0630a0a0a0a0a0a0a
0a0a0a0a7373736badad9a7b609afceed2ae7b2424242424242424242424
8c8c8484e7e7d6bdadc0fffff4d6bd7979797979797979797979e7ded6d6
948c87634a7ef7e6c4a79c8f5e0a0a0aa3a7635f637372736b6badad9a7b
608bfceed2bcb5a874242424b8bc7b737b8c84848484e7e7d6bdadbcffff
f4e7e7d9b1797979f7e7c6bdcededed6d6d68c8c87634a6ff7f7f7e6c4a7
a7b15e0ac4bb63636b7373736b6badad9a7b6081fcfcfceed2bcbcb97424
d2c67b7b848484848484e7e7d6c6adbdfffffffff4e7e7d9b179f4dcc6c6
d6d6d6d6d6ce8c8f876f4a5ef7f7f7f7f7d2c4a7a7b1f7ed876b736b736b
6b6bada89a816074fcfcfcfcfce1d2bcbcb9fcf89a8484848484847be7d9
d6bdadb1fffffffffffbf4e7e7d9ffffd6d6d6d6d6d6cece8c8c876b4a4a
f7f7f7f7f7f7e6c4a7bbf7f7a7726b726b6b6b6ba5a59a84605afcfcfcfc
fcfceed2bcc6fcfcbc8c848c84847b7be7e7d6cead96fffffffffffffff4
e7dcffffe7d3d6d3d6cecece8c8f876b4a37f1f7f7f7f7f7f7f7e6e6f7f7
e6736b6b6b6b6b63a5a89a84604ff2fcfcfcfcfcfcfceeeefcfcee848484
847b7b7be7d9d6cead9ff7ffffffffffffffffffffffffd6d6d6cececec6
8c8484724a378fdef7f7f7f7f7f7f7f7f7f7f7876b6b6b6b6363a5a59c8c
604f9adefcfcfcfcfcfcfcfcfcfcfc9a8484847b7b7be7e7e7d3ad9fc0de
ffffffffffffffffffffffd6d6cececec6c68487847250374a374a4a5e6f
7e7e7e7e83878f736b6b6b63635ea59a9c8c684f5a4f5a6074818b8b8b8b
959aa88c847b7b7b7b73e7d6e7d3b89f969f96adb1bdbcbcbcbcc2d6d9de
cececec6c6c68484877b635e4a4a374a4a373737374a4a636b6b6b6b6363
5e63a5a59a937b7460604f605a4f4f4f4f60607b7b84847b7b7b737be7e7
d6dac6b1adad9fad969f9f9f9fadadc6cecececec6c6c6bd8484847b7b6b
6b63635f505f5e505e505f636b6b636363635f5f9c9c9c939384847b7b73
687374687468737b847b7b7b7b7b7373e7e7e7dadad6cec6c6bdb8bdb1b8
b1b8bdc6cececec6c6c6bdbd8487847b7b7b7b73726b6b6b6b6b636b636b
6b6b6363635f5f5f9c9a9c939c93938c8c84848484847b847b7b7b7b7b7b
7b737373e7d6e7dae7dadaded3d6d6d6d6cececececececec6c6c6bdbdbd
84847b7b7b7b7b7373737373736b736b6b6b6b6363635f5f5f5e9c9c939c
9394938c8c8c8c8c84848484847b7b7b7b7b73737374e7e7dae7dae7dade
dedededed6d6d6cecececec6c6bdbdbdbdb1
a5a5a5a59c9c9c9c9c9c9c94949494948c8c8c8c8c8c84848487c6c6c6c6
bdbdbdbdbdb5b5b5b5b5adadadadada5a5a5a5a59c9ae7e7e7e7e7e7e7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6a5a5a59c9c9c9c9c9c9c9494
9494948c948c8c8c8c8484848484c6c6c6bdbdbdbdbdb5b5b5b5b5adadad
adada5a5a5a5a59c9c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
e7e7e7e7e7e7a5a59c9c9c9c9c9c9c9494949494948c8c8c8c8c8c848487
8487c6c6bdbdbdbdbdbdb5b5b5b5adadadadada5a5a5a5a5a59a9c9ae7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6e7d6a59c9c9c9c9c
9ca79ca79c94948f94948f8c8c8c84848484847bc6bdbdbdbdb5bdbcbdbc
b5b5ada8adada8a5a5a5a5a59c9c9c9ce7e7e7e7e7e7e7e7e7e7e7e7e7d9
e7e7d9e7e7e7e7e7e7e7e7e79c9c9c9c9c9c9ce6f7f7f7f7f7f7f1f1f78f
8784848784877b7bbdbdbdbdbdb5b5eefcfcfcfcfcfcf2f2fca89aa59c9a
9c9a9c93e7e7e7e7e7e7e7fffffffffffffff7f7ffd9d6e7e7d6e7d6e7da
9c9c9c9c9c9c94c4f7f7f7f7f7f7f7d6f7ed877b877b7b847b7bbdbdbdbd
b5b5b5d2fcfcfcfcfcfcfcd6fcf89a939a9c9c9c939ce7e7e7e7e7e7e7f4
ffffffffffffffdeffffd6dad6e7e7e7dae79c9c9c9c9c9494a5f7f7f7f7
f7f7f7bbe6f7f1727b7b7b7b7b7bbdbdbdb5b5b5b5c6fcfcfcfcfcfcfcc6
eefcf28c93939c939c93e7e7e7e7e7e7e7e7ffffffffffffffdcfffff7d3
dadae7dae7da9c9c9c9c9494949cf7f7f7f7f7f7f7875e7ec4f16b72877b
7b7bbdbdb5b5b5b5b5b5fcfcfcfcfcfcfc9a748bd2f2848c9a949394e7e7
e7e7e7e7e7e7ffffffffffffffd6b1bcf4f7ced3d6e7dae79c9c9c949494
948cf7f7f7f7f7f7f7d6a0504ad68763737b7b73b5b5b5b5b5b5adadfcfc
fcfcfcfcfcd6ae6860d69a7b8c94948ce7e7e7e7e7e7e7e7ffffffffffff
ffded6b8added6c6dee7e7de9c9c94949494948cf1f7a0f7f7f7f7f7f7e6
bbd283506b73737bb5b5b5b5b5adadadf2fcaefcfcfcfcfcfceec6e19568
848c8c8ce7e7e7e7e7e7e7e7f7ffd6ffffffffffffffdcfbc2b8cededee7
9c9494949494948cf7f70a5ebbf7f7f7f7f7f7f78f4a63737373b5b5b5b5
adadadadfcfc2474c6fcfcfcfcfcfcfc9a607b8c8c8ce7e7e7e7e7e7e7e7
ffff79b1dcffffffffffffffc0adc6dedede94949494948c8c8cf7f70a0a
0a5ea0f1f7f7f7f79d4a5e727373b5b5b5adadadadadfcfc24242474aef2
fcfcfcfca760738c8c8ce7e7e7e7e7e7e7e7ffff797979b1d6f7ffffffff
c0adc6d3dede949494940a0a0a0a0a0a0a0a0a0a0a5eb1f1f7f78f375f6b
7373b5b5adad242424242424242424242474b9f2fcfc9a4f73848c8ce7e7
e7e77979797979797979797979b1d9f7ffffc09fbdd6dede9494948c0a0a
0a0a0a0a0a0a0a0a0a0a0a5ec9f78f4a5f6b7372adadadad242424242424
2424242424242474cdfc9a6073848c84e7e7e7e779797979797979797979
797979b1dbffc0adbdd6dede94948c8c0a0a0a0a0a0a0a0a0a0a0a63a0b1
e6f78f375f6b6b6badadadad24242424242424242424247baec8eefc9a4f
73848484e7e7e7e77979797979797979797979bdd6f9ffffc09fbdd6d6d6
948c948c8c7b5f63a79c0a0a0a5e8f9ca7c4e6f77e375f6b6b6badadada5
a593737bbcb524242474a8b5bcd2eefc8b4f73848484e7e7e7e7e7dabdc6
e7e7797979b1d9e7e7f4ffffbc9fbdced6d68c948c8f847b6f63c4c40a5e
a7a7a7c4e6f7f7f76f375f6b6b6badadada8a593817bd2d22474bcbcbcd2
eefcfcfc814f737b8484e7e7e7d9e7dabdc6f4f479b1e7e7e7f4ffffffff
bd9fbdced6ce8c8c8c8c87847287f1f7b1a7a7c4d2f7f7f7f7f75e4a5e63
6b6badada5a59a9c8c9af2fcb9bcbcd2e1fcfcfcfcfc745a737b847be7e7
e7e7d6e7d3d6f7ffd9e7e7f4fbffffffffffb196c6cecece8c8c8c848487
84c4f7f7a7b1c4e6f7f7f7f7f7f74a4a5f636b6ba5a5a5a5a59a9cd2fcfc
bcc8d2eefcfcfcfcfcfc5a60737b7b7be7e7e7e7e7d6e7f4ffffe7f9f4ff
ffffffffffff96adbdcecece8c8c8c84848487e6f7f7e6f1f7f7f7f7f7f7
f7f137375f636b63a5a5a5a5a59c9aeefcfceef2fcfcfcfcfcfcfcf24f4f
737b7b7be7e7e7e7e7e7d6fffffffff7fffffffffffffff79f9fbdcecec6
8c8c8484878494f7f7f7f7f7f7f7f7f7f7f7de8f374a5f636363a5a5a5a5
9a9cadfcfcfcfcfcfcfcfcfcfcfcde9a4f60737b7b7be7e7e7e7d6e7e7ff
ffffffffffffffffffffdec09fadbdc6c6c68484848484878c9c8f837e7e
7e7e6f5e4a4a3737374a5e63635fa5a5a59c9c9aa5b5a8958b8b8b8b8174
605a4f4f4f60737b7b73e7e7e7e7e7d6e7e7d9c2bcbcbcbcbdb1ad969f9f
9fadc6c6c6bd84848487847b7b7b6b504a373737374a374a374a4a506363
5f63a59c9c9a9c9c939384685a4f4f4f4f5a4f604f6060687b7b737be7e7
e7d6e7e7dadaceb8969f9f9f9f969fad9fadadb8c6c6bdbd84848484847b
7b7b6b635e5f5f5050505e505f5f5f5e63635f5f9c9c9c9c9c939493847b
7373736868687468737373737b7b7373e7e7e7e7e7dae7dad6cec6bdbdb8
b8b8b1b8bdbdbdc6bdbdbdbd8487847b7b7b7b7b7372736b6b6b6b636363
63636363635f5f5f9c9a9c939c9493948c8c8484847b7b7b7b7b7b7b7b7b
7b737373e7d6e7dae7e7dae7ded3d6d6d6cececececec6c6c6c6bdbdbdbd
84847b7b7b7b7b7b73737373736b6b6b6b6b6b6363635f5f5f5e9c9c939c
939494938c8c8c8c848484847b7b7b7b7b7b73737374e7e7dae7dae7e7da
e7dededed6d6d6cecececec6c6bdbdbdbdb1
a5a5a5a59c9c9c9c9c9c9c94949494948c8c8c8c8c8c84848487c6c6c6c6
bdbdbdbdbdb5b5b5b5b5adadadadada5a5a5a5a59c9ae7e7e7e7e7e7e7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6a5a5a59c9c9c9c9c9c9c9494
9494948c948c8c8c8f8487848484c6c6c6bdbdbdbdbdb5b5b5b5b5adadad
adada5a5a8a59a9c9c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
d9e7d6e7e7e7a5a59c9c9c9c9c9c9c9494949494948c8c8c8f848784847b
8784c6c6bdbdbdbdbdb5b5b5b5b5adadadadada5a8a59a9c9c939a9ce7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d9e7d6e7e7dad6e7a59c9c9c9c9c
f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7727b7bc6bdbdbdbdb5fcfcfcfc
fcfcfcfcfcfcfcfcfcfcfcfcfc8c939ce7e7e7e7e7e7ffffffffffffffff
ffffffffffffffffffd3dae79c9c9c9c9cf7f7f7d2d2d2d2edf7f7f7f7ed
d2d2e6f70a5e727bbdbdbdbdbdfcfcfce1e1e1e1f8fcfcfcfcf8e1e1eefc
24738c93e7e7e7e7e7fffffffbfbfbfbfffffffffffffbfbffff79c6d3da
9c9c9c9cf7f7f7c4c4c4c4f7f7f7f7f7f7f7edd2f7204a5e6b7bbdbdbdbd
fcfcfcd2d2d2d2fcfcfcfcfcfcfcf8e1fc3460738493e7e7e7e7fffffff4
f4f4f4fffffffffffffffffbff7fadc6d6da9c9c9cf7f7f7c4d2e6d2eded
e6f7f7f7f7f7f7f70a4a4a5e737bbdbdbdfcfcfcd2e1eee1f8f8eefcfcfc
fcfcfcfc246060738c94e7e7e7fffffff4fbfffbffffffffffffffffffff
79adadc6dee79c9c9c4ae69494636b6b63638c8cb1b17b847b6be64a506b
737bbdbdb560eeb5b57b84847b7badadc8c89ca59c84ee6068848c93e7e7
e7adffe7e7cececececee7e7f9f9e7e7e7d6ffadb8d6deda9c9c9c944ad2
946b6b6363637bb1b1c47ba3b18463d250847373b5b5b5b560e1b584847b
7b7b9cc8c8d294b8c8a57be1689c8c8ce7e7e7e7adfbe7cecec6c6cee7f9
f9f4e7f7f9e7cefbb8efdee79c9c9494944ad28c7b726b638484b1b1a384
84847b4ae65e8473b5b5b5b5b560e1ad938c847b9c9cc8c8b89c9c9c9c60
ee739c8ce7e7e7e7e7adfbe7dad3cecee7eff9f9f7efefefe7adffc6efde
9c9494948cf7f7c4b1d2c4d2f7f7f7f7e6ede6e6d2f74a506373b5b5b5b5
adfcfcd2c8e1d2e1fcfcfcfceef8eeeee1fc60687b8ce7e7e7e7e7fffff4
f9fbf4fbfffffffffffffffffbffadb8cee794949494f7f7d2c4c4d2c4e6
f7f7f7edd2e6f7f7f70a4a506b73b5b5b5adfcfce1d2d2e1d2eefcfcfcf8
e1eefcfcfc246068848ce7e7e7e7fffffbf4f4fbf4fffffffffffbffffff
ff79adb8d6de949494f7f7d2d2c4d2d2c4edf7f7f7f7f7f7f7f7204a4a5e
6b72b5b5adfcfce1e1d2e1e1d2f8fcfcfcfcfcfcfcfc346060738484e7e7
e7fffffbfbf4fbfbf4ffffffffffffffffff7fadadc6d6de9494944ae68c
6b6b6b6363636b727b847b727363d24a50636b72adadad60eea58484847b
7b7b848c939c948c8c7be160687b8484e7e7e7adffe7cececececececed3
dae7e7d3decefbadb8ced6de94948c8c4ad287637b846b63636b84847b73
736b5ee64a5e636badadadad60e19a7b949c847b7b84a59c9c948c8473ee
60737b84e7e7e7e7adfbd6cee7efd6c6c6d6e7efe7e7e7d6c6ffadc6ced6
948c948c8c4ae672848e6363636b7b84847b6b6b5037d2205e63adadadad
a560ee8ca5a87b7b7b849c9ca59c8484684fe134737be7e7e7e7e7adffd3
e7f6cec6c6d6e7e7e7e7d6d6b89ffb7fc6ce8c948c8c8cf7f7d2d2d2d2d2
d2f7f7f7f7e6d2edf7f7204a5063adadada5a5fcfce1e1e1e1e1e1fcfcfc
fceee1f8fcfc3460687be7e7e7e7e7fffffbfbfbfbfbfbfffffffffffbff
ffff7fadb8ce8c8c8c8cf7f7ede6e6d2d2d2e6d2edf7f7d2e6f7f70a3750
5e63adada5a5fcfcf8eeeee1e1e1eee1f8fcfce1eefcfc244f68737be7e7
e7e7fffffffffffbfbfbfffbfffffffbffffff799fb8c6ce8c8c8cf7f7f7
f7f7f7f7e6e6d2d2f7f7f7f7f7f7203750506363a5a5a5fcfcfcfcfcfcfc
eeeee1e1fcfcfcfcfcfc344f68687b7be7e7e7fffffffffffffffffffbfb
ffffffffffff7f9fb8b8cec68c8c8c4ae684b1b1b17b7b63636b638e8e8e
8e7be64a4a5e6363a5a5a560ee9cc8c8c894937b7b847ba8a8a8a89cee60
60737b7be7e7e7adffe7f9f9f9e7daceced6cef6f6f6f6e7ffadadc6c6c6
8c8c84844ad2b1a3b1b173636b8e5e8e8e8e8e847be64a505e63a5a5a5a5
60e1c8b8c8c88c7b84a873a8a8a8a89c9cee6068737be7e7e7e7adfbf9f7
f9f9deced6f6c6f6f6f6f6efe7ffadb8c6c6848484847b4ad2b1a3a37b73
5e5e63636b8e8e8e8463e64a505fa5a5a59c9c60e1c8b8b89c8c73737b7b
84a8a8a89c7bee606873e7e7e7e7e7adfbf9f7f7e7dec6c6c6c6d6f6f6f6
efceffadb8bd848484877b734ad2e6e6e6e6e6e6e6e6e6e6e6e6e6e6d2e6
0a50a59c9c9a938c60e1eeeeeeeeeeeeeeeeeeeeeeeeeeeee1ee2468e7e7
e7d6dadeadfbfffffffffffffffffffffffffffffbff79b88484877b8473
634a4a0a240a0a240a0a240a0a240a0a240a244a9c9c9a9c9c8c7b606024
3a24243a24243a24243a24243a243a60e7e7d6e7e7deceadad798e79798e
79798e79798e79798e798ead848484847b7b735e50504a504a4a504a4a4a
4a374a4a4a4a4a4a9c9c9c9c93948c7368686068606068606060604f6060
60606060e7e7e7e7dae7dec6b8b8adb8adadb8adadadad9fadadadadadad
87847b7b7b7b7b736363635e5e5e5e5e5e505050505050504a509a9c939c
9493938c7b7b7b737373737373686868686868686068d6e7dae7e7dadade
cececec6c6c6c6c6c6b8b8b8b8b8b8b8adb8
a5a5a5a59c9c9c9c9c9c9c94949494948c8c8c8c8c8c84848487c6c6c6c6
bdbdbdbdbdb5b5b5b5b5adadadadada5a5a5a5a59c9ae7e7e7e7e7e7e7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6a5a5a59c9c9c9cf77bf773f7
8794f784f78e8c8c8c8484848484c6c6c6bdbdbdbdfc93fc8cfc9aadfc9c
fca8ada5a5a5a59c9c9ce7e7e7e7e7e7e7ffdaffdeffd6e7ffe7fff6e7e7
e7e7e7e7e7e7a5a59c9c9c9c9cf76bf750f75e94f750f77b8c8c8c848487
8487c6c6bdbdbdbdbdfc84fc68fc73adfc68fc94a5a5a5a5a59a9c9ae7e7
e7e7e7e7e7ffceffb8ffc6e7ffb8ffe7e7e7e7e7e7d6e7d6a59c9c9c9c9c
9cf76bf750f75f8cf750f77b8c8484848484847bc6bdbdbdbdb5b5fc84fc
68fc73adfc68fc93a5a5a5a59c9c9c9ce7e7e7e7e7e7e7ffceffb8ffbde7
ffb8ffdae7e7e7e7e7e7e7e79c9c9c9c9c9c9cf75ef750f75094f750f784
8c84848784877b7bbdbdbdbdbdb5b5fc73fc68fc68adfc68fc9ca5a5a59a
9c9a9c93e7e7e7e7e7e7e7ffc6ffb8ffb8e7ffb8ffe7e7e7e7d6e7d6e7da
9c9c9c9c9c9c94f750f750f7508cf750f784848484847b847b7bbdbdbdbd
b5b5b5fc68fc68fc68adfc68fc9c9ca59c9c9c9c939ce7e7e7e7e7e7e7ff
b8ffb8ffb8e7ffb8ffe7e7e7e7e7e7e7dae79c9c9c9c9c9494f7508450f7
508c8450848e848784877b7b7b7bbdbdbdb5b5b5b5fc689c68fc68ad9c68
9ca89c9a9c9a9c939c93e7e7e7e7e7e7e7ffb8e7b8ffb8e7e7b8e7f6e7d6
e7d6e7dae7da9c9c9c9c949494f750f70a84508cf7f7f75e8484847b877b
7b7bbdbdb5b5b5b5b5fc68fc249c68a5fcfcfc739c9c9c9c9a949394e7e7
e7e7e7e7e7ffb8ff79e7b8e7ffffffc6e7e7e7e7d6e7dae79c9c9c949494
9484f7f7f715508ef7f7f75e84877b7b7b7b7b73b5b5b5b5b5b5ad9cfcfc
fc1c68a8fcfcfc739c9a9c949494948ce7e7e7e7e7e7e7e7ffffff58b8f6
ffffffc6e7d6e7e7e7e7e7de9c9c949494946ff7f7f7f7f71550f7f7f74a
727b7b7b7b7b737bb5b5b5b5b5ad81fcfcfcfcfc1c68fcfcfc608c9c9394
93948c8ce7e7e7e7e7e7bdffffffffff58b8ffffffadd3e7dae7dae7dee7
9c9494947b4a3750f7f7f7f7f715f7f7f724374a63727b7b7b73b5b5b5b5
93604f68fcfcfcfcfc1cfcfcfc3a4f607b8c94938c8ce7e7e7e7daad9fb8
ffffffffff58ffffff8e9fadc6d3e7dae7de949494945e6fb1a324f7f7f7
0a15f7f7f737b17273b1c49c7b73b5b5b5ad7481c8b83afcfcfc241cfcfc
fc4fc88c8cc8d2b5948ce7e7e7e7b1bdf9f78effffff7958ffffff9ff9d3
def9f4e7e7de9494949472e65f0a0a15f7150a0a150a150a6bf1d2f1f7f1
bb73b5b5adad8cee7324241cfc1c24241c241c2484f2e1f2fcf2c68ce7e7
e7e7d3ffbd797958ff58797958795879d6f7fbf7fff7dce79494948c8cf1
630a150a0a0a150a0a150a0a63e6b15e50b1f772adadadada5f27b241c24
24241c24241c24247beec87368c8fc84e7e7e7e7e7f7c679587979795879
79587979c6fff9c6b8f9ffde94948c8c87c4f78c5037200a0a0a0a37508e
edc4a35e73a7e673adadadad9ad2fca5684f34242424244f68a8f8d2b873
8cbcee84e7e7e7e7d6f4ffe7b89f7f797979799fb8f6fff4f7c6dee7ffd6
948c948c7b94f7f7f1d2c4bbbbc4d2e6f1edd2c47b7372f7b16badadadad
93b5fcfcf2e1d2c6c6d2e1eef2f8e1d2949484fcb984e7e7e7e7dae7ffff
f7fbf4dcdcf4fbfff7fffbf4e7e7deffd9d68c948c8c7b6bd2f7f7f7f7f7
f7edede6d2d2d2c4e6f7f7c4736badadada59384e1fcfcfcfcfcfcf8f8ee
e1e1e1d2eefcfcd28c84e7e7e7e7dacefbfffffffffffffffffffbfbfbf4
fffffff4dece8c8c8c8c7b50a7f1f7f7f7f7f7f7e6e6e6d2c48e727b6b6b
636badada5a59368bcf2fcfcfcfcfcfceeeeeee1d2a88494847b7b7be7e7
e7e7dab8e7f7fffffffffffffffffffbf4f6dee7cececece8c8c8c879450
50d2f7f7f7f7f7f7edede6d28e6b374a50636b6ba5a5a59aad6868e1fcfc
fcfcfcfcf8f8eee1a8844f60687b7b7be7e7e7d6e7b8b8fbffffffffffff
fffffffbf6d69fadb8cecece8c8c8794c4c45f24c4f7f7f7f7f7f7e6d2b1
63a7a77b6b636b63a5a59aadd2d2733ad2fcfcfcfcfcfceee1c87bbcbc93
847b7b7be7e7d6e7f4f4bd8ef4fffffffffffffffbf9cee7e7dad6c6cec6
8c8c72c4e6f1e66b5e84a3d2ede6d2b1a36b84f7f7bb725f6363a5a58cd2
eef2ee84739cb8e1f8eee1c8b8849cfcfcc68c737b7be7e7d3f4fff7ffd6
c6e7f7fbfffffbf9f7d6e7ffffdcd3bdc6c684845094e6f7f7f1d28c634a
375f6373a3d2e6d2f7c46337635ea5a568adeefcfcf2e1a57b604f737b8c
b8e1eee1fcd27b4f7b73e7e7b8e7fffffff7fbe7cead9fbdcedef7fbfffb
fff4ce9fc6c684846f5072c4edf1f7f7f7f7f7f7f7e6e6d2d2d2944a3750
5f63a59c81688cd2f8f2fcfcfcfcfcfcfceeeee1e1e1ad604f68737be7e7
bdb8d3f4fff7fffffffffffffffffffbfbfbe7ad9fb8bdbd848484725f4a
4a6b8eb1d2e6e6e6d2c4a38e5037374a50635f5f9c9c9c8c73606084a8c8
e1eeeeeee1d2b8a8684f4f60687b7373e7e7e7d3bdadadd6f6f9fbffffff
fbf4f7f6b89f9fadb8bdbdbd8487847b7b7363504a372424242424243737
4a505e63635f5f5f9c9a9c9c9c8c7b68604f3a3a3a3a3a3a4f4f6068737b
7b737373e7d6e7e7e7deceb8ad9f8e8e8e8e8e8e9f9fadb8c6c6bdbdbdbd
84847b847b7b7b7b737b7b737373736b6b6b6b6363635f5f5f5e9c9c939c
939493948c94948c8c848484847b7b7b7b7b73737374e7e7dae7dae7dae7
dee7e7deded6d6d6cececec6c6bdbdbdbdb1
a5a5a59c9c9c9c9c94949494948c8c8c8c848484c6c6c6bdbdbdbdb5b5b5
b5adadadada5a5a59c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
a5a79c9c9cf7b1f7b1f7b1f7b1f78c8c84848784c6bcbdbdbdfcc8fcc8fc
c8fcc8fca5a5a5a59a9ce7e7e7e7e7fff9fff9fff9fff9ffe7e7e7e7d6e7
a59c9c9c9cf7b1f7b1f7b1f7b1f78c8c84848487c6bdbdbdb5fcc8fcc8fc
c8fcc8fca5a5a59c9c9ae7e7e7e7e7fff9fff9fff9fff9ffe7e7e7e7e7d6
9c9c9c9c9cf7a3f7a3f7a3f7a3f78c848784847bbdbdbdbdb5fcb8fcb8fc
b8fcb8fca5a59a9c9c9ce7e7e7e7e7fff7fff7fff7fff7ffe7e7d6e7e7e7
9c9c9c9c9cf784f784f7846b846b8484847b7b7bbdbdbdb5b5fc9cfc9cfc
9c849c84a59c9c939c93e7e7e7e7e7ffe7ffe7ffe7d6e7d6e7e7e7dae7da
9c9c9c9c94f7734a7373f7f7f75f84877b7b7b7bbdbdb5b5b5fc8460848c
fcfcfc739c9a9c9c9394e7e7e7e7e7ffd6add6deffffffbde7d6e7e7dae7
9c9c9c9494f75ef75e6bf7f7f737847b7b7b7b7bb5b5b5b5adfc73fc737b
fcfcfc4f9c9c93949493e7e7e7e7e7ffc6ffc6ceffffff9fe7e7dae7e7da
9c9494948320f7f7f74af7f7f7155e727b7b7b73b5b5b5ad9534fcfcfc60
fcfcfc1c748c9393948ce7e7e7e7c27fffffffadffffff58b1d3dadae7e7
9494947d6350f7f7f7f76bf7f70037208c947b73b5b5b5896368fcfcfcfc
84fcfc004f34a5ad948ce7e7e7ad63b8ffffffffd6ffff009f7fe7e7e7de
949494638e2e00f7f7f70000000050f7e6e6bb73b5adad7ba81e00fcfcfc
0000000068fceeeec68ce7e7e7bdf61500ffffff003b0000b8ffffffdce7
94948c72d2730000f70000000020b1f7207be673adadad8ce18c0000fc00
00000034c8fc3493ee8ce7e7e7d3fbde3b00ff000000007ff9ff7fdaffde
948c8c6fc4f7b18e502424507bf1f78e6b8cd273adadad81d2fcc8a8683a
3a6894f2fca87ba5e184e7e7e7bdf4fff9f6b88e8eb8e7f7fff6cee7fbd6
8c8c8c5ea3f7f7f1e6e6f1f7f7f7d2c4d2d2946badada574b8fcfcf2eeee
f2fcfcfce1d2e1e1ad84e7e7e7b1f7fffff7fffff7fffffffbf4fbfbe7ce
8c8c8c7215f1f7f7f7f7f7ede6f7b1244a37636bada5a58c1cf2fcfcfcfc
fcf8eefcc83a604f7b7be7e7e7d358f7fffffffffffffffff98ead9fc6ce
8c8c879c720af7f7f7f7f7f7f7b14a7b73636b6ba5a59ab58c24fcfcfcfc
fcfcfcc86094847b847be7e7d6e7d379fffffffffffffff9ade7d6cecece
8c8c7bc4e6a324a3f7f1f7d28424f7e6a06b5f63a5a593d2eeb83ab8fcf2
fce19c3afceeae84737be7e7daf4fff78ef7fff7fffbe78effffd6d6bdc6
84847284d2f7e6c48e6b4a4aa3edf7c48c4a5e63a5a58c9ce1fceed2a884
6060b8f8fcd2a560747be7e7d3e7fbfffff4f6d6adadf7fffff4e7adb1c6
8484876b728ed2e6edf1edf1edb15e374a5f5f5fa59c9a848ca8e1eef8f2
f8f2f8c8734f60737373e7e7d6d6d3f6fbfffff7fff7fff9c69fadbdbdbd
8487847b6b6b504a4a5e5f3737374a5e5e5e5f5f9c9a9c93848468606073
734f4f4f607474737373e7d6e7dad6ceb8adadc6bd9f9f9fadb1b1c6bdbd
84847b7b7b7b7b7373736b6b6b6b63635e635f5e9c9c9c949394948c8c8c
8484847b7b7b737b7374e7e7e7e7dae7e7dededed6d6d6cec6c6c6bdbdb1

0 11 SF
0 LE neg 20 sub M
(





)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(A Comprehensive Example)ES()ES()EA(



)0 P(
)HR(

)0 2 H(
    Table Of Contents
)EH(
)0 P(
)BQ(


)UL(
)LI(
)A(A Comprehensive Example)EA(
)LU(

)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(A Comprehensive Example)ES()ES()EA(





)WB NL NP(







)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(Table of Contents)ES()ES()EA(



)0 P(
)HR(

)0 1 H(
     A Comprehensive Example
)EH(
)0 P(
)BQ(

This lesson in under construction. However, we are making the source code
for the example available for you to look at now. By reading the source and
the comments within the code, you should be able to figure out the example.
In addition, you should be able to figure out how to return values from and
pass values into native methods, and about some of the helper functions and
macros provided by the Java development environment that provide the connection
between the Java language and C.

)0 4 H(The Example)EH(
)BQ(
The example consists of a simple "character-replace" program. You invoke
the program with these command line arguments:
)BQ(
)PR(
)I(char1 char2 inputfile outputfile)ES(
)RP(
)QB(
The )SM(Replace)ES( program reads from )I(inputfile)ES(,
replaces all occurrences of )I(char1)ES( with )I(char2)ES(,
and writes the results to )I(outputfile)ES(.

)QB(

)0 4 H(The Source Files)EH(
)BQ(

)DL(

)DT()A(Replace.java)EA(
)DD( Contains the main program.

)DT()A(File.java)EA(
)DD( Contains the )SM(File)ES( superclass that provides
     provides basic file and path manipulation with the expectation that
     subclasses will provide the actual file management code depending on
     the file semantics they want to present.

)DT()A(InputFile.java)EA(
)DD( Contains the )SM(InputFile)ES( class \201a subclass of )SM(File)ES(\202
     that implements a read-only input file. )BR(
     )BD(Note:)ES( This class has several native methods whose
     implementations are written in the C programming language.

)DT()A(OutputFile.java)EA(
)DD( Contains the )SM(OutputFile)ES( class \201a subclass of )SM(File)ES(\202
     that implements a write-only output file. )BR(
     )BD(Note:)ES( This class has several native methods whose
     implementations are written in the C programming language.

)DT()A(file.c)EA(
)DD( Contains the C implementations for the native methods defined by
     both the )SM(InputFile)ES( and )SM(OutputFile)ES( classes.

)LD(
)QB(

)0 4 H(Files Generated by )SM(javah)ES()EH(
)BQ(
)DL(

)DT()A(File.h)EA(
)DT()A(InputFile.h)EA(
)DT()A(OutputFile.h)EA(
)DD( C header files generated by )SM(javah)ES(.

)DT()A(File.c)EA(
)DT()A(InputFile.c)EA(
)DT()A(OutputFile.c)EA(
)DD( C stub files generated by )SM(javah -stubs)ES(.

)LD(
)QB(

)0 4 H(Instructions)EH(
)OL(
)LI(
Compile the )SM(.java)ES( files into )SM(.class)ES( files using the
Java compiler

)LI(
Compile all of the C code into a dynamically loadable library named "file".
If you don't know how to do this, follow the instructions in
)A(Step 6: Create a Dynamically Loadable Library)EA(
)A()0 4 IM()EA(
in the )I(Step By Step)ES( lesson.

)LI(
Run the program using the Java interpreter.

)LO(

)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(Table of Contents)ES()ES()EA(





)WB NL NP(




)0 P(
)HR(

)0 2 H(
    Replace.java
)EH(
)0 P(
)BQ(

)PR(

/*
 * Copyright \201c\202 1994 Sun Microsystems, Inc. All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software
 * and its documentation for NON-COMMERCIAL purposes and without
 * fee is hereby granted provided that this copyright notice
 * appears in all copies. Please refer to the file "copyright.html"
 * for further important copyright and licensing information.
 *
 * SUN MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
 * THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. SUN SHALL NOT BE LIABLE FOR
 * ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR
 * DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 */
/**
 * This file defines the main test program which instantiates some
 * file objects and then exercises some of their methods. The
 * example implements a Replace object that substitutes one character
 * in the input stream with another character. Both caracters are
 * supplied as arguments to the Replace example.
 */

class Replace {

    public static void Usage\201\202 {
	System.out.println\201"\200nUsage:  java Replace char1 char2 inFile outFile"\202;
    })WR(

    public static void main\201String args[]\202 {
	InputFile	in = null;
        OutputFile	out = null;
    	char		former = 'A';
    	char		latter = 'A';
   	byte		buf[];

	try {
   	    former = args[0].charAt\2010\202;
	} 
        catch \201ArrayIndexOutOfBoundsException e\202 {
	    Usage\201\202;
	    System.out.println\201"you must supply the character to replace\200n"\202;
	    System.exit\201-1\202;
	}

	try {
   	    latter = args[1].charAt\2010\202;
	} 
        catch \201ArrayIndexOutOfBoundsException e\202 {
	    Usage\201\202;
	    System.out.println\201"you must supply the new character\200n"\202;
	    System.exit\201-1\202;
	}

	try {
	    in = new InputFile\201args[2]\202;
	} 
        catch \201ArrayIndexOutOfBoundsException e\202 {)WR(
	    Usage\201\202;
	    System.out.println\201"you must supply the input replacement file\200n"\202;
	    System.exit\201-1\202;
	}

	try {
	    out = new OutputFile\201args[3]\202;
	} 
        catch \201ArrayIndexOutOfBoundsException e\202 {
	    Usage\201\202;
	    System.out.println\201"you must supply the output replacement file\200n"\202;
	    System.exit\201-1\202;
	}

	System.out.println\201"Replacing "+args[0]+" with "+args[1]+" from "+
			   args[2]+" to "+args[3]\202;

	if \201in.open\201\202 == false\202 {
	    System.out.println\201"Unable to open input file "+in.getFileName\201\202\202;
	}

	if \201out.open\201\202 == false\202 {
	    System.out.println\201"Unable to open output file "+out.getFileName\201\202\202;
	}

	buf = new byte[1];
	while \201in.read\201buf, 1\202 == 1\202 {
	    if \201buf[0] == former\202
		buf[0] = \201byte\202latter;
	    if \201out.write\201buf, 1\202 != 1\202 {)WR(
		System.out.println\201"Error writing to "+out.getFileName\201\202\202;
	    }
	}
 	in.close\201\202;
 	out.close\201\202;
    }
}
)RP(
)QB(
)0 P(
)HR(
)0 P(


)WB NL NP(




)0 P(
)HR(

)0 2 H(
    File.java
)EH(
)0 P(
)BQ(

)PR(

/*
 * Copyright \201c\202 1994 Sun Microsystems, Inc. All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software
 * and its documentation for NON-COMMERCIAL purposes and without
 * fee is hereby granted provided that this copyright notice
 * appears in all copies. Please refer to the file "copyright.html"
 * for further important copyright and licensing information.
 *
 * SUN MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
 * THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. SUN SHALL NOT BE LIABLE FOR
 * ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR
 * DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 */
/*
 * The File class defined here is loosely based on the File classes
 * provided as part of the Java base io classes. This File class is
 * an abstract superclass that provides basic file and path manipulation
 * with the expectation that subclasses will provide the actual file
 * management code depending on the file semantics they want to present.
 * For example, read-only input files and read and write output files.
 */

/**
 * The File superclass defines an interface for manipulating path
 * and file names.  
 *)WR(
 */
public
class File {

    /**
     * The file path.
     */
    protected String path;

    /**
     * The class File's notion of a path separator character. This
     * will be the Java path separator. Note that this will be
     * converted to the system dependent path separator at runtime
     * by code in the native library.
     */
    public static final char separatorChar = ':';

    /**
     * The constructor initializes the class with the given path. Note
     * that we use the String class found in the Java core classes.
     *
     */
    public File\201String path\202 {
	if \201path == null\202 {
	    throw new NullPointerException\201\202;
	}
	this.path = path;
    }	

    /**)WR(
     * Get the name of the file, not including the directory path.
     */
    public String getFileName\201\202 {
	int index = path.lastIndexOf\201separatorChar\202;
	return \201index < 0\202 ? path : path.substring\201index + 1\202;
    }

    /**
     * Get the name of the file including the full directory path.
     */
    public String getPath\201\202 {
	return path;
    }
}
)RP(
)QB(
)0 P(
)HR(
)0 P(


)WB NL NP(




)0 P(
)HR(

)0 2 H(
    InputFile.java
)EH(
)0 P(
)BQ(

)PR(

/*
 * Copyright \201c\202 1994 Sun Microsystems, Inc. All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software
 * and its documentation for NON-COMMERCIAL purposes and without
 * fee is hereby granted provided that this copyright notice
 * appears in all copies. Please refer to the file "copyright.html"
 * for further important copyright and licensing information.
 *
 * SUN MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
 * THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. SUN SHALL NOT BE LIABLE FOR
 * ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR
 * DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 */
/*
 * This file extends the File class by adding file manipulation
 * methods creating a read-only input file abstraction. We leverage
 * the path manipulation code provided in the File superclass and
 * extend that code with support for opening and reading files.
 */

/**
 * Define class InputFile that presents a simple read-only input file 
 * abstraction. Note that we use native or non-Java methods to
 * implement some of the methods.
 */
public)WR(
class InputFile extends File {

    /**
     * Link in the native library that we depend on.  If we cannot
     * link this in, an exception is generated and the class loading
     * fails. We have arbitrarily named the library "file" at the
     * Java level \201or libfile.so at the solaris level\202. Additionally,
     * the System call is part of the static initializer for the class.
     * Thus, the library is loaded as part of this class being loaded.
     */
    static {
	try {
            System.loadLibrary\201"file"\202;
	} catch \201UnsatisfiedLinkError e\202 {
            System.out.println\201"can't find your library"\202;
            System.exit\201-1\202;
        }

    }

    /**
     * Holds the system dependent handle to the file resource.
     */
    protected int fd;

    /**
     * Constructor for the input file object. Initializes the
     * parent class with the path name.
     */
    public InputFile\201String path\202 {)WR(
	super\201path\202;
    }

    /**
     * Attempts to open the file for reading. Returns
     * TRUE on success and FALSE on failure. Alternatively, we could
     * throw an exception and catch it.
     */
    public native boolean open\201\202;

    /**
     * Attempts to close the previously opened file. Has
     * no return value.
     */
    public native void close\201\202;

    /**
     * Reads some number of bytes from the opened file. Returns
     * the number of bytes read or -1 when the file is empty.
     */
    public native int read\201byte b[], int len\202;
}
)RP(
)QB(
)0 P(
)HR(
)0 P(


)WB NL NP(




)0 P(
)HR(

)0 2 H(
    OutputFile.java
)EH(
)0 P(
)BQ(

)PR(

/*
 * Copyright \201c\202 1994 Sun Microsystems, Inc. All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software
 * and its documentation for NON-COMMERCIAL purposes and without
 * fee is hereby granted provided that this copyright notice
 * appears in all copies. Please refer to the file "copyright.html"
 * for further important copyright and licensing information.
 *
 * SUN MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
 * THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. SUN SHALL NOT BE LIABLE FOR
 * ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR
 * DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 */
/*
 * This file defines class OutputFile which implementa a write-only
 * output file abstraction. Like class InputFile, class OutputFile
 * subclasses of class File to obtain simple file and path name
 * functions.
 */

/**
 * This class defines a simple write-only file by extending class File.
 */
public
class OutputFile extends File {
)WR(
    /**
     * Link in the native library that this class depends on. We
     * bind this class loading to the library loading by making the
     * System.loadLibrary\201\202 call part of the static initializer for
     * the class. That is, if the loadLibary\201\202 call fails this class
     * fails to load.
     */
    static {
	try {
            System.loadLibrary\201"file"\202;
        } catch \201UnsatisfiedLinkError e\202 {
            System.out.println\201"can't find your library"\202;
            System.exit\201-1\202;
        }

    }

    /**
     * Holds the system dependent handle to the file resource.
     */
    protected int fd;

    /**
     * Constructor for the output file object. Initializes the
     * parent class with the path name.
     */
    public OutputFile\201String path\202 {
	super\201path\202;
    }
)WR(
    /**
     * Attempts to open the file for writing. If the file does not
     * exist one is created. Returns TRUE on success and FALSE on 
     * failure.
     */
    public native boolean open\201\202;

    /**
     * Attempts to close the previously opened file. Has
     * no return value.
     */
    public native void close\201\202;

    /**
     * Writes some number of bytes to the opened file. Returns
     * the number of bytes written.
     */
    public native int write\201byte b[], int len\202;
}
)RP(
)QB(
)0 P(
)HR(
)0 P(


)WB NL NP(




)0 P(
)HR(

)0 2 H(
    file.c
)EH(
)0 P(
)BQ(

)PR(

/*
 * Copyright \201c\202 1994 Sun Microsystems, Inc. All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software
 * and its documentation for NON-COMMERCIAL purposes and without
 * fee is hereby granted provided that this copyright notice
 * appears in all copies. Please refer to the file "copyright.html"
 * for further important copyright and licensing information.
 *
 * SUN MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
 * THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. SUN SHALL NOT BE LIABLE FOR
 * ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR
 * DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 */
/*
 * This file includes the native code used to implement methods for
 * the File, InputFile and OutputFile classes. Specifically, classes
 * InputFile and OutputFile have native methods that interact with
 * the underlying system.
 *
 * The prototype for the non-static functions are found in the JAVAH
 * generated header file for the class. Also, the JAVAH generated
 * stubfile takes care of marshalling the function parameters from
 * the JAVA world into the C world.
 *
 * First off, we need to include the JAVA internal header files
 * for macros and function prototypes required to manipulate JAVA)WR(
 * data structures and functions.
 *
 * StubPreamble.h includes the structure and macro definitions needed
 * to convert JAVA data structures into C data structures. For
 * example, macros such as "unhand" are defined in StubPreamble.h.
 *
 * javaString.h defines the JAVA string maniuplation macros and
 * routines needed to convert between JAVA and C strings.
 */


/*
 * These headers are special in that they are generated by JAVAH. These
 * include the C structure definitions for the JAVA classes.
 */


/*
 * These are some standard Unix headers we use to implement our system
 * dependent native methods.
 */


/*
 * Here we define constants used by this module. In our case we need
 * to define our local path separator, because it is different from the
 * one used in JAVA. Note that JAVA's version path separator is
 * defined in the JAVAH generated header files.
 */
#define	LOCAL_PATH_SEPARATOR	'/')WR(


/*
 * static void
 * convertPath\201char *\202
 *
 * This function provides C string path conversions from those
 * separated by the File separator character to the system defined
 * one.
 */
static void
convertPath\201char *str\202
{
    while \201*str != '\2000'\202 {
	if \201\201*str == InputFile_separatorChar\202 ||
	    \201*str == OutputFile_separatorChar\202\202 {
	    *str = LOCAL_PATH_SEPARATOR;
	}
	str++;
    }
    return;
}


/*
 * long
 * InputFile_open\201struct HInputFile *\202
 *
 * This function implements the native method open in class InputFile
 * This fact is evidenced by the name. The function name is derived by)WR(
 * concatenating the package name with the class name with the method name.
 * The semantics for this method are defined in the class file.
 *
 * The parameter to this function can be thought of as a "handle to
 * a InputFile object." The actual makeup of this is the data portion
 * of the class followed by the method table for the class.
 */
long 
InputFile_open\201struct HInputFile *this\202
{
    int		fd;
    char	buf[MAXPATHLEN];

    /*
     * We need to convert JAVA path string into a C string and
     * then change it to a system dependent path string.
     * Note that "unhand" gets the data portion of the handle to
     * the C representation of the JAVA class InputFile.
     */
    javaString2CString\201unhand\201this\202->path, buf, sizeof\201buf\202\202;
    convertPath\201buf\202;

    /*
     * Now we actually call the system dependent routines to implement
     * the method. Note that we could throw an exception via
     * SignalError\201\202 instead of returning a boolean.
     */
    fd = open\201buf, O_RDONLY\202;
    if \201fd < 0\202
        return\201FALSE\202;)WR(

    /*
     * On success we store the system fd into the class variable for
     * future calls to this library.
     */
    unhand\201this\202->fd = fd;
    return\201TRUE\202;
}


/*
 * void
 * InputFile_close\201struct HInputFile *\202
 *
 * Implements the close method for class InputFile.
 */
void 
InputFile_close\201struct HInputFile *this\202
{
     close\201unhand\201this\202->fd\202;
     unhand\201this\202->fd = -1;
     return;
}


/*
 * long 
 * InputFile_read\201struct HInputFile *, HArrayOfByte *, long \202
 *
 * Implements the read method for class InputFile.)WR(
 */
long 
InputFile_read\201struct HInputFile *this, 
		    HArrayOfByte *buffer, 
		    long count\202
{
    /*
     * We use another macro here called obj_length which returns the
     * length of an JAVA array object. Again, unhand of the Array
     * object gets us the data structure portion of the object.
     */
    char *data	= unhand\201buffer\202->body;
    int  len	= obj_length\201buffer\202;
    int  actual;

    if \201len < count\202 {
	actual = len;
    }
    else {
	actual = count;
    }
    actual = read\201unhand\201this\202->fd, data, actual\202;
    if \201actual == 0\202
	return\201-1\202;
    return\201actual\202;
}


/*
 * long )WR(
 * OutputFile_open\201struct HOutputFile *\202
 *
 * Implements the open method for class OutputFile.
 * It is virually identical to InputFile_open. Please, refer to the
 * comments for that function for more information.
 */
long 
OutputFile_open\201struct HOutputFile *this\202
{
    int		fd;
    char	buf[MAXPATHLEN];

    javaString2CString\201unhand\201this\202->path, buf, sizeof\201buf\202\202;
    convertPath\201buf\202;
    fd = open\201buf, O_RDWR|O_CREAT|O_TRUNC, 0644\202;
    if \201fd < 0\202
        return\201FALSE\202;
    unhand\201this\202->fd = fd;
    return\201TRUE\202;
}


/*
 * void 
 * OutputFile_close\201struct HOutputFile *\202
 *
 * Implements the close method for class OutputFile.
 */
void 
OutputFile_close\201struct HOutputFile *this\202)WR(
{
    close\201unhand\201this\202->fd\202;
    unhand\201this\202->fd = -1;
    return;
}


/*
 * long 
 * OutputFile_write\201struct HOutputFile *, HArrayOfByte *, long \202
 *
 * Implements the write method for class OutputFile.
 */
long 
OutputFile_write\201struct HOutputFile *this, 
		      HArrayOfByte *buffer, 
		      long count\202
{
    char *data	= unhand\201buffer\202->body;
    int  len	= obj_length\201buffer\202;
    int  actual;

    if \201len < count\202 {
	actual = len;
    }
    else {
	actual = count;
    }
    actual = write\201unhand\201this\202->fd, data, actual\202;
    return\201actual\202;)WR(
}
)RP(
)QB(
)0 P(
)HR(
)0 P(


)WB NL showpage end restore
