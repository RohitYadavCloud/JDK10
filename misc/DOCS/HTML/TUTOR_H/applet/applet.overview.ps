%!
%%Title: applet.overview.html
%%DocumentFonts: NewCenturySchlbk-Roman NewCenturySchlbk-Bold NewCenturySchlbk-Italic NewCenturySchlbk-BoldItalic Courier Courier-Bold Courier-Oblique Courier-BoldOblique
%%Creator: html2ps 0.2 alpha, written by Jan Karrman, jan@tdb.uu.se
%%EndComments
save
1000 dict begin
/colorimage where {pop} {
 /colorimage {
  pop pop /Bp exch def /Gp exch def /Rp exch def
  {/Re Rp def /Gr Gp def /Bl Bp def
  0 1 Re length 1 sub {
   /i exch def Gr i Re i get 0.299 mul Gr i get 0.587 mul add
   Bl i get 0.114 mul add cvi put
  } for Gr} image
 } def
} ifelse
/D {def} def
/t {true} D
/f {false} D
/RF {/NewCenturySchlbk-Roman} D
/BF {/NewCenturySchlbk-Bold} D
/IF {/NewCenturySchlbk-Italic} D
/IB {/NewCenturySchlbk-BoldItalic} D
/FF {/Courier} D
/FB {/Courier-Bold} D
/FI {/Courier-Oblique} D
/FT {/Courier-BoldOblique} D
/F 1 D
/W {453 F div} D
/LE {651 F div} D
/PS 1 D
/HS [19 17 15 13 12 11] D
/HT [2 2 2 2 2 2] D
/MK 7 D
/NO t D
/ZL f D
/ZR f D
/Zl () D
/Zr () D
/TU f D
/AU t D
/SN 0 D
/LA {TU PM 1 eq and {W 56 F div add 0 translate}
 {70 705 translate F dup scale} ie} D
/FP 0 D
/SG [0.80000000000000004441 1 1] D
statusdict /setduplexmode known
 {statusdict begin false setduplexmode end} if
%-- End of variable part --
/ie {ifelse} D
/E {exch} D
/M {moveto} D
/S {show} D
/R {rmoveto} D
/L {lineto} D
/RL {rlineto} D
/CP {currentpoint} D
/SW {stringwidth} D
/GI {getinterval} D
/PI {putinterval} D
/U {gsave CP currentfont /FontInfo get /UnderlinePosition get
 0 E currentfont /FontMatrix get dtransform E pop add newpath M
 dup SW RL stroke grestore} D
/B {-10 3 R gsave CP newpath 2.5 0 360 arc closepath
 UI 2 mod 0 eq {stroke} {fill} ie grestore 10 -3 R} D
/NP {/PM PN SN sub 2 mod D PN SN gt TU not PM 0 eq or and {showpage} if
 0.6 setlinewidth LA /BP t D /PN PN 1 add D
 /OF currentfont D RF findfont 10 scalefont setfont
 /YO {LE neg 60 F div dup 40 gt {pop 40} if sub} D
 NO {W 2 div YO M PN ST cvs S} if
 ZL {0 YO M Zl S} if
 ZR {W YO M Zr dup stringwidth pop neg 0 R S} if
 OF setfont
 XO SZ SL get neg M /CI 0 D} D
/SF {/CS E D CS SZ SL 3 2 roll put /YI CS -1.2 mul D dup ST cvs C1 E join
 ( NF ) join /C1 E D NF /BW ( ) SW pop D} D
/NF {FL E get findfont CS scalefont setfont} D
/FS {CF MK PF {1 or} if and or /CF E D FR SL CF put CF E SF} D
/FL [RF FF BF FB IF FI IB FT] D
/reencodeISO {
dup dup findfont dup length dict begin
{ 1 index /FID ne { def }{ pop pop } ie } forall
/Encoding ISOLatin1Encoding D
currentdict end definefont
} D
/ISOLatin1Encoding [
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
/parenleft/parenright/asterisk/plus/comma/minus/period/slash
/zero/one/two/three/four/five/six/seven/eight/nine/colon/semicolon
/less/equal/greater/question/at/A/B/C/D/E/F/G/H/I/J/K/L/M/N
/O/P/Q/R/S/T/U/V/W/X/Y/Z/bracketleft/backslash/bracketright
/asciicircum/underscore/quoteleft/a/b/c/d/e/f/g/h/i/j/k/l/m
/n/o/p/q/r/s/t/u/v/w/x/y/z/braceleft/bar/braceright/asciitilde
/.notdef/backslash/parenleft/parenright/.notdef/.notdef/.notdef/.notdef
/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
/.notdef/dotlessi/grave/acute/circumflex/tilde/macron/breve
/dotaccent/dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut
/ogonek/caron/space/exclamdown/cent/sterling/currency/yen/brokenbar
/section/dieresis/copyright/ordfeminine/guillemotleft/logicalnot
/hyphen/registered/macron/degree/plusminus/twosuperior/threesuperior
/acute/mu/paragraph/periodcentered/cedilla/onesuperior/ordmasculine
/guillemotright/onequarter/onehalf/threequarters/questiondown
/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex
/Idieresis/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis
/multiply/Oslash/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute
/Thorn/germandbls/agrave/aacute/acircumflex/atilde/adieresis
/aring/ae/ccedilla/egrave/eacute/ecircumflex/edieresis/igrave
/iacute/icircumflex/idieresis/eth/ntilde/ograve/oacute/ocircumflex
/otilde/odieresis/divide/oslash/ugrave/uacute/ucircumflex/udieresis
/yacute/thorn/ydieresis
] D
FL {reencodeISO D} forall

/BS {/PC E D /TX E D /fin f D /CW 0 D /LK 0 D /SC 0 D
 /RT TX D {RT ( ) search {/NW E D pop /RT E D /WH NW SW pop D CW WH add LL gt
 {TX SC LK SC sub GI PC /SC LK D /CW WH BW add D}
 {/CW CW WH add BW add D} ie
 /LK LK NW length add 1 add D} {pop exit} ie} loop
 /fin t D /LC TX length D /WH RT SW pop D CW WH add LL gt
 {TX SC LK SC sub GI PC NL RT dup () ne {PC} {pop} ie}
 {TX SC LC SC sub GI PC} ie} D

/BT {RS dup dup () ne E ( ) ne and
 {/LS LL D /LL W L1 sub XO sub D {/CI 0 D SH /BP f D fin not {NL} if
  /HM t D /LL LS D} BS} {BG {pop} {SH /BP f D} ie} ie} D
/BL {HM not {CP E pop XO E M} if} D
/NL {BL W XO sub L1 sub TB {BW add} if AT mul 2 div YA neg dup 0 lt {3 sub} if
 R F0 CF ne {F0 NF} if C1 cvx exec /C1 () D /L1 0 D /F0 CF D
 BP not {0 YB NN neg R} if /YA 0 D /YB 0 D CP /YC E D pop XO YC M YC LE neg gt
 {YI CI sub dup 0 lt BP not and {dup 0 E R CI add /CI E D} {pop} ie}
 {NP} ie /T t D} D
/RS {/TM E D /CN 0 D TM
 {dup 9 eq E 10 eq or {TM CN ( ) PI} if
  /CN CN 1 add D} forall /CN 0 D /BK HM EN and {0} {1} ie D TM
 {dup 32 ne {TM CN 3 2 roll put /CN CN 1 add D /BK 0 D}
 {pop BK 0 eq {TM CN 32 put /CN CN 1 add D} if /BK 1 D} ie}
  forall TM 0 CN GI dup dup () ne E ( ) ne and
  {dup CN 1 sub get 32 eq {/EN f D} {/EN t D} ie} if} D
/join {2 copy length E length add string dup 4 2 roll 2 index 0 3 index
 PI E length E PI} bind D
/EG {dup 0 E dup () eq {E pop} {E get} ifelse 10 ne {(\n) E join} if} D
/WR {PB {EG /PB f D} if PP {EG /PP f D} if (\n) search
 {dup () ne BP not or {TR /CI 0 D /NC 0 D NL pop WR}{pop pop WR} ie} {TR} ie} D
/TR {(\t) search {dup length /NC E NC add D SH MS 0 8 NC 8 mod sub dup
 /NC E NC add D GI SH pop TR} {dup length /NC E NC add D SH} ie
 /BP f D} D
/SH {CP E pop LE neg lt {NP} if dup SW pop L1 add /L1 E D
 C1 (\() join T not {( ) join} if E join (\)) join
 AU AF and UF or {( U ) join} if ( S ) join /C1 E D /T t D /TB EN not D} D
/BG {CP pop XO sub abs 0.01 lt} D
/ON {AR AI NN get 1 add dup AR AI 3 -1 roll put ST cvs length dup ST E (. ) PI
 ST 0 3 -1 roll 2 add GI dup SW pop neg 0 R S} D
/SP {YI E /YI E D NL /YI E D} D
/BR {BN} D
/BN {PF {WR} {BT NL} ie /HM f D} D
/AB {CH E 0 E put CH join WB} D
/NN {dup 0 lt {pop 0} if} D
/H  {1 sub /HL E D E BN /AT E D CP E pop LE neg WW add lt {NP} if
 BH SP /SL SL 1 add D HS HL get HT HL get FS} D
/EH {BN /AT 0 D AH SP /SL SL 1 sub NN D /CF 0 D SZ SL get FR SL get FS} D
/P  {E PF {WR /PP t D} {BN AE not {AH SP} if} ie /AT E D} D
/HR {BN 0 CP E pop M gsave PF {0 YI R} if W 0 RL stroke grestore /CI 0 D
 /BP f D NL} D
/AD {BN /AE t D AH SP 4 11 SF} D
/DA {BN /AE f D AH SP 0 11 SF} D
/PR {BN /AT 0 D /CF 0 D 9 PS mul 1 FS /PF t D /PB t D /NC 0 D} D
/PW {pop PR} D
/RP {PF {dup () ne {dup dup length 1 sub get 10 ne {(\n) join} if} if
 WR AH SP /CF 0 D 11 0 FS /PF f D} {BT} ie} D
/SI {/XO AI LG add NN IN mul BC NN BI mul add D /LL W XO sub D} D
/DT {BN /LG LG 1 sub D SI /LG LG 1 add D BL} D
/DD {BN SI BL} D
/DL {BN XO 0 eq {AH SP} if /LG LG 1 add D BL} D
/LD {BN LG 0 gt {/LG LG 1 sub D} if SI XO 0 eq {AH SP} if BL} D
/UL {BN XO 0 eq {AH SP} {NL} ie NR AI NN 0 put /UI UI 1 add D
 /AI AI 1 add D SI BL} D
/LU {BN /UI UI 1 sub D /AI AI 1 sub D SI XO 0 eq {AH SP} {NL} ie BL} D
/OL {BN XO 0 eq {AH SP} {NL} ie NR AI NN 1 put /AI AI 1 add D SI BL} D
/LO {BN AR AI NN 0 put /AI AI 1 sub D SI XO 0 eq {AH SP} {NL} ie BL} D
/LI {BN /BP f D /CI 0 D CP E pop LE neg lt {NP} if
 /C1 C1 NR AI 1 sub NN get 1 eq {( ON )} {( B )} ie join D BL} D
/BQ {BN AH SP /BC BC 1 add D SI BL} D
/QB {BN AH SP /BC BC 1 sub D SI BL} D
/WB {PF {WR} {BT} ie} D
/A  {WB /AF t D} D
/EA {WB /AF f D} D
/SS {SZ SL get /SL SL 1 add D} D
/I  {WB SS 4 FS} D
/BD {WB SS 2 FS} D
/TT {WB SS 1 FS} D
/KB {WB SS /CF 0 D 3 FS} D
/CT {WB SS /CF 0 D 4 FS} D
/SM {WB SS /CF 0 D 1 FS} D
/ES {WB /SL SL 1 sub NN D /CF 0 D SZ SL get FR SL get FS} D
/UN {WB /UF t D} D
/NU {WB /UF f D} D
/SB {0 1 NI {/N E D /K WS N get D /NY AY N get FC N get mul D /BV NY array D
 0 1 NY 1 sub {/TM K string D currentfile TM readhexstring pop pop BV E TM put}
 for BM N BV put} for} D
/colorimage where {pop} {
 /colorimage {
  pop pop /Bp E D /Gp E D /Rp E D
  {/Re Rp D /Gr Gp D /Bl Bp D
  0 1 Re length 1 sub {
   /i E D Gr i Re i get 0.299 mul Gr i get 0.587 mul add Bl i get 0.114 mul add
   cvi put
  } for Gr} image
 } D
} ie
/IP {BV N get /N N 1 add D} D
/II {/K E D /TY E D /XW AX K get D /YW AY K get D /IS SG IT K get get D
 /XS XW IS mul D /YS YW IS mul D YS CS sub TY 2 eq {/MB E D /MA 0 D}
 {TY 2 mod 1 eq {2 div /MA E 2 sub D /MB MA 4 add D}{/MA E D /MB 0 D} ie} ie} D
/IM {II /ty TY D /xs XS D /ys YS D /ya YA D /yb YB D /ma MA D /mb MB D /k K D
 /CI 0 D WB L1 xs add dup /L1 E D XO add W gt
 {NL /YA ma D /YB mb D /YS ys D /L1 xs D}
 {ma YA gt {/YA ma D} if mb YB gt {/YB mb D} if} ie CP E pop YS sub LE neg lt
 {NP /YA ma D /YB mb D /L1 xs D} if /BP f D ty ST cvs ( ) join k ST cvs join
 C1 E join ( DI ) join FP 2 eq FP 1 eq AF and or {( FM ) join} if /C1 E D
 /HM t D /EN f D /T TY 3 eq D} D
/DI {II /YN YW neg D /HM t D /CI 0 D /K2 IX K get D gsave CP MB sub translate
 K2 0 ge {/DP AZ K2 get D /BV BM K2 get D XS YS scale /N 0 D XW YW DP
 [XW 0 0 YN 0 YW] {IP} FC K2 get 1 eq {image} {{IP} {IP} t 3 colorimage} ie}
 {PV K2 neg 1 sub get exec} ie grestore XS 0 R} D
/FM {gsave CP MB sub translate XS neg 0 M 0 YS RL XS 0 RL 0 YS neg RL XS neg
 0 RL stroke grestore} D
/BH -35 D
/AH -28 D
/LL W D
/XO 0 D
/YI 0 D
/CI 0 D
/LG 0 D
/AI 0 D
/UI 0 D
/IN 30 D
/BI 12 D
/WW 50 D
/AR [0 0 0 0 0 0 0 0 0 0] D
/NR [0 0 0 0 0 0 0 0 0 0] D
/FR [0 0 0 0 0 0 0 0 0 0] D
/SZ [0 0 0 0 0 0 0 0 0 0] D
/SL 0 D
/CF 0 D
/BC 0 D
/YA 0 D
/YB 0 D
/F0 0 D
/N 0 D
/AT 0 D
/C1 () D
/C2 () D
/L1 0 D
/L2 0 D
/PN SN D
/MS (        ) D
/CH 1 string D
/ST 6 string D
/HM f D
/PF f D
/EN f D
/TB f D
/UF f D
/PP f D
/AE f D
/AF f D
/BP t D
/T t D
/AX [26 26 26 26 20 32 20 20] D
/AY [26 26 26 26 20 32 20 20] D
/IX [0 1 2 3 4 5 6 7] D
/IT [0 0 0 0 0 0 0 0] D
/AZ [8 8 8 8 8 8 8 8] D
/WS [26 26 26 26 20 32 20 20] D
/FC [3 3 3 3 3 3 3 3] D
/NI 7 D
/BM 8 array D
%%EndProlog
SB
a5a5a5a59c9c9c9c9c9c9c94949494948c8c8c8c8c8c84848487c6c6c6c6
bdbdbdbdbdb5b5b5b5b5adadadadada5a5a5a5a59c9ae7e7e7e7e7e7e7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6a5a5a59c9c9c9c9c9c9c9494
9494948c948c8c8c8c8484848484c6c6c6bdbdbdbdbdb5b5b5b5b5adadad
adada5a5a5a5a59c9c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
e7e7e7e7e7e7a5a59c9c9c9c9c9c9c9494949494948c8c8f8c8c8c848487
8487c6c6bdbdbdbdbdb5b5b5b5b5adadadada5a8ada5a5a5a59a9c9ae7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d9e7e7e7e7e7d6e7d6a59c9c9c9c9c
9c9c949494948f9494949c94948c84848484847bc6bdbdbdbdb5bdb5b5b5
b5b5a8adadadb5adada5a5a59c9c9c9ce7e7e7e7e7e7e7e7e7e7e7e7d9e7
e7e7e7e7e7e7e7e7e7e7e7e79c9c9c9c9c9c9c8f9cf7f1f1f7f7f7f7f7f7
e684848784877b7bbdbdbdbdbdb5b5a8bdfcf2f2fcfcfcfcfcfceea59c9a
9c9a9c93e7e7e7e7e7e7e7d9e7fff7f7ffffffffffffffe7e7d6e7d6e7da
9c9c9c9c9c948f8ff1f7d6f7f7f7f7f7f7f7c48484847b847b7bbdbdbdbd
b5b5a8a8f2fcd6fcfcfcfcfcfcfcd29c9c9c9c9c939ce7e7e7e7e7e7d9d9
f7ffdefffffffffffffff4e7e7e7e7e7dae79c9c9c9c8f8f87f7f7e6b1f7
f7f7f7f7f7f79c8784877b7b7b7bbdbdbdb5a8a89afcfceeb9fcfcfcfcfc
fcfcb59a9c9a9c939c93e7e7e7e7d9d9d6ffffffd9ffffffffffffffe7d6
e7d6e7dae7da9c9c9c948f72f1c46f4a87f7f7f7f7f7f7f78c84847b877b
7b7bbdbdb5b5a88cf2d281609afcfcfcfcfcfcfca59c9c9c9a949394e7e7
e7e7d9d3f7f4bdadd6ffffffffffffffe7e7e7e7d6e7dae79c9c9c8f6f8f
ce5f4a8fd6f7f7f7f7f7f7f7877b877b7b7b7b73b5b5b5a8819ad673609a
d6fcfcfcfcfcfcfc9a9c9a9c9494948ce7e7e7d9bdc0debdadc0deffffff
ffffffffd6e7d6e7e7e7e7de9c9c8f7b5e8fd28fd6f7f7f7f7f7f7a0f7e6
84847b7b7b7b737bb5b5a893749ae19ad6fcfcfcfcfcfcaefcee9c9c9c94
93948c8ce7e7d9dab1c0fbc0deffffffffffffd6ffffe7e7e7e7dae7dee7
9c948f7e4a8ff7f7f7f7f7f7f7bb5e0af7f77b7b7b7b7b7b7b73b5b5a88b
609afcfcfcfcfcfcfcc67424fcfc939c939494938c8ce7e7d9bcadc0ffff
ffffffffffdcb179ffffdae7dae7e7dae7de94948f6f4a9df7f7f7f7f1a0
5e0a0a0af7f77b7b7b7b737b7373b5b5a88160a7fcfcfcfcf2ae74242424
fcfc949394938c8c8c8ce7e7d9bdadc0fffffffff7d6b1797979ffffe7da
e7dae7e7dede949487634a8ff7f7f1b15e0a0a0a0a0a0a0a0a0a0a0a7b73
7373b5ad9a7b609afcfcf2b9742424242424242424242424948c8c8ce7e7
d6c6adc0fffff7d9b17979797979797979797979e7dedede948c87634a8f
f7c95e0a0a0a0a0a0a0a0a0a0a0a0a0a73737372adad9a7b609afccd7424
2424242424242424242424248c8c8c84e7e7d6bdadc0ffdbb17979797979
7979797979797979e7dedede948c87634a8ff7e6c4a0630a0a0a0a0a0a0a
0a0a0a0a7373736badad9a7b609afceed2ae7b2424242424242424242424
8c8c8484e7e7d6bdadc0fffff4d6bd7979797979797979797979e7ded6d6
948c87634a7ef7e6c4a79c8f5e0a0a0aa3a7635f637372736b6badad9a7b
608bfceed2bcb5a874242424b8bc7b737b8c84848484e7e7d6bdadbcffff
f4e7e7d9b1797979f7e7c6bdcededed6d6d68c8c87634a6ff7f7f7e6c4a7
a7b15e0ac4bb63636b7373736b6badad9a7b6081fcfcfceed2bcbcb97424
d2c67b7b848484848484e7e7d6c6adbdfffffffff4e7e7d9b179f4dcc6c6
d6d6d6d6d6ce8c8f876f4a5ef7f7f7f7f7d2c4a7a7b1f7ed876b736b736b
6b6bada89a816074fcfcfcfcfce1d2bcbcb9fcf89a8484848484847be7d9
d6bdadb1fffffffffffbf4e7e7d9ffffd6d6d6d6d6d6cece8c8c876b4a4a
f7f7f7f7f7f7e6c4a7bbf7f7a7726b726b6b6b6ba5a59a84605afcfcfcfc
fcfceed2bcc6fcfcbc8c848c84847b7be7e7d6cead96fffffffffffffff4
e7dcffffe7d3d6d3d6cecece8c8f876b4a37f1f7f7f7f7f7f7f7e6e6f7f7
e6736b6b6b6b6b63a5a89a84604ff2fcfcfcfcfcfcfceeeefcfcee848484
847b7b7be7d9d6cead9ff7ffffffffffffffffffffffffd6d6d6cececec6
8c8484724a378fdef7f7f7f7f7f7f7f7f7f7f7876b6b6b6b6363a5a59c8c
604f9adefcfcfcfcfcfcfcfcfcfcfc9a8484847b7b7be7e7e7d3ad9fc0de
ffffffffffffffffffffffd6d6cececec6c68487847250374a374a4a5e6f
7e7e7e7e83878f736b6b6b63635ea59a9c8c684f5a4f5a6074818b8b8b8b
959aa88c847b7b7b7b73e7d6e7d3b89f969f96adb1bdbcbcbcbcc2d6d9de
cececec6c6c68484877b635e4a4a374a4a373737374a4a636b6b6b6b6363
5e63a5a59a937b7460604f605a4f4f4f4f60607b7b84847b7b7b737be7e7
d6dac6b1adad9fad969f9f9f9fadadc6cecececec6c6c6bd8484847b7b6b
6b63635f505f5e505e505f636b6b636363635f5f9c9c9c939384847b7b73
687374687468737b847b7b7b7b7b7373e7e7e7dadad6cec6c6bdb8bdb1b8
b1b8bdc6cececec6c6c6bdbd8487847b7b7b7b73726b6b6b6b6b636b636b
6b6b6363635f5f5f9c9a9c939c93938c8c84848484847b847b7b7b7b7b7b
7b737373e7d6e7dae7dadaded3d6d6d6d6cececececececec6c6c6bdbdbd
84847b7b7b7b7b7373737373736b736b6b6b6b6363635f5f5f5e9c9c939c
9394938c8c8c8c8c84848484847b7b7b7b7b73737374e7e7dae7dae7dade
dedededed6d6d6cecececec6c6bdbdbdbdb1
a5a5a5a59c9c9c9c9c9c9c94949494948c8c8c8c8c8c84848487c6c6c6c6
bdbdbdbdbdb5b5b5b5b5adadadadada5a5a5a5a59c9ae7e7e7e7e7e7e7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6a5a5a59c9c9c9c9c9c9c9494
9494948c948c8c8c8c8484848484c6c6c6bdbdbdbdbdb5b5b5b5b5adadad
adada5a5a5a5a59c9c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
e7e7e7e7e7e7a5a59c9c9c9c9c9c9c9494949494948c8c8c8c8c8c848487
8487c6c6bdbdbdbdbdbdb5b5b5b5adadadadada5a5a5a5a5a59a9c9ae7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6e7d6a59c9c9c9c9c
9ca79ca79c94948f94948f8c8c8c84848484847bc6bdbdbdbdb5bdbcbdbc
b5b5ada8adada8a5a5a5a5a59c9c9c9ce7e7e7e7e7e7e7e7e7e7e7e7e7d9
e7e7d9e7e7e7e7e7e7e7e7e79c9c9c9c9c9c9ce6f7f7f7f7f7f7f1f1f78f
8784848784877b7bbdbdbdbdbdb5b5eefcfcfcfcfcfcf2f2fca89aa59c9a
9c9a9c93e7e7e7e7e7e7e7fffffffffffffff7f7ffd9d6e7e7d6e7d6e7da
9c9c9c9c9c9c94c4f7f7f7f7f7f7f7d6f7ed877b877b7b847b7bbdbdbdbd
b5b5b5d2fcfcfcfcfcfcfcd6fcf89a939a9c9c9c939ce7e7e7e7e7e7e7f4
ffffffffffffffdeffffd6dad6e7e7e7dae79c9c9c9c9c9494a5f7f7f7f7
f7f7f7bbe6f7f1727b7b7b7b7b7bbdbdbdb5b5b5b5c6fcfcfcfcfcfcfcc6
eefcf28c93939c939c93e7e7e7e7e7e7e7e7ffffffffffffffdcfffff7d3
dadae7dae7da9c9c9c9c9494949cf7f7f7f7f7f7f7875e7ec4f16b72877b
7b7bbdbdb5b5b5b5b5b5fcfcfcfcfcfcfc9a748bd2f2848c9a949394e7e7
e7e7e7e7e7e7ffffffffffffffd6b1bcf4f7ced3d6e7dae79c9c9c949494
948cf7f7f7f7f7f7f7d6a0504ad68763737b7b73b5b5b5b5b5b5adadfcfc
fcfcfcfcfcd6ae6860d69a7b8c94948ce7e7e7e7e7e7e7e7ffffffffffff
ffded6b8added6c6dee7e7de9c9c94949494948cf1f7a0f7f7f7f7f7f7e6
bbd283506b73737bb5b5b5b5b5adadadf2fcaefcfcfcfcfcfceec6e19568
848c8c8ce7e7e7e7e7e7e7e7f7ffd6ffffffffffffffdcfbc2b8cededee7
9c9494949494948cf7f70a5ebbf7f7f7f7f7f7f78f4a63737373b5b5b5b5
adadadadfcfc2474c6fcfcfcfcfcfcfc9a607b8c8c8ce7e7e7e7e7e7e7e7
ffff79b1dcffffffffffffffc0adc6dedede94949494948c8c8cf7f70a0a
0a5ea0f1f7f7f7f79d4a5e727373b5b5b5adadadadadfcfc24242474aef2
fcfcfcfca760738c8c8ce7e7e7e7e7e7e7e7ffff797979b1d6f7ffffffff
c0adc6d3dede949494940a0a0a0a0a0a0a0a0a0a0a5eb1f1f7f78f375f6b
7373b5b5adad242424242424242424242474b9f2fcfc9a4f73848c8ce7e7
e7e77979797979797979797979b1d9f7ffffc09fbdd6dede9494948c0a0a
0a0a0a0a0a0a0a0a0a0a0a5ec9f78f4a5f6b7372adadadad242424242424
2424242424242474cdfc9a6073848c84e7e7e7e779797979797979797979
797979b1dbffc0adbdd6dede94948c8c0a0a0a0a0a0a0a0a0a0a0a63a0b1
e6f78f375f6b6b6badadadad24242424242424242424247baec8eefc9a4f
73848484e7e7e7e77979797979797979797979bdd6f9ffffc09fbdd6d6d6
948c948c8c7b5f63a79c0a0a0a5e8f9ca7c4e6f77e375f6b6b6badadada5
a593737bbcb524242474a8b5bcd2eefc8b4f73848484e7e7e7e7e7dabdc6
e7e7797979b1d9e7e7f4ffffbc9fbdced6d68c948c8f847b6f63c4c40a5e
a7a7a7c4e6f7f7f76f375f6b6b6badadada8a593817bd2d22474bcbcbcd2
eefcfcfc814f737b8484e7e7e7d9e7dabdc6f4f479b1e7e7e7f4ffffffff
bd9fbdced6ce8c8c8c8c87847287f1f7b1a7a7c4d2f7f7f7f7f75e4a5e63
6b6badada5a59a9c8c9af2fcb9bcbcd2e1fcfcfcfcfc745a737b847be7e7
e7e7d6e7d3d6f7ffd9e7e7f4fbffffffffffb196c6cecece8c8c8c848487
84c4f7f7a7b1c4e6f7f7f7f7f7f74a4a5f636b6ba5a5a5a5a59a9cd2fcfc
bcc8d2eefcfcfcfcfcfc5a60737b7b7be7e7e7e7e7d6e7f4ffffe7f9f4ff
ffffffffffff96adbdcecece8c8c8c84848487e6f7f7e6f1f7f7f7f7f7f7
f7f137375f636b63a5a5a5a5a59c9aeefcfceef2fcfcfcfcfcfcfcf24f4f
737b7b7be7e7e7e7e7e7d6fffffffff7fffffffffffffff79f9fbdcecec6
8c8c8484878494f7f7f7f7f7f7f7f7f7f7f7de8f374a5f636363a5a5a5a5
9a9cadfcfcfcfcfcfcfcfcfcfcfcde9a4f60737b7b7be7e7e7e7d6e7e7ff
ffffffffffffffffffffdec09fadbdc6c6c68484848484878c9c8f837e7e
7e7e6f5e4a4a3737374a5e63635fa5a5a59c9c9aa5b5a8958b8b8b8b8174
605a4f4f4f60737b7b73e7e7e7e7e7d6e7e7d9c2bcbcbcbcbdb1ad969f9f
9fadc6c6c6bd84848487847b7b7b6b504a373737374a374a374a4a506363
5f63a59c9c9a9c9c939384685a4f4f4f4f5a4f604f6060687b7b737be7e7
e7d6e7e7dadaceb8969f9f9f9f969fad9fadadb8c6c6bdbd84848484847b
7b7b6b635e5f5f5050505e505f5f5f5e63635f5f9c9c9c9c9c939493847b
7373736868687468737373737b7b7373e7e7e7e7e7dae7dad6cec6bdbdb8
b8b8b1b8bdbdbdc6bdbdbdbd8487847b7b7b7b7b7372736b6b6b6b636363
63636363635f5f5f9c9a9c939c9493948c8c8484847b7b7b7b7b7b7b7b7b
7b737373e7d6e7dae7e7dae7ded3d6d6d6cececececec6c6c6c6bdbdbdbd
84847b7b7b7b7b7b73737373736b6b6b6b6b6b6363635f5f5f5e9c9c939c
939494938c8c8c8c848484847b7b7b7b7b7b73737374e7e7dae7dae7e7da
e7dededed6d6d6cecececec6c6bdbdbdbdb1
a5a5a5a59c9c9c9c9c9c9c94949494948c8c8c8c8c8c84848487c6c6c6c6
bdbdbdbdbdb5b5b5b5b5adadadadada5a5a5a5a59c9ae7e7e7e7e7e7e7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6a5a5a59c9c9c9c9c9c9c9494
9494948c948c8c8c8f8487848484c6c6c6bdbdbdbdbdb5b5b5b5b5adadad
adada5a5a8a59a9c9c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
d9e7d6e7e7e7a5a59c9c9c9c9c9c9c9494949494948c8c8c8f848784847b
8784c6c6bdbdbdbdbdb5b5b5b5b5adadadadada5a8a59a9c9c939a9ce7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d9e7d6e7e7dad6e7a59c9c9c9c9c
f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7f7727b7bc6bdbdbdbdb5fcfcfcfc
fcfcfcfcfcfcfcfcfcfcfcfcfc8c939ce7e7e7e7e7e7ffffffffffffffff
ffffffffffffffffffd3dae79c9c9c9c9cf7f7f7d2d2d2d2edf7f7f7f7ed
d2d2e6f70a5e727bbdbdbdbdbdfcfcfce1e1e1e1f8fcfcfcfcf8e1e1eefc
24738c93e7e7e7e7e7fffffffbfbfbfbfffffffffffffbfbffff79c6d3da
9c9c9c9cf7f7f7c4c4c4c4f7f7f7f7f7f7f7edd2f7204a5e6b7bbdbdbdbd
fcfcfcd2d2d2d2fcfcfcfcfcfcfcf8e1fc3460738493e7e7e7e7fffffff4
f4f4f4fffffffffffffffffbff7fadc6d6da9c9c9cf7f7f7c4d2e6d2eded
e6f7f7f7f7f7f7f70a4a4a5e737bbdbdbdfcfcfcd2e1eee1f8f8eefcfcfc
fcfcfcfc246060738c94e7e7e7fffffff4fbfffbffffffffffffffffffff
79adadc6dee79c9c9c4ae69494636b6b63638c8cb1b17b847b6be64a506b
737bbdbdb560eeb5b57b84847b7badadc8c89ca59c84ee6068848c93e7e7
e7adffe7e7cececececee7e7f9f9e7e7e7d6ffadb8d6deda9c9c9c944ad2
946b6b6363637bb1b1c47ba3b18463d250847373b5b5b5b560e1b584847b
7b7b9cc8c8d294b8c8a57be1689c8c8ce7e7e7e7adfbe7cecec6c6cee7f9
f9f4e7f7f9e7cefbb8efdee79c9c9494944ad28c7b726b638484b1b1a384
84847b4ae65e8473b5b5b5b5b560e1ad938c847b9c9cc8c8b89c9c9c9c60
ee739c8ce7e7e7e7e7adfbe7dad3cecee7eff9f9f7efefefe7adffc6efde
9c9494948cf7f7c4b1d2c4d2f7f7f7f7e6ede6e6d2f74a506373b5b5b5b5
adfcfcd2c8e1d2e1fcfcfcfceef8eeeee1fc60687b8ce7e7e7e7e7fffff4
f9fbf4fbfffffffffffffffffbffadb8cee794949494f7f7d2c4c4d2c4e6
f7f7f7edd2e6f7f7f70a4a506b73b5b5b5adfcfce1d2d2e1d2eefcfcfcf8
e1eefcfcfc246068848ce7e7e7e7fffffbf4f4fbf4fffffffffffbffffff
ff79adb8d6de949494f7f7d2d2c4d2d2c4edf7f7f7f7f7f7f7f7204a4a5e
6b72b5b5adfcfce1e1d2e1e1d2f8fcfcfcfcfcfcfcfc346060738484e7e7
e7fffffbfbf4fbfbf4ffffffffffffffffff7fadadc6d6de9494944ae68c
6b6b6b6363636b727b847b727363d24a50636b72adadad60eea58484847b
7b7b848c939c948c8c7be160687b8484e7e7e7adffe7cececececececed3
dae7e7d3decefbadb8ced6de94948c8c4ad287637b846b63636b84847b73
736b5ee64a5e636badadadad60e19a7b949c847b7b84a59c9c948c8473ee
60737b84e7e7e7e7adfbd6cee7efd6c6c6d6e7efe7e7e7d6c6ffadc6ced6
948c948c8c4ae672848e6363636b7b84847b6b6b5037d2205e63adadadad
a560ee8ca5a87b7b7b849c9ca59c8484684fe134737be7e7e7e7e7adffd3
e7f6cec6c6d6e7e7e7e7d6d6b89ffb7fc6ce8c948c8c8cf7f7d2d2d2d2d2
d2f7f7f7f7e6d2edf7f7204a5063adadada5a5fcfce1e1e1e1e1e1fcfcfc
fceee1f8fcfc3460687be7e7e7e7e7fffffbfbfbfbfbfbfffffffffffbff
ffff7fadb8ce8c8c8c8cf7f7ede6e6d2d2d2e6d2edf7f7d2e6f7f70a3750
5e63adada5a5fcfcf8eeeee1e1e1eee1f8fcfce1eefcfc244f68737be7e7
e7e7fffffffffffbfbfbfffbfffffffbffffff799fb8c6ce8c8c8cf7f7f7
f7f7f7f7e6e6d2d2f7f7f7f7f7f7203750506363a5a5a5fcfcfcfcfcfcfc
eeeee1e1fcfcfcfcfcfc344f68687b7be7e7e7fffffffffffffffffffbfb
ffffffffffff7f9fb8b8cec68c8c8c4ae684b1b1b17b7b63636b638e8e8e
8e7be64a4a5e6363a5a5a560ee9cc8c8c894937b7b847ba8a8a8a89cee60
60737b7be7e7e7adffe7f9f9f9e7daceced6cef6f6f6f6e7ffadadc6c6c6
8c8c84844ad2b1a3b1b173636b8e5e8e8e8e8e847be64a505e63a5a5a5a5
60e1c8b8c8c88c7b84a873a8a8a8a89c9cee6068737be7e7e7e7adfbf9f7
f9f9deced6f6c6f6f6f6f6efe7ffadb8c6c6848484847b4ad2b1a3a37b73
5e5e63636b8e8e8e8463e64a505fa5a5a59c9c60e1c8b8b89c8c73737b7b
84a8a8a89c7bee606873e7e7e7e7e7adfbf9f7f7e7dec6c6c6c6d6f6f6f6
efceffadb8bd848484877b734ad2e6e6e6e6e6e6e6e6e6e6e6e6e6e6d2e6
0a50a59c9c9a938c60e1eeeeeeeeeeeeeeeeeeeeeeeeeeeee1ee2468e7e7
e7d6dadeadfbfffffffffffffffffffffffffffffbff79b88484877b8473
634a4a0a240a0a240a0a240a0a240a0a240a244a9c9c9a9c9c8c7b606024
3a24243a24243a24243a24243a243a60e7e7d6e7e7deceadad798e79798e
79798e79798e79798e798ead848484847b7b735e50504a504a4a504a4a4a
4a374a4a4a4a4a4a9c9c9c9c93948c7368686068606068606060604f6060
60606060e7e7e7e7dae7dec6b8b8adb8adadb8adadadad9fadadadadadad
87847b7b7b7b7b736363635e5e5e5e5e5e505050505050504a509a9c939c
9493938c7b7b7b737373737373686868686868686068d6e7dae7e7dadade
cececec6c6c6c6c6c6b8b8b8b8b8b8b8adb8
a5a5a5a59c9c9c9c9c9c9c94949494948c8c8c8c8c8c84848487c6c6c6c6
bdbdbdbdbdb5b5b5b5b5adadadadada5a5a5a5a59c9ae7e7e7e7e7e7e7e7
e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6a5a5a59c9c9c9c9c9c9c9494
9494948c948c8c8c8c8484848484c6c6c6bdbdbdbdbdb5b5b5b5b5adadad
adada5a5a5a5a59c9c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
e7e7e7e7e7e7a5a59c9c9c9c8f9c9c947373736b635f508c8c728c848487
8487c6c6bdbdbdbda8b5b5b58c8c84847b7368ada58ca5a5a59a9c9ae7e7
e7e7e7e7d9e7e7e7deded6cecebdb8e7e7d3e7e7e7d6e7d6a59c9c9c9c9c
24949c946be6f7f7e6156b8c870a8c848484847bc6bdbdbdbdb53ab5b5b5
84eefcfcee1c84a59a24a5a59c9c9c9ce7e7e7e7e7e78ee7e7e7ceffffff
ff58d6e7d679e7e7e7e7e7e79c9c9c9c5e5eed8c5e9450f7f7f7e60a3772
6bf7844a84877b7bbdbdbdbd7473f8a574b568fcfcfcee244f8c84fc9c5a
9c9a9c93e7e7e7e7b1c6ffe7b1e7b8ffffffff799fd3ceffe796e7d6e7da
9c9c8f5e63f7f7f1726f37f7f7f7d2152463f7f7f773637b7b7bbdbda874
7bfcfcf28c814ffcfcfce11c3a7bfcfcfc8c7b9c9394e7e7d9b1c6fffff7
d3bd9ffffffffb588ec6ffffffdec6e7dae79c9c8720f1f7f7f7e67b6bf7
f7f7ed3772f1f7f7f7d20a637b7bbdbd9a34f2fcfcfcee9384fcfcfcf84f
8cf2fcfcfce1247b9493e7e7d67ff7ffffffffdaceffffffff9fd3f7ffff
fffb79c6e7da9c9c8f4a6bf7f7f7f7f7f1f7f7f7f7edf7f7f7f7c4370a63
7b7bbdbda86084fcfcfcfcfcf2fcfcfcfcf8fcfcfcfcd24f247b9394e7e7
d9adcefffffffffff7fffffffffffffffffff49f79c6dae79c9c9c8f374a
e6f7f7f7f7a3737bb1f7f7f7f7c4370037737b73b5b5b5a84f60eefcfcfc
fcb88c94c8fcfcfcfcd24f004f8c948ce7e7e7d99fadfffffffffff7dee7
f9fffffffff49f3b9fdee7de9c9c94948f4a4af7f7e65e738e8eb1d2f7f7
d24a00377b7b7b73b5b5b5b5a85a60fcfcee738ca8a8c8e1fcfce160004f
94938c8ce7e7e7e7d996adffffffc6def6f6f9fbfffffbad3b9fe7dae7de
9c944a72635063f7f75e7be6f7f7f7edf7f7d2377384847b7373b5b55a8c
7b687bfcfc7394eefcfcfcf8fcfce14f8c9c9c948c8ce7e796d3bdb8c6ff
ffc6e7fffffffffffffffb9fe7e7e7e7dee7949420f7f7f7f7f7a373e6c4
734ab1f7f7f7f7f7ede6f14a7b73b5b534fcfcfcfcfcb88ceed28c60c8fc
fcfcfcfcf8eef2608c8ce7e77ffffffffffff7defff4deadf9ffffffffff
fffff7ade7de949420f7f7f7f7f7738ef76b15154af7e6f7f7f7f7f7f70a
7373b5b534fcfcfcfcfc8ca8fc841c1c60fceefcfcfcfcfcfc248c8ce7e7
7fffffffffffdef6ffd65858adffffffffffffffff79dede949420f7f7f7
f7f77b8ef737150a63f7e6f7f7f7f7f7f70a7372adad34fcfcfcfcfc94a8
fc4f1c247bfceefcfcfcfcfcfc248c84e7e77fffffffffffe7f6ff9f5879
ceffffffffffffffff79dede94940ae6ede6edf7a3b1f7b15073e6edf7f7
ede6d2d2d20a736badad24eef8eef8fcb8c8fcc8688ceef8fcfcf8eee1e1
e1248c84e7e779fffffffffff7f9fff9b8defffffffffffffbfbfb79ded6
948c2020201524edf7d2e6d2f7f7d2f7f7f7c44a0a2020156b6badad3434
341c3af8fce1eee1fcfce1fcfcfcd2602434341c8484e7e77f7f7f588eff
fffbfffbfffffbfffffff4ad797f7f58d6d68c948c8c8c5e5eedf7f7f7ed
d2e6f7f7f7f7d24a1520200a736badadadada57473f8fcfcfcf8e1eefcfc
fcfce1601c3434248484e7e7e7e7e7b1c6fffffffffffbfffffffffffbad
587f7f79d6ce8c8c8c8c6f6bf1f7f7f7f7f7f7f7f7f7f7edf7b137377273
6b6badada5a58184f2fcfcfcfcfcfcfcfcfcfcf8fcc84f4f8484847be7e7
e7e7bdd6f7fffffffffffffffffffffffff99f9fded6cece8c8c87636bf1
f7f7f7e6e6f7f7f7e6d2edf7edf7c450736b6b6ba5a59a7b84f2fcfcfcee
eefcfcfceee1f8fcf8fcd26884847b7be7e7d6c6cef7ffffffffffffffff
fffbfffffffff4b8d6cecece8c8c7b37f7f7f7f7c44a24edf7f7e6374aed
f7e6f7c424506b63a5a5934ffcfcfcfcd2603af8fcfcee4f60f8fceefcd2
3a687b7be7e7da9ffffffffff4ad8effffffff9fadfffffffff48eb8cec6
8c8c873784f7f7c4370073edf7f7d20a004ae6f7c4500a506363a5a59a4f
9cfcfcd24f008cf8fcfce1240060eefcd26824687b7be7e7d69fe7fffff4
9f3bdefffffffb793badfffff4b879b8c6c68484846b2072c43715377be6
f7f7d220243763c44a003763635ea5a59c84348cd24f1c4f94eefcfce134
3a4f7bd260004f7b7b73e7e7e7ce7fd3f49f589fe7fffffffb7f8e9fc6f4
ad3b9fc6c6c68484848463200a15377b84edf7f7d220246b24240a376b63
5e63a59c9c9c7b34241c4f8c9cf8fcfce1343a843a3a244f7b7b737be7e7
e7e7c67f79589fe7e7fffffffb7f8ed68e8e799fcec6c6bd848487848463
0a37737b734a24200a0a206b6b20376b63635f5f9c9c9a9c9c7b244f8c93
8c603a34242434847b344f7b7b7b7373e7e7d6e7e7c6799fdedadead8e7f
79797fd6ce7f9fcec6bdbdbd8484847b7b7b7b7b7b7373737373736b6b6b
6b6b6363635f5f5f9c9c9c939c949493948c8c8c8c8c848484847b7b7b7b
7b737373e7e7e7dae7e7e7dae7e7dee7deded6d6d6cececec6c6bdbdbdbd
87847b7b7b7b7b7b7373737373736b6b6b6b6b6363635f5f5f5e9a9c939c
939493948c8c8c8c8c848484847b7b7b7b7b73737374d6e7dae7dae7dae7
dededededed6d6d6cececec6c6bdbdbdbdb1
a5a5a59c9c9c9c9c94949494948c8c8c8c848484c6c6c6bdbdbdbdb5b5b5
b5adadadada5a5a59c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
a5a79c9c9c9c9c94946f002483948c8c84848784c6bcbdbdbdbdb5b5b581
003a95ada5a5a5a59a9ce7e7e7e7e7e7e7e7e7bd3b8ec2e7e7e7e7e7d6e7
a59c9c9c9c9c94949463002e24638c8c84848487c6bdbdbdbdb5b5b5b563
001e3a7ba5a5a59c9c9ae7e7e7e7e7e7e7e7e76300158ec6e7e7e7e7e7d6
9c9c9c9c9c9c63315e5e2e4a878c8c0084877b7bbdbdbdbdb5b563317474
1e5a9aa5a5009c9a9c9ce7e7e7e7e7e76331b1b11596d6e7e700e7d6e7e7
9c9c9c9c9c7300007bf7e6948c848400847b7b7bbdbdbdb5b577000094fc
eeb5a5a5a5009c9c9493e7e7e7e7e7973b3be7ffffe7e7e7e700e7e7e7da
9c9c9c9c8f200037f7edb1c4848487377b7b7b7bbdbdb5b5a834004ffcf8
c8d2a5a59a4f93949394e7e7e7e7d97f3b9ffffff9f4e7e7d69fdae7dae7
9c9c9c948c0000b1f7d2370000150000737b7b7bb5b5b5b5ad0000c8fce1
4f00001c00008c949493e7e7e7e7e7003bf9fffb9f3b3b583b3bdee7e7da
9c9494949c3100edf7f78c8484848400877b7b73b5b5b5adb53100f8fcfc
a5a59c9c9c009a94938ce7e7e7e7e73100ffffffe7e7e7e7e73bd6e7dae7
94949494947b00e6f7d215208784872e73737b73b5b5b5adad9300eefce1
1c349a9c9a1e8c8c948ce7e7e7e7e7da3bfffffb587fd6e7d615e7dee7de
949494948c8c151520948424207373007b7b7373b5adadadadad1c1c34ad
9c3a348c940093938c8ce7e7e7e7e7e758587fe7e78e7fdee73bdadadede
9494948c8c8c000a246f7b7b376b7b2e73737373adadadada5a500243a81
9c934f84931e948c8c8ce7e7e7e7e7e73b798ebde7da9fceda15e7dedede
948c8c8c8c8c0000204a7b7b7b7b73316b73726badadada5a5a500003460
939c94939431848c8484e7e7e7e7e7e73b3b7faddae7e7dae731d6deded6
8c8c8c8c8c8415000037507b7b73731572726b6badada5a5a5a51c00004f
689493948c1c8c848484e7e7e7e7e7e7583b009fb8e7dae7de58d3ded6ce
8c8c8c8c8487151520004a84737373316b6b6b6bada5a5a5a59a1c1c3400
609c948c8c318484847be7e7e7e7e7d658587f3bade7e7dede31d6d6cece
8c8c8c848472154a8763006b73737315726b6b6ba5a5a5a59c8c1c5a9a7b
00848c8c8c1c8c84847be7e7e7e7e7d35896d6c63bd6dedede58d3d6cece
8c8c8484874a15637b63157373737231726b6363a5a5a59c9a601c7b937b
1c8c8c8c8c3184847b7be7e7e7e7d6ad58c6dac658dededed331dececec6
8484848484204a7b7b4a0a7373736b206b6b6363a5a59c9c9c345a93945a
248c8c848434847b7b7be7e7e7e7e77f96dae79679deded6d67fcecec6c6
8484878487204a7b735e157b736b6b4a63635e5fa59c9a9c9a3460948c74
1c948484845a7b7b7373e7e7d6e7d67fade7deb158e7d6d6d696bdc6c6bd
8484847b7b375e737b73377b6b6b635e63635f5f9c9c9c9c944f748c8c8c
4f9384847b747b7b7373e7e7e7e7e79fb1dee7de9fdad6d6c6b1c6c6bdbd
87847b7b7b7b7b737373736b6b6b6363635f5f5e9a9c939493938c8c8c8c
8484847b7b7b7b737374d6e7dae7dadae7dededed6d6cececec6c6bdbdb1

ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffffffff5d6ebffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffdf7fbfffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffebaed6ffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffbf007f
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fff5d6ebffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffdf7fbfffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffebd6c2c2d2f5ffff
ffffd6e1fadbc7c2dbfafffffff5d6ebffffffffffffffffbf7f404070df
ffffffff7f9fef8f50408fefffffffdf7fbfffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffd2aeae
c2c2aeb3e6ffffffaebdbdb3c2bdaebdf0ffffebaed6ffffffffffffff70
000040400010afffffff0030301040300030cfffffbf007fffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
fffff0aebdfafffff0b3b8ffffffaeaebdfaffffe1aec2ffffebaed6ffff
ffffffffcf0030efffffcf1020ffffff000030efffff9f0040ffffbf007f
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffebc2e6ffffffffc2aeffffffaeaef5ffffffffccaef0
ffebaed6ffffffffffffbf40afffffffff4000ffffff0000dfffffffff60
00cfffbf007fffffffffffffffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffffffffae6b3aeffffffaeb8ffff
ffffffe1aee6ffebaed6ffffffffffffffffffffffefaf1000ffffff0020
ffffffffff9f00afffbf007fffffffffffffffffffffffffffffffffffff
fffffffffffffffffffffffffffffffffffffffffff0ccbdaeaeaeaeaeff
ffffaec2ffffffffffebaed6ffebaed6ffffffffffffffcf603000000000
00ffffff0040ffffffffffbf007fffbf007fffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffe6aeaec2
d6e1f0c2aeffffffaec2ffffffffffebaedbffebaed6ffffffffffffaf00
00407f9fcf4000ffffff0040ffffffffffbf008fffbf007fffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffbdb3f0ffffffffc2aeffffffaebdffffffffffdbaeebffebaed6ffff
ffffffff3010cfffffffff4000ffffff0030ffffffffff8f00bfffbf007f
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffaec2fffffffffab3aeffffffaeaef5ffffffffc2b3ff
ffebaed6ffffffffffff0040ffffffffef1000ffffff0000dfffffffff40
10ffffbf007fffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffbdb3f0fffff5bdaeaeffffffaeaebdfa
ffffe1aeccffffebaed6ffffffffffff3010cfffffdf300000ffffff0000
30efffff9f0060ffffbf007fffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffe6aeb3c2bdaec2d2aebd
f0ffaeb8b3aec2b3aebdfaffffebaed6ffffffffffffaf00104030004070
0030cfff0020100040100030efffffbf007fffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffebd2c2
d2e6fffaccc7f5ffaec2f5d2c2c7e1fffffffff5d6ebffffffffffffffbf
704070afffef6050dfff0040df7040509fffffffffdf7fbfffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffaec2ffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffff0040ffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffaec2ffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffff0040ffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffaec2ffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffff0040
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffc2d2ffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffff4070ffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
ffffffffffffffffffffffff
a5a5a59c9c9c9c9c94949494948c8c8c8c848484c6c6c6bdbdbdbdb5b5b5
b5adadadada5a5a59c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
a5a79c9c9c9c9c94949494948c8c8c8c84848784c6bcbdbdbdbdb5b5b5b5
adadadada5a5a5a59a9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6e7
a59c9c9c9c9c94949494948c8c8c8c8c72244a84c6bdbdbdbdb5b5b5b5ad
adadada5a5a58c3a609ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d38eade7
9c000000004a949494948c7b8c8c8c3720377b7bbd0000000060b5b5adad
ad93a5a5a54f344f939ce73b3b3b3bade7e7e7e7e7dae7e7e79f7f9fdae7
9c00150a4a4a9494948c7b508c7b0a0a4a847b7bbd001c246060b5adadad
9368a5932424609c9c93e73b5879adade7e7e7e7dab8e7da7979ade7e7da
9c0024c4f74a94a78c6fb17b8c0a2072847b7b7bbd003ad2fc60adbcad81
c894a524348c9c939494e73b8ef4ffade7e7e7bdf9e7e7797fd3e7dae7e7
9c0037d2ed4a94f72473f737848784847b7b7b7bb5004fe1f860adfc3a8c
fc4fa59a9c9c939c9394e73b9ffbffade7ff8edeff9fe7d6e7e7dae7dae7
9c004ad2ed4a8cb1005e4a00840a0a2020243773b50060e1f860adc80073
60009c242434343a4f8ce73badfbffade7f93bc6ad3be779797f7f8e9fde
940050c4f74a8c24000000008484847b7b7b7373b50068d2fc60ad3a0000
00009c9c9c9494938c8ce73bb8f4ffade78e3b3b3b3be7e7e7e7e7dae7de
9400f7f7f74a8c003772000084155e7b737b7373b500fcfcfc60a5004f8c
00009c1c7393948c8c8ce73bffffffade73b9fd33b3be758c6dae7e7dede
9400f7a3844a8c8484847b007b4a0a3773737373ad00fcb89c60a5a5a59c
93009c60244f8c8c8c8ce73bfff7e7ade7e7e7e7da3be7ad799fdededede
9400f7a3844a848784877b847b6b4a150a5e5e6bad00fcb89c60a59a9c9a
9c9c9484601c24737384e73bfff7e7ade7d6e7d6e7e7e7cead5879c6c6d6
8c00a35e5f4a84848415374a4a4a4a4a4a0a006bad00b87373609c9c9c1c
4f606060606060240084e73bf7c6bdade7e7e7589fadadadadadad7900d6
8c000000004a84877b15f7f7f7f7f7f7f784006bad00000000609c9a9c1c
fcfcfcfcfcfcfc9c007be73b3b3b3bade7d6e758ffffffffffffffe73bce
8c0037d2f74a847b7b0af7a3a3a3a3a3b14a0063a5004fe1fc609c9c9424
fcb8b8b8b8b8c860007be73b9ffbffade7e7e779fff7f7f7f7f7f9ad3bc6
8c0050d2ed4a7b7b7b15ed4a4a4a4a4a4a4a0063a50068e1f8609c93941c
f860606060606060007be73bb8fbffade7dae758ffadadadadadadad3bc6
840063e6f74a7b7b7b0000000000000000000063a5007beefc6094949400
0000000000000000007be73bceffffade7e7e73b3b3b3b3b3b3b3b3b3bbd
84005e505e4a7b7b737b7373736b6b6b63635f5fa5007368736093948c8c
8c8c848484847b7b7373e73bc6b8c6addae7dee7deded6d6d6cecec6bdbd
848484847b7b7b737b7373736b6b6b6363635f5f9c9c9c9c9394948c8c8c
8c8484847b7b7b7b7373e7e7e7e7dae7e7dee7deded6d6d6cec6c6c6bdbd
84847b7b7b7b7b737373736b6b6b6363635f5f5e9c9c93949493948c8c8c
8484847b7b7b7b737374e7e7dae7e7dae7dededed6d6cececec6c6bdbdb1

a5a5a59c9c9c9c9c94949494948c8c8c8c848484c6c6c6bdbdbdbdb5b5b5
b5adadadada5a5a59c9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7
a5a79c9c9c9c9c94949494948c8c8c8c84848784c6bcbdbdbdbdb5b5b5b5
adadadada5a5a5a59a9ce7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6e7
a59c9c9c9c9c94949494948c8c8c8c8c84848487c6bdbdbdbdb5b5b5b5ad
adadada5a5a5a59c9c9ae7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7e7d6
9c9c9c835e4a3737373737374a5e7b848784847bbdbdbd95745a4f4f4f4f
4f4f5a7493a59a9c9c9ce7e7e7c2b1969f9f9f9f9f9f96b1dae7d6e7e7e7
9c8f5e4a848ed2f1f7f1f1e6a37b375f84847b7bbda87460a5a8e1f2fcf2
f2eeb8934f739c9c9394e7d9b1ade7f6fbf7fff7f7fff7da9fbde7e7dae7
9c8372d2e6d287372024508cb1c4c4a3e6e69c7bbd958ce1eee19a4f343a
68a5c8d2d2b8eeeeb593e7c2d3fbfffbd69f7f8eb8e7f9f4f4f7ffffe7da
9c9c5ef14a00000000000000006fedb1244ac47bb5bd74f2600000000000
00000081f8c83a60d28ce7e7b1f7ad3b0000000000003bbdfff98eadf4e7
9c946fa3f78c4a37242437508cd2d2374a72d273b5b581b8fca5604f3a3a
4f68a5e1e14f608ce18ce7e7bdf7ffe7ad9f8e8e9fb8e7fbfb9fadd3fbde
94949437f7f7f7f7f7f7f7f7e6d250727bc4bb73b5b5b54ffcfcfcfcfcfc
fcfceee1688c94d2c68ce7e7e79ffffffffffffffffffffbb8d3e7f4dce7
9494945e8ef7f7f7f7f7f7d2b1d28ee6c4a36b73b5adad74a8fcfcfcfcfc
fce1c8e1a8eed2b8848ce7e7e7b1f6fffffffffffffbf9fbf6fff4f7d6de
949494945ff7f7f7f7f7f7e6d2b17b5037507373adadadad73fcfcfcfcfc
fceee1c894684f688c8ce7e7e7e7bdfffffffffffffffbf9e7b89fb8dede
948c9ca57ba3f7f7f7f7f7f7e6636b7b7b73726badadb5c693b8fcfcfcfc
fcfcee7b7b938c8c8484e7e7e7e7daf7ffffffffffffffc6cedae7deded6
8cc4d2f7e650b1f7f7f7f7e68463f1e6c48f6b6badd2e1fcee68c8fcfcfc
fcee9c7bf2eed2a88484e7f4fbffffb8f9ffffffffffe7cef7fff4d9d6d6
8cd2f7f7f7c4845037374a6b8eedf7f7f1a7736bade1fcfcfcd29c684f4f
6084a8f8fcfcf2bc847be7fbfffffff4e7b89f9fadcef6fffffff7e7d6ce
8c5fc4f1f7f7f7f7f7f7f7f7f7f7f1d2a7635f6ba573d2f2fcfcfcfcfcfc
fcfcfcfcf2e1bc7b737be7bdf4f7fffffffffffffffffffff7fbe7c6bdce
8c63376384b1e6e6f1ede6e6b18e7363244a6363a57b4f7b9cc8eeeef2f8
eeeec8a88c7b3a5a7b7be7bd9fc6e7f9fffff7fffffff9f6dece8e96cec6
84847b634a373737373737373724374a5e6b6363a5a5937b604f4f4f4f4f
4f4f4f3a4f60737b7b7be7e7dac6ad9f9f9f9f9f9f9f9f8e9fadc6cec6c6
848484877b847b7b7373737373726b6b6b635e5fa59c9c9a9c9c93948c8c
8c8c848c84847b7b7373e7e7e7d6e7e7dae7dedededed6d3d6cecec6c6bd
8487847b7b7b7b737b7373736b6b6b6363635f5f9c9a9c9c9493948c8c8c
8c8484847b7b7b7b7373e7d6e7e7e7dae7dee7deded6d6d6cec6c6c6bdbd
84847b7b7b7b7b7b7373736b6b6b6363635f5f5e9c9c9c939494938c8c8c
8484847b7b7b7b737374e7e7e7dae7e7dae7deded6d6cececec6c6bdbdb1

0 11 SF
0 LE neg 20 sub M
(





)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(Overview of Applets)ES()ES()EA(



)0 P(
)HR(

)0 2 H(
    Table of Contents
)EH(
)0 P(
)BQ(


)UL(
)LI(

)A(Overview of Applets)EA(

    )UL(
    )LI(
    )A(The Life Cycle of an Applet)EA(

    )LI(
    )A(Methods for Milestones)EA(

    )LI(
    )A(Methods for Drawing and
    Event Handling)EA(

    )LI(
    )A(Using UI Components)EA(

    )LI(
    )A(Threads in Applets)EA(
        )UL(
        )LI(
        )A(Example)EA(
        )LU(

    )LI(
    Saving, Compiling, and Running an Applet
    )LU(

)LU(

)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(Overview of Applets)ES()ES()EA(





)WB NL NP(







)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(Table of Contents)ES()ES()EA(



)0 P(
)HR(

)0 1 H(
     Overview of Applets
)EH(
)0 P(
)BQ(

This lesson discusses the parts of an applet.
If you haven't yet compiled an applet and included it in an HTML page,
you might want to do so now.
Step by step instructions are in 
)A()BD(Getting
Started: The "Hello World" Applet)ES(
)0 4 IM()EA(.
)0 P(

Every applet is implemented by creating a subclass of the Applet class.
The following figure shows the inheritance hierarchy of the Applet class.
This hierarchy determines much of what an applet can do and how,
as you'll see on the next few pages.
)PR(
java.lang.Object
   |
   +----java.awt.Component
           |
           +----java.awt.Container
                   |
                   +----java.awt.Panel
                           |
                           +----java.applet.Applet
)RP(

)0 4 H(A Simple Applet)EH(
)BQ(
Below is the source code for an applet called Simple.
The Simple applet displays a descriptive string
whenever it encounters a major milestone in its life,
such as when the user first visits the page the applet's on.
The pages that follow
use the Simple applet and build upon it
to illustrate concepts that are common to many applets.
If you find yourself baffled by Java source code,
you might want to go to 
)A()BD(Writing Java Programs)ES(
)0 4 IM()EA(
to learn about the language.
)0 P(

)BQ(
)PR(
import java.awt.Graphics;

public class Simple extends java.applet.Applet {

    StringBuffer buffer = new StringBuffer\201\202;

    public void init\201\202 {
	resize\201500, 20\202;
        addItem\201"initializing... "\202;
    }

    public void start\201\202 {
        addItem\201"starting... "\202;
    }

    public void stop\201\202 {
        addItem\201"stopping... "\202;
    }

    public void destroy\201\202 {
	addItem\201"preparing for unloading..."\202;
    }

    public void addItem\201String newWord\202 {
	System.out.println\201newWord\202;
	buffer.append\201newWord\202;
	repaint\201\202;
    }

    public void paint\201Graphics g\202 {)WR(
	g.drawRect\2010, 0, size\201\202.width - 1, size\201\202.height - 1\202;
	g.drawString\201buffer.toString\201\202, 5, 15\202;
    }
}
)RP(
)QB(

For comparison, here's the
)A(Alpha 3 version of Simple.java)EA(.

)QB(

)0 P(

)0 4 H()A(The Life Cycle of an Applet)EA(
)EH(
)BQ(
You can use the Simple applet to learn
about the milestones in every applet's life.
)QB(

)0 4 H()A(Methods for Milestones)EA(
)EH(
)BQ(

The Applet class provides a framework for applet execution,
defining methods that the system calls
when milestones -- major events in an applet's life cycle -- occur.
Every applet must override some or all of these methods
to respond appropriately.
)QB(

)0 4 H()A(Methods for Drawing and Event Handling)EA(
)EH(
)BQ(
Applets inherit the drawing and event handling methods
of the AWT Component class.
\201AWT stands for Advanced Windowing Toolkit; 
it's the package that applets and applications use
to produce user interfaces.\202
)I(Drawing)ES( refers to anything related to 
representing an applet on-screen --
drawing images,
presenting user interface components such as buttons,
or using graphics primitives.
)I(Event handling)ES( refers to detecting and processing
user input such as mouse clicks and key presses,
as well as more abstract events
such as saving files and iconifying windows.
)QB(

)0 4 H()A(Methods for Adding UI Components)EA(
)EH(
)BQ(
Applets inherit from the AWT Container class.
This means that they are designed to hold Components --
user interface objects
such as buttons, labels, pop-up lists, and scrollbars.
Like other Containers, applets use layout managers
that control the positioning of Components.
)QB(

)0 4 H()A(Threads in Applets)EA(
)EH(
)BQ(
Even the simplest applets run in multiple threads,
although it's not always apparent.
Many applets create and use their own threads,
so that they perform well
without affecting the performance of the applet viewer or of other applets.
)QB(

)0 4 H()A(What Applets Can and Can't Do)EA(
)EH(
)BQ(
For security reasons, 
applets that are loaded over the network
have several restrictions.
One is that an applet can't ordinarily read or write files
on the computer that it's executing on.
Another is that an applet can't make network connections
except to the host that it came from.
Despite these restrictions,
applets can do some things 
that you might not expect.
)QB(

)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(Table of Contents)ES()ES()EA(





)WB NL NP(




)0 P(
)HR(

)0 2 H(
    Simple.java
)EH(
)0 P(
)BQ(

)PR(

/*
 * Copyright \201c\202 1994 Sun Microsystems, Inc. All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software
 * and its documentation for NON-COMMERCIAL purposes and without
 * fee is hereby granted provided that this copyright notice
 * appears in all copies. Please refer to the file "copyright.html"
 * for further important copyright and licensing information.
 *
 * SUN MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
 * THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. SUN SHALL NOT BE LIABLE FOR
 * ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR
 * DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 */
import java.awt.Graphics;

public class Simple extends java.applet.Applet {

    StringBuffer buffer = new StringBuffer\201\202;

    public void init\201\202 {
	resize\201500, 20\202;
        addItem\201"initializing... "\202;
    }

    public void start\201\202 {
        addItem\201"starting... "\202;)WR(
    }

    public void stop\201\202 {
        addItem\201"stopping... "\202;
    }

    public void destroy\201\202 {
	addItem\201"preparing for unloading..."\202;
    }

    public void addItem\201String newWord\202 {
	System.out.println\201newWord\202;
	buffer.append\201newWord\202;
	repaint\201\202;
    }

    public void paint\201Graphics g\202 {
	g.drawRect\2010, 0, size\201\202.width - 1, size\201\202.height - 1\202;
	g.drawString\201buffer.toString\201\202, 5, 15\202;
    }
}
)RP(
)QB(
)0 P(
)HR(
)0 P(


)WB NL NP(







)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(Overview of Applets)ES()ES()EA(



)0 P(
)HR(

)0 2 H(
    The Life Cycle of an Applet
)EH(
)0 P(
)BQ(





Below \201if you're running a Java-compatible browser\202
is the Simple applet.
)EA(
)0 P(




)0 P(

)0 4 H(Loading the Applet)EH()EA(
)BQ(
You should see "initializing... starting..." above,
as the result of the applet being loaded.
When an applet is loaded,
here's what happens:
)UL(
)LI( An instance of the applet's controlling class is created.
)LI( The applet )BD(initializes)ES( itself.
)LI( The applet )BD(starts)ES( running.
)LU(

)QB(

)0 4 H(Leaving and Returning to the Applet's Page)EH()EA(
)BQ(
When the user leaves the page
-- for example, to go to another page --
the applet has the option of )BD(stopping)ES( itself.
When the user returns to the page,
the applet can )BD(start)ES( itself again.
The same thing happens when the user iconifies
the browser window that contains the applet.

)0 P(

)BD(Try this:)ES(
Leave and then return to this page.
You'll see "stopping..." added to the
)A(applet output above)EA(,
as the applet is given the chance to stop itself.
You'll also see "starting...",
when the applet is told to start itself again.
)0 P(

)BD(Try this:)ES(
Iconify this window.
Most window systems provide a button in the title bar
that lets you do this.
\201Other terms used instead of "iconify" are "miniaturize" or "close".\202
You should see "stopping..." and then "starting..."
added to the 
)A(applet output above)EA(.
)QB(

)0 4 H(Reloading the Applet)EH()EA(
)BQ(
Some browsers let the user reload applets,
which consists of unloading the applet and then loading it again.
Before an applet is unloaded, 
it's given the chance to )BD(stop)ES( itself
and then to perform a )BD(final cleanup)ES(,
so that the applet can release any resources it holds.
After that, the applet is unloaded
and then loaded as described in
)A()BD(Loading the Applet)ES()EA(,
above.
)0 P(

)BD(Try this:)ES(
If you're using the HotJava browser,
look at the 
)A(standard output)EA(
to see what happens when you reload this page.
You should see "stopping..." and "preparing for unloading..."
when the applet is unloaded.
\201You can't see this in the applet above
because the applet is unloaded before the text can be displayed.\202
When the applet is reloaded,
you should see "initializing..." and "starting...",
just like when you loaded the applet for the first time.
)I(\201It appears that the 1.0beta3 Netscape browser reloads the applet
only if its reloaded page has changed. 
If the page hasn't changed, 
the browser appears to act as if you temporarily left the page.\202)ES(
)QB(

)0 4 H(Quitting the Browser)EH()EA(
)BQ(
When the user quits the browser 
\201or whatever application is displaying the applet\202,
the applet has the chance to )BD(stop)ES( itself and do )BD(final cleanup)ES(
before the browser exits.
)QB(

)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(Overview of Applets)ES()ES()EA(





)WB NL NP(







)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(Overview of Applets)ES()ES()EA(



)0 P(
)HR(

)0 2 H(
    Methods for Milestones
)EH(
)0 P(
)BQ(

)BQ(
)PR(
public class Simple extends java.applet.Applet {
    . . .
    public void )BD(init\201\202)ES( { . . . }
    public void )BD(start\201\202)ES( { . . . }
    public void )BD(stop\201\202)ES( { . . . }
    public void )BD(destroy\201\202)ES( { . . . }
    . . .
}
)RP(
)QB(
The Simple applet, like every other applet,
is a subclass of the Applet class.
The Simple applet overrides four Applet methods
so that it can respond to major events:

)DL(
)DT( )SM(init\201\202)ES(
)DD( to )BD(initialize)ES( the applet
     each time it's loaded \201or reloaded\202

)DT( )SM(start\201\202)ES(
)DD( to )BD(start)ES( the applet's execution, 
     such as when the applet's loaded
     or when the user revisits a page that contains the applet

)DT( )SM(stop\201\202)ES(
)DD( to )BD(stop)ES( the applet's execution,
     such as when the user leaves the applet's page
     or quits the browser

)DT( )SM(destroy\201\202)ES(
)DD( to perform a )BD(final cleanup)ES( in preparation for unloading

)LD(

Not every applet needs to override all four of these methods.
For example, the 
)A("Hello World" applet)EA(
)A()0 4 IM()EA(
doesn't override
)SM(start\201\202)ES(,
)SM(stop\201\202)ES(, or
)SM(destroy\201\202)ES(,
since it doesn't do anything after it's initialized.
The "Hello World" applet just displays a string once,
using its )SM(init\201\202)ES( method.
Most applets, however, do more.
)0 P(

Every applet that does something after initialization --
changes its onscreen appearance or reacts to user actions, for example --
must override the )SM(start\201\202)ES( method.
The )SM(start\201\202)ES( method either performs the applet's work or
\201more likely\202 sets up a helper object to perform the work.
)0 P(

Most applets that override )SM(start\201\202)ES(
should also override the )SM(stop\201\202)ES( method.
The )SM(stop\201\202)ES( method 
should suspend the applet's execution, 
so that it doesn't take up system resources
when the user isn't viewing the applet's page.
For example, an applet that displays animation
should stop displaying the animation
when the user isn't looking at it.
)0 P(

Many applets don't need to override the )SM(destroy\201\202)ES( method,
since their )SM(stop\201\202)ES( method
\201which is called before )SM(destroy\201\202)ES(\202
does everything necessary to shut down the applet's execution.
However, )SM(destroy\201\202)ES( is available
for applets that need to release additional resources.
)0 P(

The
)SM(init\201\202)ES(,
)SM(start\201\202)ES(,
)SM(stop\201\202)ES(, and
)SM(destroy\201\202)ES( methods
are discussed throughout this trail.
For more information,
you can also refer to the
)A(Applet
API reference page)0 5 IM()EA(.

)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(Overview of Applets)ES()ES()EA(





)WB NL NP(







)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(Overview of Applets)ES()ES()EA(



)0 P(
)HR(

)0 2 H(
    Methods for Drawing and Event Handling
)EH(
)0 P(
)BQ(

)BQ(
)PR(
class Simple extends Applet {
    . . .
    public void )BD(paint)ES(\201Graphics g\202 { . . . }
    . . .
}
)RP(
)QB(
The Simple applet defines its onscreen appearance
by overriding the )SM(paint\201\202)ES( method.
The )SM(paint\201\202)ES( method
is one of two display methods
that applets can override:
)DL(
)DT( )SM(paint\201\202)ES(
)DD( the basic display method;
     most applets implement this method 
     to draw the applet's representation within a browser page
)DT( )SM(update\201\202)ES(
)DD( a method you can use along with )SM(paint\201\202)ES(
     to make improvements in drawing performance
)LD(

Applets inherit their )SM(paint\201\202)ES( and )SM(update\201\202)ES( methods
from the Applet class,
which inherits them from the Abstract Window Toolkit \201AWT\202 Component class.
For an overview of the Component class, and the AWT in general, 
see the
)A(Overview of the Java UI)EA()A()0 6 IM()EA(
lesson.
Within the overview, the architecture
of the AWT drawing system is discussed on the
)A(Drawing)EA()A()0 6 IM()EA(
page.
)0 P(

From the Component class,
applets inherit a group of methods
for event handling.
\201Within the overview, the architecture of the AWT event system is discussed 
on the 
)A(Events)EA()A()0 6 IM()EA(
page.\202
The main event-handling method --
the one that's called \201by default\202 whenever any event occurs --
is )SM(handleEvent\201\202)ES(.
The Component class also defines some convenience methods
for handling certain kinds of events:
)SM(mouseEnter\201\202)ES(,
)SM(mouseExit\201\202)ES(,
)SM(mouseMove\201\202)ES(,
)SM(mouseUp\201\202)ES(,
)SM(mouseDown\201\202)ES(, 
)SM(mouseDrag\201\202)ES(,
)SM(keyDown\201\202)ES(, and
)SM(action\201\202)ES(.
)0 P(

To react to an event,
an applet must override either )SM(handleEvent\201\202)ES(
or the convenience method corresponding to the event.
For example, 
adding the following code to the Simple applet
makes it respond to mouse clicks.

)BQ(
)PR(
public boolean mouseDown\201java.awt.Event evt, int x, int y\202 {
    addItem\201"click!... "\202;
    return false;
}
)RP(
)QB(

Below is the resulting applet.
When you click within its rectangle,
it displays the word "click!...".
)0 P(
 


)0 P(


)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(Overview of Applets)ES()ES()EA(





)WB NL NP(




)0 P(
)HR(

)0 2 H(
    SimpleClick.java
)EH(
)0 P(
)BQ(

)PR(

/*
 * Copyright \201c\202 1994 Sun Microsystems, Inc. All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software
 * and its documentation for NON-COMMERCIAL purposes and without
 * fee is hereby granted provided that this copyright notice
 * appears in all copies. Please refer to the file "copyright.html"
 * for further important copyright and licensing information.
 *
 * SUN MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
 * THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. SUN SHALL NOT BE LIABLE FOR
 * ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR
 * DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 */
import java.awt.Graphics;

public class SimpleClick extends java.applet.Applet {

    StringBuffer buffer = new StringBuffer\201\202;

    public void init\201\202 {
	resize\201500, 20\202;
        addItem\201"initializing... "\202;
    }

    public void start\201\202 {
        addItem\201"starting... "\202;)WR(
    }

    public void stop\201\202 {
        addItem\201"stopping... "\202;
    }

    public void destroy\201\202 {
	addItem\201"preparing for unloading..."\202;
    }

    public void addItem\201String newWord\202 {
	System.out.println\201newWord\202;
	buffer.append\201newWord\202;
	repaint\201\202;
    }

    public void paint\201Graphics g\202 {
	g.drawRect\2010, 0, size\201\202.width - 1, size\201\202.height - 1\202;
	g.drawString\201buffer.toString\201\202, 5, 15\202;
    }

    public boolean mouseDown\201java.awt.Event evt, int x, int y\202 {
	addItem\201"click!... "\202;
	return false;
    }
}
)RP(
)QB(
)0 P(
)HR(
)0 P(


)WB NL NP(







)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(Overview of Applets)ES()ES()EA(



)0 P(
)HR(

)0 2 H(
    Methods for Adding UI Components
)EH(
)0 P(
)BQ(

)BQ(
)PR(
public class Simple extends java.applet.Applet {
    . . . 
    public void paint\201Graphics g\202 {
	g.clearRect\2010, 0, size\201\202.width - 1, size\201\202.height - 1\202;
	g.drawRect\2010, 0, size\201\202.width - 1, size\201\202.height - 1\202;
	g.drawString\201buffer.toString\201\202, 5, 15\202;
    }
}
)RP(
)QB(
The Simple applet's display code is flawed:
It doesn't support scrolling.  
Once the text it displays reaches the end of the display rectangle,
you can't see any new text.
The simplest cure for this problem
is to use a pre-made UI component 
that has the right behavior.
)0 P(

)BD(
Note:
)ES(
This page glosses over many details.
To really learn about using UI components,
go to 
)A(Creating a User Interface)EA(
)A()0 6 IM()EA(.

)0 4 H(Pre-Made UI Components)EH(
)BQ(
The AWT supplies the following UI components
\201the Component subclass for each is listed in parentheses\202:
)UL(
)LI( buttons \201java.awt.Button\202
)LI( checkboxes \201java.awt.Checkbox\202
)LI( single-line text fields \201java.awt.TextField\202
)LI( larger text display and editing areas \201java.awt.TextArea\202
)LI( labels \201java.awt.Label\202
)LI( lists \201java.awt.List\202
)LI( pop-up lists of choices \201java.awt.Choice\202
)LI( scrollbars \201java.awt.Scrollbar\202
)LI( drawing areas \201java.awt.Canvas\202
)LI( menus \201java.awt.Menu, java.awt.MenuItem, java.awt.CheckboxMenuItem\202
)LI( containers \201java.awt.Panel, java.awt.Window and its subclasses\202
)LU(
)QB(

)0 4 H(Methods for Using UI Components in Applets)EH(
)BQ(
Because the Applet class inherits from the AWT Container class,
it's easy to add Components to Applets.
Each Applet has a layout manager
that determines how the Components are placed
within the display area.
Here are some of the methods the Container class supplies,
which you can use to include and position Components in your applet:
)DL(
)DT( )SM(add\201\202)ES(
)DD( Adds the specified Component to this Container.
)DT( )SM(remove\201\202)ES(
)DD( Removes the specified Component from this Container.
)DT( )SM(getComponents\201\202)ES(
)DD( Gets all the Components in this Container.
)DT( )SM(locate\201\202)ES(
)DD( Locates the Component at the specified x,y position.
)DT( )SM(setLayout\201\202)ES(
)DD( Sets the layout manager for this Container.
)DT( )SM(preferredSize\201\202)ES(
)DD( Returns the preferred size of this Container.
)LD(
)QB(

)0 4 H(Adding a Non-Editable Text Field to the Simple Applet)EH(
)BQ(
To make the Simple applet use a scrolling, non-editable text field,
we can use the TextField class.
Here is the revised )A(source code.)EA(
The main changes are listed below.
)BQ(
)PR(
TextField field = new TextField\20180\202;
//We used to use a StringBuffer.

public void init\201\202 {
    //Add the TextField, and then display it.
    field.setEditable\201false\202;
    add\201field\202;
    resize\201field.preferredSize\201\202\202;
    show\201\202;
    addItem\201"initializing... "\202;
}

public void addItem\201String newWord\202 {
    //This used to append the string to the StringBuffer;
    //now it appends it to the TextField.
    String t = field.getText\201\202;
    System.out.println\201newWord\202;
    field.setText\201t + newWord\202;
    repaint\201\202;
}

//The paint\201\202 method is no longer necessary,
//since the TextField repaints itself automatically.
)RP(
)QB(
Below is the resulting applet.
)0 P(

)BQ(
)HR(
)I(
Your browser doesn't understand the APPLET tag,
and there's no Alpha version of this applet.
The reason:  
With the Alpha 3 and earlier APIs, 
it's difficult to write an applet that uses the AWT.
)ES(
)HR(
)QB(

)QB(

)0 4 H(Where Can I Find More Information?)EH(
)BQ(
Using Components is covered in detail
in )A(Creating a User Interface)EA( 
)A()0 6 IM()EA(.
For more information on the methods listed above,
you can also refer to the
)A(Container
API reference page)0 5 IM()EA(.
)QB(

)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(Overview of Applets)ES()ES()EA(





)WB NL NP(




)0 P(
)HR(

)0 2 H(
    ScrollingSimple.java
)EH(
)0 P(
)BQ(

)PR(

/*
 * Copyright \201c\202 1994 Sun Microsystems, Inc. All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software
 * and its documentation for NON-COMMERCIAL purposes and without
 * fee is hereby granted provided that this copyright notice
 * appears in all copies. Please refer to the file "copyright.html"
 * for further important copyright and licensing information.
 *
 * SUN MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
 * THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. SUN SHALL NOT BE LIABLE FOR
 * ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR
 * DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 */
import java.awt.*;

public class ScrollingSimple extends java.applet.Applet {

    TextField field = new TextField\20180\202;

    public void init\201\202 {
        field.setEditable\201false\202;
	setLayout\201new BorderLayout\201\202\202; //workaround for cut-off sides
        add\201"Center", field\202;
        show\201\202;
        addItem\201"initializing... "\202;
    })WR(

    public void start\201\202 {
        addItem\201"starting... "\202;
    }

    public void stop\201\202 {
        addItem\201"stopping... "\202;
    }

    public void destroy\201\202 {
	addItem\201"preparing for unloading..."\202;
    }

    public void addItem\201String newWord\202 {
        String t = field.getText\201\202;

        System.out.println\201newWord\202;
        field.setText\201t + newWord\202;
        repaint\201\202;
    }
}
)RP(
)QB(
)0 P(
)HR(
)0 P(


)WB NL NP(







)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(Overview of Applets)ES()ES()EA(



)0 P(
)HR(

)0 2 H(
    Threads in Applets
)EH(
)0 P(
)BQ(

)BQ(
)BD(Note:)ES(
This page assumes that you know what a thread is.
If you don't, read
)A()BD(What Are Threads?)ES()EA(
)A()0 7 IM()EA(
before reading this page.
)0 P(



Every applet can run in multiple threads.
For example, when the HotJava browser first views 
a document that contains an applet,
the browser's DocumentSwitcher thread executes
the applet's )SM(init\201\202)ES( method.
And when the user scrolls the document, 
the AWT WServer thread executes the applet's )SM(update\201\202)ES( method.

)0 P(

So why would an applet need to create and use its own threads?
Imagine an applet that performs some time-consuming initialization --
loading images, for example -- in its )SM(init\201\202)ES( method.
The thread that invokes )SM(init\201\202)ES(
can't do anything else until )SM(init\201\202)ES( returns.
In the HotJava browser,
this means that the browser can't display the applet or anything after it
until the applet has finished initializing itself.
So if the applet is at the top of the page, for example,
then nothing will appear on the page until the applet has finished initializing itself.
)0 P(
The solution to this problem is for the applet to create a thread
and move the initialization code
from the )SM(init\201\202)ES( method
into the thread body.
Look at the )A(next page)EA(
to see both the problem and its cure.
)0 P(

)HR(
)BD(Rule of Thumb:)ES(
If an applet performs a time-consuming task,
it should create and use its own thread to perform that task.
)HR(
)0 P(

Here is SimpleApplet modified to print the thread
that each of its major methods is called from:
)0 P(




)0 P(

If you're using an alpha version of the HotJava browser,
view this applet's output using the
)A(standard output,)EA(
since the output doesn't scroll in this page.
The beta version of the applet scrolls, 
making it possible to view the output in your applet viewer
\201although standard output is still necessary for viewing output
caused by reloading the applet\202.

)QB(

)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(Overview of Applets)ES()ES()EA(





)WB NL NP(




)0 P(
)HR(

)0 2 H(
    PrintThread.java
)EH(
)0 P(
)BQ(

)PR(

/*
 * Copyright \201c\202 1994 Sun Microsystems, Inc. All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software
 * and its documentation for NON-COMMERCIAL purposes and without
 * fee is hereby granted provided that this copyright notice
 * appears in all copies. Please refer to the file "copyright.html"
 * for further important copyright and licensing information.
 *
 * SUN MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
 * THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. SUN SHALL NOT BE LIABLE FOR
 * ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR
 * DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 */
import java.awt.*;

public class PrintThread extends java.applet.Applet {

    TextField field = new TextField\20180\202;

    public void init\201\202 {
	field.setEditable\201false\202;
	setLayout\201new BorderLayout\201\202\202; //workaround for chopped off sides
	add\201"Center", field\202;  
	show\201\202;
        addItem\201"init:" + Thread.currentThread\201\202.getName\201\202 + " "\202;
    })WR(

    public void start\201\202 {
        addItem\201"start:" + Thread.currentThread\201\202.getName\201\202 + " "\202;
    }

    public void stop\201\202 {
        addItem\201"stop:" + Thread.currentThread\201\202.getName\201\202 + " "\202;
    }

    public void destroy\201\202 {
        addItem\201"destroy:" + Thread.currentThread\201\202.getName\201\202 + " "\202;
    }

    public void addItem\201String newWord\202 {
	String t = field.getText\201\202;
	System.out.println\201newWord\202;
	field.setText\201t + newWord\202;
	field.repaint\201\202;
    }

    public synchronized void paint\201Graphics g\202 {
        addItem\201"paint:" + Thread.currentThread\201\202.getName\201\202 + " "\202;
    }
}
)RP(
)QB(
)0 P(
)HR(
)0 P(


)WB NL NP(







)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(Overview of Applets)ES()ES()EA(



)0 P(
)HR(

)0 2 H(
    Threads in Applets: Examples
)EH(
)0 P(
)BQ(

This page points to two pages with thread-using applets.
One applet \201Good\202 performs computation-intensive initialization
in a separate thread.
The other \201Bad\202 performs the same initialization
directly in its )SM(init\201\202)ES( method.
)0 P(

The exact results of these applets' execution 
depend on the browser that contains the applets.
However, these applets are likely to demonstrate clearly
the following rule:
)BD(
Whenever an applet performs a lengthy operation,
it should use a separate thread 
\201which it creates\202
to perform the operation.
)ES(
)0 P(

To compare these applets' execution,
follow these steps:
)OL(
)LI( Bring up a new browser window
     \201such as by cloning this page
     or starting up another browser process\202.
)LI( From one browser window, 
     )A(view the page that has the Good applet.)EA(
)LI( From the other browser window,
     )A(view the page that has the Bad applet.)EA(
)LU(



)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(Overview of Applets)ES()ES()EA(





)WB NL NP(







)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(Overview of Applets)ES()ES()EA(



)0 P(
)HR(

)0 2 H(
    Threads in Applets: Good Example
)EH(
)0 P(
)BQ(

)BD(
Note:
)ES(
If you've already looked at this page,
reload the applet to see the example again.
)0 P(

The following applet \201named Good\202
has a computation-intensive beginning sequence,
implemented as a loop that occasionally prints status.
The Good applet does the right thing:
Instead of putting the loop
in the )SM(init\201\202)ES( or )SM(start\201\202)ES( method,
it spins off a thread to do the computation.
\201Here's the )A(source code)EA(.\202
Notice how quickly \201compared to the Bad applet\202 the browser
can display the applet and the rest of the page.
)0 P(



)0 P(



)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(Overview of Applets)ES()ES()EA(





)WB NL NP(







)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(Overview of Applets)ES()ES()EA(



)0 P(
)HR(

)0 2 H(
    Threads in Applets: Bad Example
)EH(
)0 P(
)BQ(

)BD(
Note:
)ES(
If you've already looked at this page,
reload the applet to see the example again.
)0 P(

The following applet \201named Bad\202 does the same things as the Good applet,
but at the wrong time:
It performs its computation
in its )SM(init\201\202)ES( method.
\201Here's the )A(source code)EA(.\202
You can watch the applet's progress
by reading the status line at the bottom of this window.
Notice how the applet \201and perhaps the text that follows it\202
doesn't appear for quite a while.
In the 1.0alpha3 HotJava browser,
this delay is because the formatting thread 
is stuck executing the applet's )SM(init\201\202)ES( method.
)0 P(



)0 P(
Worse yet, the Bad applet, if it were on the same page as the Good one,
could starve the Good one.
This is browser dependent, 
and would happen if a browser didn't call
the Good applet's )SM(start\201\202)ES( method
until Bad's )SM(init\201\202)ES( method has returned.
When this happened,
the Good applet wouldn't get a chance to create its thread
\201much less run it\202
until the Bad applet finished.
)0 P(



)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(Overview of Applets)ES()ES()EA(





)WB NL NP(




)0 P(
)HR(

)0 2 H(
    Good.java
)EH(
)0 P(
)BQ(

)PR(

/*
 * Copyright \201c\202 1994 Sun Microsystems, Inc. All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software
 * and its documentation for NON-COMMERCIAL purposes and without
 * fee is hereby granted provided that this copyright notice
 * appears in all copies. Please refer to the file "copyright.html"
 * for further important copyright and licensing information.
 *
 * SUN MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
 * THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. SUN SHALL NOT BE LIABLE FOR
 * ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR
 * DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 */
import java.awt.Graphics;

public class Good extends java.applet.Applet implements Runnable {
    static final int NUMLOOPS = 2000000;
    int loop = 0;
    boolean doneInitializing = false;
    String message = null;
    Thread loopThread = null;

    public void init\201\202 {
	resize\201500, 20\202;
    }
)WR(
    public void start\201\202 {
	if \201loopThread == null\202 {
	    loopThread = new Thread\201this, "Good thread"\202;
	} else { //reset and do it again
	    loop = 0;
	    doneInitializing = false;
	    message = null;
	}
	loopThread.start\201\202;
    }

    public void stop\201\202 {
	loopThread.stop\201\202;
	loopThread = null;
    }

    public void run\201\202 {
	while \201loop < NUMLOOPS\202 {
	    if \201\201++loop%50000\202==0\202 {
		message = "Good: Initialization loop #"
			  + loop + " of " + NUMLOOPS;
		getAppletContext\201\202.showStatus\201message\202;
		repaint\201\202;
		Thread.yield\201\202;
	    }
	}
	doneInitializing = true;
	repaint\201\202;
    }
)WR(

    /* The paint\201\202 method can't be called until init\201\202 has exited. */
    public void paint\201Graphics g\202 {
	g.drawRect\2010, 0, size\201\202.width - 1, size\201\202.height - 1\202;
	if \201message == null\202 
	    g.drawString\201"Good: ", 5, 15\202;
	else if \201!doneInitializing\202 
	    g.drawString\201message, 5, 15\202;
	else 
	    g.drawString\201"Good: Done initializing.", 5, 15\202;
    }
}
)RP(
)QB(
)0 P(
)HR(
)0 P(


)WB NL NP(




)0 P(
)HR(

)0 2 H(
    Bad.java
)EH(
)0 P(
)BQ(

)PR(

/*
 * Copyright \201c\202 1994 Sun Microsystems, Inc. All Rights Reserved.
 *
 * Permission to use, copy, modify, and distribute this software
 * and its documentation for NON-COMMERCIAL purposes and without
 * fee is hereby granted provided that this copyright notice
 * appears in all copies. Please refer to the file "copyright.html"
 * for further important copyright and licensing information.
 *
 * SUN MAKES NO REPRESENTATIONS OR WARRANTIES ABOUT THE SUITABILITY OF
 * THE SOFTWARE, EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE, OR NON-INFRINGEMENT. SUN SHALL NOT BE LIABLE FOR
 * ANY DAMAGES SUFFERED BY LICENSEE AS A RESULT OF USING, MODIFYING OR
 * DISTRIBUTING THIS SOFTWARE OR ITS DERIVATIVES.
 */
import java.awt.Graphics;

public class Bad extends java.applet.Applet {

    static final int NUMLOOPS = 2000000;
    int loop = 0;
    boolean doneInitializing = false;
    String message = null;
    Thread loopThread = null;

    public void init\201\202 {
	resize\201500, 20\202;
	while \201loop < NUMLOOPS\202 {)WR(
	    if \201\201++loop%50000\202==0\202 {
		message = "Bad: Initialization loop #"
			  + loop + " of " + NUMLOOPS;
		getAppletContext\201\202.showStatus\201message\202;
		repaint\201\202;
	    }
	}
	doneInitializing = true;
	repaint\201\202;
    }

    /* The paint\201\202 method can't be called until init\201\202 has exited. */
    public void paint\201Graphics g\202 {
	g.drawRect\2010, 0, size\201\202.width - 1, size\201\202.height - 1\202;
	if \201message == null\202 
	    g.drawString\201"Bad: ", 5, 15\202;
	else if \201!doneInitializing\202 
	    g.drawString\201message, 5, 15\202;
	else 
	    g.drawString\201"Bad: Done initializing.", 5, 15\202;
    }
}
)RP(
)QB(
)0 P(
)HR(
)0 P(


)WB NL NP(







)A()0 0 IM()EA()A()0 1 IM()EA()A()0 2 IM()EA()A()0 3 IM()EA(


)A()BD()I(Overview of Applets)ES()ES()EA(



)0 P(
)HR(

)0 2 H(
    What Applets Can and Can't Do
)EH(
)0 P(
)BQ(

For security reasons, 
an applet that's loaded over the network
has the following restrictions:
)UL(
)LI( It can't load libraries or define native methods.
)LI( It can't ordinarily read or write files
     on the host that's executing it.
)LI( It can't make network connections
     except to the host that it came from.
)LI( It can't start any program on the host that's executing it.
)LI( It can't read every system property.
)LI( Windows that an applet brings up
     are distinguished by some warning text
     and either a colored bar or an image,
     so that the windows don't look
     like they're part of a trusted application.
)LU(
)0 P(

Things that applets can do, 
that you might not expect:
)UL(
)LI( Applets that are loaded from the local file system
     \201from a directory in the user's CLASSPATH
     [or from a file URL?]\202
     have none of the restrictions
     that applets loaded over the network do \201as listed above\202.
     For this reason, 
     some browsers don't allow applets to be loaded
     via file: URLs.
)LI( Although most applets stop running once you leave their page,
     they don't have to.
)LU(
)0 P(

Each browser has a SecurityManager object 
that checks for applet security violations.
When a SecurityManager detects a violation,
it throws a SecurityException.

[ need an example applet that tries to do a few forbidden things ]

)QB(
)0 P(
)HR(
)0 P(



)A()2 0 IM()EA()A()2 1 IM()EA()A()2 2 IM()EA()A()2 3 IM()EA(


)A()BD()I(Overview of Applets)ES()ES()EA(





)WB NL showpage end restore
